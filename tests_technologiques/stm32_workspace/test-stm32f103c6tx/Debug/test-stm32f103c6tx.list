
test-stm32f103c6tx.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005adc  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000006c  08005be8  08005be8  00015be8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005c54  08005c54  00020188  2**0
                  CONTENTS
  4 .ARM          00000000  08005c54  08005c54  00020188  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005c54  08005c54  00020188  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005c54  08005c54  00015c54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005c58  08005c58  00015c58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000188  20000000  08005c5c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001d00  20000188  08005de4  00020188  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001e88  08005de4  00021e88  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020188  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011097  00000000  00000000  000201b1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002baf  00000000  00000000  00031248  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000b08  00000000  00000000  00033df8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000009b0  00000000  00000000  00034900  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00015e28  00000000  00000000  000352b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000c212  00000000  00000000  0004b0d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0006b061  00000000  00000000  000572ea  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000c234b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002a78  00000000  00000000  000c23c8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000188 	.word	0x20000188
 8000128:	00000000 	.word	0x00000000
 800012c:	08005bd0 	.word	0x08005bd0

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000018c 	.word	0x2000018c
 8000148:	08005bd0 	.word	0x08005bd0

0800014c <TransferComplete>:
#define BYTES_COUNT 9
int8_t test_src_buffer[BUFFER_SIZE] = { 0x0 };
int8_t colors[BYTES_COUNT] = { 20, 0, 0, 0, 20, 0, 0, 0, 20 };

volatile uint32_t test_counter = 0;
static void TransferComplete(DMA_HandleTypeDef *DmaHandle) {
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
	test_counter += 1;
 8000154:	4b04      	ldr	r3, [pc, #16]	; (8000168 <TransferComplete+0x1c>)
 8000156:	681b      	ldr	r3, [r3, #0]
 8000158:	3301      	adds	r3, #1
 800015a:	4a03      	ldr	r2, [pc, #12]	; (8000168 <TransferComplete+0x1c>)
 800015c:	6013      	str	r3, [r2, #0]
}
 800015e:	bf00      	nop
 8000160:	370c      	adds	r7, #12
 8000162:	46bd      	mov	sp, r7
 8000164:	bc80      	pop	{r7}
 8000166:	4770      	bx	lr
 8000168:	200013a4 	.word	0x200013a4

0800016c <TransferError>:

static void TransferError(DMA_HandleTypeDef *DmaHandle) {
 800016c:	b480      	push	{r7}
 800016e:	b083      	sub	sp, #12
 8000170:	af00      	add	r7, sp, #0
 8000172:	6078      	str	r0, [r7, #4]

}
 8000174:	bf00      	nop
 8000176:	370c      	adds	r7, #12
 8000178:	46bd      	mov	sp, r7
 800017a:	bc80      	pop	{r7}
 800017c:	4770      	bx	lr
	...

08000180 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000180:	b580      	push	{r7, lr}
 8000182:	b088      	sub	sp, #32
 8000184:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000186:	f000 fb5f 	bl	8000848 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800018a:	f000 f953 	bl	8000434 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800018e:	f000 fa1b 	bl	80005c8 <MX_GPIO_Init>
  MX_DMA_Init();
 8000192:	f000 f9a9 	bl	80004e8 <MX_DMA_Init>
  MX_USB_DEVICE_Init();
 8000196:	f005 f86f 	bl	8005278 <MX_USB_DEVICE_Init>

	//HAL_TIM_Base_Start_IT(&htim2);
//#define DATA_LENGTH 8
	//uint8_t data[DATA_LENGTH] = { 1, 1, 2, 3, 5, 8, 13, 21 };

	for (int i = 0; i < BUFFER_SIZE; i++) {
 800019a:	2300      	movs	r3, #0
 800019c:	61fb      	str	r3, [r7, #28]
 800019e:	e007      	b.n	80001b0 <main+0x30>
		test_src_buffer[i] = 0x0;
 80001a0:	4a9c      	ldr	r2, [pc, #624]	; (8000414 <main+0x294>)
 80001a2:	69fb      	ldr	r3, [r7, #28]
 80001a4:	4413      	add	r3, r2
 80001a6:	2200      	movs	r2, #0
 80001a8:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < BUFFER_SIZE; i++) {
 80001aa:	69fb      	ldr	r3, [r7, #28]
 80001ac:	3301      	adds	r3, #1
 80001ae:	61fb      	str	r3, [r7, #28]
 80001b0:	69fb      	ldr	r3, [r7, #28]
 80001b2:	f5b3 5f90 	cmp.w	r3, #4608	; 0x1200
 80001b6:	dbf3      	blt.n	80001a0 <main+0x20>
	}
	uint8_t pin = (uint8_t)(GPIO_PIN_0 >> 0);
 80001b8:	2301      	movs	r3, #1
 80001ba:	74fb      	strb	r3, [r7, #19]
	for (int i = 0; i < 3*24; i++) {
 80001bc:	2300      	movs	r3, #0
 80001be:	61bb      	str	r3, [r7, #24]
 80001c0:	e0fc      	b.n	80003bc <main+0x23c>

		for (int j = 0; j < 8; j++) {
 80001c2:	2300      	movs	r3, #0
 80001c4:	617b      	str	r3, [r7, #20]
 80001c6:	e0f2      	b.n	80003ae <main+0x22e>
			int k = i*8*8 + j*8;
 80001c8:	69bb      	ldr	r3, [r7, #24]
 80001ca:	00da      	lsls	r2, r3, #3
 80001cc:	697b      	ldr	r3, [r7, #20]
 80001ce:	4413      	add	r3, r2
 80001d0:	00db      	lsls	r3, r3, #3
 80001d2:	603b      	str	r3, [r7, #0]

			if (colors[i % BYTES_COUNT] >> j & 0x1) {
 80001d4:	69b9      	ldr	r1, [r7, #24]
 80001d6:	4b90      	ldr	r3, [pc, #576]	; (8000418 <main+0x298>)
 80001d8:	fb83 2301 	smull	r2, r3, r3, r1
 80001dc:	105a      	asrs	r2, r3, #1
 80001de:	17cb      	asrs	r3, r1, #31
 80001e0:	1ad2      	subs	r2, r2, r3
 80001e2:	4613      	mov	r3, r2
 80001e4:	00db      	lsls	r3, r3, #3
 80001e6:	4413      	add	r3, r2
 80001e8:	1aca      	subs	r2, r1, r3
 80001ea:	4b8c      	ldr	r3, [pc, #560]	; (800041c <main+0x29c>)
 80001ec:	569b      	ldrsb	r3, [r3, r2]
 80001ee:	461a      	mov	r2, r3
 80001f0:	697b      	ldr	r3, [r7, #20]
 80001f2:	fa42 f303 	asr.w	r3, r2, r3
 80001f6:	f003 0301 	and.w	r3, r3, #1
 80001fa:	2b00      	cmp	r3, #0
 80001fc:	d068      	beq.n	80002d0 <main+0x150>

				test_src_buffer[k+0] |= pin;
 80001fe:	4a85      	ldr	r2, [pc, #532]	; (8000414 <main+0x294>)
 8000200:	683b      	ldr	r3, [r7, #0]
 8000202:	4413      	add	r3, r2
 8000204:	f993 2000 	ldrsb.w	r2, [r3]
 8000208:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800020c:	4313      	orrs	r3, r2
 800020e:	b259      	sxtb	r1, r3
 8000210:	4a80      	ldr	r2, [pc, #512]	; (8000414 <main+0x294>)
 8000212:	683b      	ldr	r3, [r7, #0]
 8000214:	4413      	add	r3, r2
 8000216:	460a      	mov	r2, r1
 8000218:	701a      	strb	r2, [r3, #0]
				test_src_buffer[k+1] |= pin;
 800021a:	683b      	ldr	r3, [r7, #0]
 800021c:	3301      	adds	r3, #1
 800021e:	4a7d      	ldr	r2, [pc, #500]	; (8000414 <main+0x294>)
 8000220:	56d1      	ldrsb	r1, [r2, r3]
 8000222:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8000226:	683b      	ldr	r3, [r7, #0]
 8000228:	3301      	adds	r3, #1
 800022a:	430a      	orrs	r2, r1
 800022c:	b251      	sxtb	r1, r2
 800022e:	4a79      	ldr	r2, [pc, #484]	; (8000414 <main+0x294>)
 8000230:	54d1      	strb	r1, [r2, r3]
				test_src_buffer[k+2] |= pin;
 8000232:	683b      	ldr	r3, [r7, #0]
 8000234:	3302      	adds	r3, #2
 8000236:	4a77      	ldr	r2, [pc, #476]	; (8000414 <main+0x294>)
 8000238:	56d1      	ldrsb	r1, [r2, r3]
 800023a:	f997 2013 	ldrsb.w	r2, [r7, #19]
 800023e:	683b      	ldr	r3, [r7, #0]
 8000240:	3302      	adds	r3, #2
 8000242:	430a      	orrs	r2, r1
 8000244:	b251      	sxtb	r1, r2
 8000246:	4a73      	ldr	r2, [pc, #460]	; (8000414 <main+0x294>)
 8000248:	54d1      	strb	r1, [r2, r3]
				test_src_buffer[k+3] |= pin;
 800024a:	683b      	ldr	r3, [r7, #0]
 800024c:	3303      	adds	r3, #3
 800024e:	4a71      	ldr	r2, [pc, #452]	; (8000414 <main+0x294>)
 8000250:	56d1      	ldrsb	r1, [r2, r3]
 8000252:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8000256:	683b      	ldr	r3, [r7, #0]
 8000258:	3303      	adds	r3, #3
 800025a:	430a      	orrs	r2, r1
 800025c:	b251      	sxtb	r1, r2
 800025e:	4a6d      	ldr	r2, [pc, #436]	; (8000414 <main+0x294>)
 8000260:	54d1      	strb	r1, [r2, r3]
				test_src_buffer[k+4] |= pin;
 8000262:	683b      	ldr	r3, [r7, #0]
 8000264:	3304      	adds	r3, #4
 8000266:	4a6b      	ldr	r2, [pc, #428]	; (8000414 <main+0x294>)
 8000268:	56d1      	ldrsb	r1, [r2, r3]
 800026a:	f997 2013 	ldrsb.w	r2, [r7, #19]
 800026e:	683b      	ldr	r3, [r7, #0]
 8000270:	3304      	adds	r3, #4
 8000272:	430a      	orrs	r2, r1
 8000274:	b251      	sxtb	r1, r2
 8000276:	4a67      	ldr	r2, [pc, #412]	; (8000414 <main+0x294>)
 8000278:	54d1      	strb	r1, [r2, r3]

				test_src_buffer[k+5] &= ~pin;
 800027a:	683b      	ldr	r3, [r7, #0]
 800027c:	3305      	adds	r3, #5
 800027e:	4a65      	ldr	r2, [pc, #404]	; (8000414 <main+0x294>)
 8000280:	56d1      	ldrsb	r1, [r2, r3]
 8000282:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8000286:	43db      	mvns	r3, r3
 8000288:	b25a      	sxtb	r2, r3
 800028a:	683b      	ldr	r3, [r7, #0]
 800028c:	3305      	adds	r3, #5
 800028e:	400a      	ands	r2, r1
 8000290:	b251      	sxtb	r1, r2
 8000292:	4a60      	ldr	r2, [pc, #384]	; (8000414 <main+0x294>)
 8000294:	54d1      	strb	r1, [r2, r3]
				test_src_buffer[k+6] &= ~pin;
 8000296:	683b      	ldr	r3, [r7, #0]
 8000298:	3306      	adds	r3, #6
 800029a:	4a5e      	ldr	r2, [pc, #376]	; (8000414 <main+0x294>)
 800029c:	56d1      	ldrsb	r1, [r2, r3]
 800029e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80002a2:	43db      	mvns	r3, r3
 80002a4:	b25a      	sxtb	r2, r3
 80002a6:	683b      	ldr	r3, [r7, #0]
 80002a8:	3306      	adds	r3, #6
 80002aa:	400a      	ands	r2, r1
 80002ac:	b251      	sxtb	r1, r2
 80002ae:	4a59      	ldr	r2, [pc, #356]	; (8000414 <main+0x294>)
 80002b0:	54d1      	strb	r1, [r2, r3]
				test_src_buffer[k+7] &= ~pin;
 80002b2:	683b      	ldr	r3, [r7, #0]
 80002b4:	3307      	adds	r3, #7
 80002b6:	4a57      	ldr	r2, [pc, #348]	; (8000414 <main+0x294>)
 80002b8:	56d1      	ldrsb	r1, [r2, r3]
 80002ba:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80002be:	43db      	mvns	r3, r3
 80002c0:	b25a      	sxtb	r2, r3
 80002c2:	683b      	ldr	r3, [r7, #0]
 80002c4:	3307      	adds	r3, #7
 80002c6:	400a      	ands	r2, r1
 80002c8:	b251      	sxtb	r1, r2
 80002ca:	4a52      	ldr	r2, [pc, #328]	; (8000414 <main+0x294>)
 80002cc:	54d1      	strb	r1, [r2, r3]
 80002ce:	e06b      	b.n	80003a8 <main+0x228>

			} else {

				test_src_buffer[k+0] |= pin;
 80002d0:	4a50      	ldr	r2, [pc, #320]	; (8000414 <main+0x294>)
 80002d2:	683b      	ldr	r3, [r7, #0]
 80002d4:	4413      	add	r3, r2
 80002d6:	f993 2000 	ldrsb.w	r2, [r3]
 80002da:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80002de:	4313      	orrs	r3, r2
 80002e0:	b259      	sxtb	r1, r3
 80002e2:	4a4c      	ldr	r2, [pc, #304]	; (8000414 <main+0x294>)
 80002e4:	683b      	ldr	r3, [r7, #0]
 80002e6:	4413      	add	r3, r2
 80002e8:	460a      	mov	r2, r1
 80002ea:	701a      	strb	r2, [r3, #0]
				test_src_buffer[k+1] |= pin;
 80002ec:	683b      	ldr	r3, [r7, #0]
 80002ee:	3301      	adds	r3, #1
 80002f0:	4a48      	ldr	r2, [pc, #288]	; (8000414 <main+0x294>)
 80002f2:	56d1      	ldrsb	r1, [r2, r3]
 80002f4:	f997 2013 	ldrsb.w	r2, [r7, #19]
 80002f8:	683b      	ldr	r3, [r7, #0]
 80002fa:	3301      	adds	r3, #1
 80002fc:	430a      	orrs	r2, r1
 80002fe:	b251      	sxtb	r1, r2
 8000300:	4a44      	ldr	r2, [pc, #272]	; (8000414 <main+0x294>)
 8000302:	54d1      	strb	r1, [r2, r3]
				test_src_buffer[k+2] |= pin;
 8000304:	683b      	ldr	r3, [r7, #0]
 8000306:	3302      	adds	r3, #2
 8000308:	4a42      	ldr	r2, [pc, #264]	; (8000414 <main+0x294>)
 800030a:	56d1      	ldrsb	r1, [r2, r3]
 800030c:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8000310:	683b      	ldr	r3, [r7, #0]
 8000312:	3302      	adds	r3, #2
 8000314:	430a      	orrs	r2, r1
 8000316:	b251      	sxtb	r1, r2
 8000318:	4a3e      	ldr	r2, [pc, #248]	; (8000414 <main+0x294>)
 800031a:	54d1      	strb	r1, [r2, r3]

				test_src_buffer[k+3] &= ~pin;
 800031c:	683b      	ldr	r3, [r7, #0]
 800031e:	3303      	adds	r3, #3
 8000320:	4a3c      	ldr	r2, [pc, #240]	; (8000414 <main+0x294>)
 8000322:	56d1      	ldrsb	r1, [r2, r3]
 8000324:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8000328:	43db      	mvns	r3, r3
 800032a:	b25a      	sxtb	r2, r3
 800032c:	683b      	ldr	r3, [r7, #0]
 800032e:	3303      	adds	r3, #3
 8000330:	400a      	ands	r2, r1
 8000332:	b251      	sxtb	r1, r2
 8000334:	4a37      	ldr	r2, [pc, #220]	; (8000414 <main+0x294>)
 8000336:	54d1      	strb	r1, [r2, r3]
				test_src_buffer[k+4] &= ~pin;
 8000338:	683b      	ldr	r3, [r7, #0]
 800033a:	3304      	adds	r3, #4
 800033c:	4a35      	ldr	r2, [pc, #212]	; (8000414 <main+0x294>)
 800033e:	56d1      	ldrsb	r1, [r2, r3]
 8000340:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8000344:	43db      	mvns	r3, r3
 8000346:	b25a      	sxtb	r2, r3
 8000348:	683b      	ldr	r3, [r7, #0]
 800034a:	3304      	adds	r3, #4
 800034c:	400a      	ands	r2, r1
 800034e:	b251      	sxtb	r1, r2
 8000350:	4a30      	ldr	r2, [pc, #192]	; (8000414 <main+0x294>)
 8000352:	54d1      	strb	r1, [r2, r3]
				test_src_buffer[k+5] &= ~pin;
 8000354:	683b      	ldr	r3, [r7, #0]
 8000356:	3305      	adds	r3, #5
 8000358:	4a2e      	ldr	r2, [pc, #184]	; (8000414 <main+0x294>)
 800035a:	56d1      	ldrsb	r1, [r2, r3]
 800035c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8000360:	43db      	mvns	r3, r3
 8000362:	b25a      	sxtb	r2, r3
 8000364:	683b      	ldr	r3, [r7, #0]
 8000366:	3305      	adds	r3, #5
 8000368:	400a      	ands	r2, r1
 800036a:	b251      	sxtb	r1, r2
 800036c:	4a29      	ldr	r2, [pc, #164]	; (8000414 <main+0x294>)
 800036e:	54d1      	strb	r1, [r2, r3]
				test_src_buffer[k+6] &= ~pin;
 8000370:	683b      	ldr	r3, [r7, #0]
 8000372:	3306      	adds	r3, #6
 8000374:	4a27      	ldr	r2, [pc, #156]	; (8000414 <main+0x294>)
 8000376:	56d1      	ldrsb	r1, [r2, r3]
 8000378:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800037c:	43db      	mvns	r3, r3
 800037e:	b25a      	sxtb	r2, r3
 8000380:	683b      	ldr	r3, [r7, #0]
 8000382:	3306      	adds	r3, #6
 8000384:	400a      	ands	r2, r1
 8000386:	b251      	sxtb	r1, r2
 8000388:	4a22      	ldr	r2, [pc, #136]	; (8000414 <main+0x294>)
 800038a:	54d1      	strb	r1, [r2, r3]
				test_src_buffer[k+7] &= ~pin;
 800038c:	683b      	ldr	r3, [r7, #0]
 800038e:	3307      	adds	r3, #7
 8000390:	4a20      	ldr	r2, [pc, #128]	; (8000414 <main+0x294>)
 8000392:	56d1      	ldrsb	r1, [r2, r3]
 8000394:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8000398:	43db      	mvns	r3, r3
 800039a:	b25a      	sxtb	r2, r3
 800039c:	683b      	ldr	r3, [r7, #0]
 800039e:	3307      	adds	r3, #7
 80003a0:	400a      	ands	r2, r1
 80003a2:	b251      	sxtb	r1, r2
 80003a4:	4a1b      	ldr	r2, [pc, #108]	; (8000414 <main+0x294>)
 80003a6:	54d1      	strb	r1, [r2, r3]
		for (int j = 0; j < 8; j++) {
 80003a8:	697b      	ldr	r3, [r7, #20]
 80003aa:	3301      	adds	r3, #1
 80003ac:	617b      	str	r3, [r7, #20]
 80003ae:	697b      	ldr	r3, [r7, #20]
 80003b0:	2b07      	cmp	r3, #7
 80003b2:	f77f af09 	ble.w	80001c8 <main+0x48>
	for (int i = 0; i < 3*24; i++) {
 80003b6:	69bb      	ldr	r3, [r7, #24]
 80003b8:	3301      	adds	r3, #1
 80003ba:	61bb      	str	r3, [r7, #24]
 80003bc:	69bb      	ldr	r3, [r7, #24]
 80003be:	2b47      	cmp	r3, #71	; 0x47
 80003c0:	f77f aeff 	ble.w	80001c2 <main+0x42>
		test_src_buffer[i+5] &= ~pin;
		test_src_buffer[i+6] &= ~pin;
		test_src_buffer[i+7] &= ~pin;
	}*/

	HAL_DMA_RegisterCallback(&hdma_memtomem_dma1_channel1, HAL_DMA_XFER_CPLT_CB_ID, TransferComplete);
 80003c4:	4a16      	ldr	r2, [pc, #88]	; (8000420 <main+0x2a0>)
 80003c6:	2100      	movs	r1, #0
 80003c8:	4816      	ldr	r0, [pc, #88]	; (8000424 <main+0x2a4>)
 80003ca:	f000 fd6d 	bl	8000ea8 <HAL_DMA_RegisterCallback>
	HAL_DMA_RegisterCallback(&hdma_memtomem_dma1_channel1, HAL_DMA_XFER_ERROR_CB_ID, TransferError);
 80003ce:	4a16      	ldr	r2, [pc, #88]	; (8000428 <main+0x2a8>)
 80003d0:	2102      	movs	r1, #2
 80003d2:	4814      	ldr	r0, [pc, #80]	; (8000424 <main+0x2a4>)
 80003d4:	f000 fd68 	bl	8000ea8 <HAL_DMA_RegisterCallback>

	if (HAL_DMA_Start_IT(&hdma_memtomem_dma1_channel1, (uint32_t) &test_src_buffer, (uint32_t) &GPIOA->ODR, BUFFER_SIZE) != HAL_OK) {
 80003d8:	490e      	ldr	r1, [pc, #56]	; (8000414 <main+0x294>)
 80003da:	f44f 5390 	mov.w	r3, #4608	; 0x1200
 80003de:	4a13      	ldr	r2, [pc, #76]	; (800042c <main+0x2ac>)
 80003e0:	4810      	ldr	r0, [pc, #64]	; (8000424 <main+0x2a4>)
 80003e2:	f000 fbfb 	bl	8000bdc <HAL_DMA_Start_IT>
 80003e6:	4603      	mov	r3, r0
 80003e8:	2b00      	cmp	r3, #0
 80003ea:	d001      	beq.n	80003f0 <main+0x270>
		//if (HAL_DMA_Start_IT(&hdma_memtomem_dma1_channel1, (uint32_t) &test_src_buffer, (uint32_t) &test_dst_buffer, BUFFER_SIZE) != HAL_OK) {
		Error_Handler();
 80003ec:	f000 f94c 	bl	8000688 <Error_Handler>
	}

	uint32_t t0 = HAL_GetTick();
 80003f0:	f000 fa82 	bl	80008f8 <HAL_GetTick>
 80003f4:	60f8      	str	r0, [r7, #12]
			//HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
		}

		HAL_Delay(1000);*/

		if (test_counter >= 10000) {
 80003f6:	4b0e      	ldr	r3, [pc, #56]	; (8000430 <main+0x2b0>)
 80003f8:	681b      	ldr	r3, [r3, #0]
 80003fa:	f242 720f 	movw	r2, #9999	; 0x270f
 80003fe:	4293      	cmp	r3, r2
 8000400:	d9f9      	bls.n	80003f6 <main+0x276>
			uint32_t t1 = HAL_GetTick() - t0;
 8000402:	f000 fa79 	bl	80008f8 <HAL_GetTick>
 8000406:	4602      	mov	r2, r0
 8000408:	68fb      	ldr	r3, [r7, #12]
 800040a:	1ad3      	subs	r3, r2, r3
 800040c:	60bb      	str	r3, [r7, #8]

			//HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
			uint32_t t2 = t1;
 800040e:	68bb      	ldr	r3, [r7, #8]
 8000410:	607b      	str	r3, [r7, #4]
		if (test_counter >= 10000) {
 8000412:	e7f0      	b.n	80003f6 <main+0x276>
 8000414:	200001a4 	.word	0x200001a4
 8000418:	38e38e39 	.word	0x38e38e39
 800041c:	20000000 	.word	0x20000000
 8000420:	0800014d 	.word	0x0800014d
 8000424:	20001610 	.word	0x20001610
 8000428:	0800016d 	.word	0x0800016d
 800042c:	4001080c 	.word	0x4001080c
 8000430:	200013a4 	.word	0x200013a4

08000434 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000434:	b580      	push	{r7, lr}
 8000436:	b094      	sub	sp, #80	; 0x50
 8000438:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800043a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800043e:	2228      	movs	r2, #40	; 0x28
 8000440:	2100      	movs	r1, #0
 8000442:	4618      	mov	r0, r3
 8000444:	f005 fbbc 	bl	8005bc0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000448:	f107 0314 	add.w	r3, r7, #20
 800044c:	2200      	movs	r2, #0
 800044e:	601a      	str	r2, [r3, #0]
 8000450:	605a      	str	r2, [r3, #4]
 8000452:	609a      	str	r2, [r3, #8]
 8000454:	60da      	str	r2, [r3, #12]
 8000456:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000458:	1d3b      	adds	r3, r7, #4
 800045a:	2200      	movs	r2, #0
 800045c:	601a      	str	r2, [r3, #0]
 800045e:	605a      	str	r2, [r3, #4]
 8000460:	609a      	str	r2, [r3, #8]
 8000462:	60da      	str	r2, [r3, #12]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000464:	2301      	movs	r3, #1
 8000466:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000468:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800046c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800046e:	2300      	movs	r3, #0
 8000470:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000472:	2301      	movs	r3, #1
 8000474:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000476:	2302      	movs	r3, #2
 8000478:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800047a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800047e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000480:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000484:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000486:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800048a:	4618      	mov	r0, r3
 800048c:	f001 fdce 	bl	800202c <HAL_RCC_OscConfig>
 8000490:	4603      	mov	r3, r0
 8000492:	2b00      	cmp	r3, #0
 8000494:	d001      	beq.n	800049a <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000496:	f000 f8f7 	bl	8000688 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800049a:	230f      	movs	r3, #15
 800049c:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800049e:	2302      	movs	r3, #2
 80004a0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80004a2:	2300      	movs	r3, #0
 80004a4:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80004a6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80004aa:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80004ac:	2300      	movs	r3, #0
 80004ae:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80004b0:	f107 0314 	add.w	r3, r7, #20
 80004b4:	2102      	movs	r1, #2
 80004b6:	4618      	mov	r0, r3
 80004b8:	f002 f838 	bl	800252c <HAL_RCC_ClockConfig>
 80004bc:	4603      	mov	r3, r0
 80004be:	2b00      	cmp	r3, #0
 80004c0:	d001      	beq.n	80004c6 <SystemClock_Config+0x92>
  {
    Error_Handler();
 80004c2:	f000 f8e1 	bl	8000688 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80004c6:	2310      	movs	r3, #16
 80004c8:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 80004ca:	2300      	movs	r3, #0
 80004cc:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80004ce:	1d3b      	adds	r3, r7, #4
 80004d0:	4618      	mov	r0, r3
 80004d2:	f002 f995 	bl	8002800 <HAL_RCCEx_PeriphCLKConfig>
 80004d6:	4603      	mov	r3, r0
 80004d8:	2b00      	cmp	r3, #0
 80004da:	d001      	beq.n	80004e0 <SystemClock_Config+0xac>
  {
    Error_Handler();
 80004dc:	f000 f8d4 	bl	8000688 <Error_Handler>
  }
}
 80004e0:	bf00      	nop
 80004e2:	3750      	adds	r7, #80	; 0x50
 80004e4:	46bd      	mov	sp, r7
 80004e6:	bd80      	pop	{r7, pc}

080004e8 <MX_DMA_Init>:
  * Configure DMA for memory to memory transfers
  *   hdma_memtomem_dma1_channel1
  *   hdma_memtomem_dma1_channel2
  */
static void MX_DMA_Init(void) 
{
 80004e8:	b580      	push	{r7, lr}
 80004ea:	b082      	sub	sp, #8
 80004ec:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80004ee:	4b31      	ldr	r3, [pc, #196]	; (80005b4 <MX_DMA_Init+0xcc>)
 80004f0:	695b      	ldr	r3, [r3, #20]
 80004f2:	4a30      	ldr	r2, [pc, #192]	; (80005b4 <MX_DMA_Init+0xcc>)
 80004f4:	f043 0301 	orr.w	r3, r3, #1
 80004f8:	6153      	str	r3, [r2, #20]
 80004fa:	4b2e      	ldr	r3, [pc, #184]	; (80005b4 <MX_DMA_Init+0xcc>)
 80004fc:	695b      	ldr	r3, [r3, #20]
 80004fe:	f003 0301 	and.w	r3, r3, #1
 8000502:	607b      	str	r3, [r7, #4]
 8000504:	687b      	ldr	r3, [r7, #4]

  /* Configure DMA request hdma_memtomem_dma1_channel1 on DMA1_Channel1 */
  hdma_memtomem_dma1_channel1.Instance = DMA1_Channel1;
 8000506:	4b2c      	ldr	r3, [pc, #176]	; (80005b8 <MX_DMA_Init+0xd0>)
 8000508:	4a2c      	ldr	r2, [pc, #176]	; (80005bc <MX_DMA_Init+0xd4>)
 800050a:	601a      	str	r2, [r3, #0]
  hdma_memtomem_dma1_channel1.Init.Direction = DMA_MEMORY_TO_MEMORY;
 800050c:	4b2a      	ldr	r3, [pc, #168]	; (80005b8 <MX_DMA_Init+0xd0>)
 800050e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000512:	605a      	str	r2, [r3, #4]
  hdma_memtomem_dma1_channel1.Init.PeriphInc = DMA_PINC_ENABLE;
 8000514:	4b28      	ldr	r3, [pc, #160]	; (80005b8 <MX_DMA_Init+0xd0>)
 8000516:	2240      	movs	r2, #64	; 0x40
 8000518:	609a      	str	r2, [r3, #8]
  hdma_memtomem_dma1_channel1.Init.MemInc = DMA_MINC_DISABLE;
 800051a:	4b27      	ldr	r3, [pc, #156]	; (80005b8 <MX_DMA_Init+0xd0>)
 800051c:	2200      	movs	r2, #0
 800051e:	60da      	str	r2, [r3, #12]
  hdma_memtomem_dma1_channel1.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000520:	4b25      	ldr	r3, [pc, #148]	; (80005b8 <MX_DMA_Init+0xd0>)
 8000522:	2200      	movs	r2, #0
 8000524:	611a      	str	r2, [r3, #16]
  hdma_memtomem_dma1_channel1.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000526:	4b24      	ldr	r3, [pc, #144]	; (80005b8 <MX_DMA_Init+0xd0>)
 8000528:	2200      	movs	r2, #0
 800052a:	615a      	str	r2, [r3, #20]
  hdma_memtomem_dma1_channel1.Init.Mode = DMA_CIRCULAR;
 800052c:	4b22      	ldr	r3, [pc, #136]	; (80005b8 <MX_DMA_Init+0xd0>)
 800052e:	2220      	movs	r2, #32
 8000530:	619a      	str	r2, [r3, #24]
  hdma_memtomem_dma1_channel1.Init.Priority = DMA_PRIORITY_LOW;
 8000532:	4b21      	ldr	r3, [pc, #132]	; (80005b8 <MX_DMA_Init+0xd0>)
 8000534:	2200      	movs	r2, #0
 8000536:	61da      	str	r2, [r3, #28]
  if (HAL_DMA_Init(&hdma_memtomem_dma1_channel1) != HAL_OK)
 8000538:	481f      	ldr	r0, [pc, #124]	; (80005b8 <MX_DMA_Init+0xd0>)
 800053a:	f000 faf5 	bl	8000b28 <HAL_DMA_Init>
 800053e:	4603      	mov	r3, r0
 8000540:	2b00      	cmp	r3, #0
 8000542:	d001      	beq.n	8000548 <MX_DMA_Init+0x60>
  {
    Error_Handler( );
 8000544:	f000 f8a0 	bl	8000688 <Error_Handler>
  }

  /* Configure DMA request hdma_memtomem_dma1_channel2 on DMA1_Channel2 */
  hdma_memtomem_dma1_channel2.Instance = DMA1_Channel2;
 8000548:	4b1d      	ldr	r3, [pc, #116]	; (80005c0 <MX_DMA_Init+0xd8>)
 800054a:	4a1e      	ldr	r2, [pc, #120]	; (80005c4 <MX_DMA_Init+0xdc>)
 800054c:	601a      	str	r2, [r3, #0]
  hdma_memtomem_dma1_channel2.Init.Direction = DMA_MEMORY_TO_MEMORY;
 800054e:	4b1c      	ldr	r3, [pc, #112]	; (80005c0 <MX_DMA_Init+0xd8>)
 8000550:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000554:	605a      	str	r2, [r3, #4]
  hdma_memtomem_dma1_channel2.Init.PeriphInc = DMA_PINC_ENABLE;
 8000556:	4b1a      	ldr	r3, [pc, #104]	; (80005c0 <MX_DMA_Init+0xd8>)
 8000558:	2240      	movs	r2, #64	; 0x40
 800055a:	609a      	str	r2, [r3, #8]
  hdma_memtomem_dma1_channel2.Init.MemInc = DMA_MINC_ENABLE;
 800055c:	4b18      	ldr	r3, [pc, #96]	; (80005c0 <MX_DMA_Init+0xd8>)
 800055e:	2280      	movs	r2, #128	; 0x80
 8000560:	60da      	str	r2, [r3, #12]
  hdma_memtomem_dma1_channel2.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000562:	4b17      	ldr	r3, [pc, #92]	; (80005c0 <MX_DMA_Init+0xd8>)
 8000564:	2200      	movs	r2, #0
 8000566:	611a      	str	r2, [r3, #16]
  hdma_memtomem_dma1_channel2.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000568:	4b15      	ldr	r3, [pc, #84]	; (80005c0 <MX_DMA_Init+0xd8>)
 800056a:	2200      	movs	r2, #0
 800056c:	615a      	str	r2, [r3, #20]
  hdma_memtomem_dma1_channel2.Init.Mode = DMA_NORMAL;
 800056e:	4b14      	ldr	r3, [pc, #80]	; (80005c0 <MX_DMA_Init+0xd8>)
 8000570:	2200      	movs	r2, #0
 8000572:	619a      	str	r2, [r3, #24]
  hdma_memtomem_dma1_channel2.Init.Priority = DMA_PRIORITY_LOW;
 8000574:	4b12      	ldr	r3, [pc, #72]	; (80005c0 <MX_DMA_Init+0xd8>)
 8000576:	2200      	movs	r2, #0
 8000578:	61da      	str	r2, [r3, #28]
  if (HAL_DMA_Init(&hdma_memtomem_dma1_channel2) != HAL_OK)
 800057a:	4811      	ldr	r0, [pc, #68]	; (80005c0 <MX_DMA_Init+0xd8>)
 800057c:	f000 fad4 	bl	8000b28 <HAL_DMA_Init>
 8000580:	4603      	mov	r3, r0
 8000582:	2b00      	cmp	r3, #0
 8000584:	d001      	beq.n	800058a <MX_DMA_Init+0xa2>
  {
    Error_Handler( );
 8000586:	f000 f87f 	bl	8000688 <Error_Handler>
  }

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800058a:	2200      	movs	r2, #0
 800058c:	2100      	movs	r1, #0
 800058e:	200b      	movs	r0, #11
 8000590:	f000 fa93 	bl	8000aba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000594:	200b      	movs	r0, #11
 8000596:	f000 faac 	bl	8000af2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 800059a:	2200      	movs	r2, #0
 800059c:	2100      	movs	r1, #0
 800059e:	200c      	movs	r0, #12
 80005a0:	f000 fa8b 	bl	8000aba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 80005a4:	200c      	movs	r0, #12
 80005a6:	f000 faa4 	bl	8000af2 <HAL_NVIC_EnableIRQ>

}
 80005aa:	bf00      	nop
 80005ac:	3708      	adds	r7, #8
 80005ae:	46bd      	mov	sp, r7
 80005b0:	bd80      	pop	{r7, pc}
 80005b2:	bf00      	nop
 80005b4:	40021000 	.word	0x40021000
 80005b8:	20001610 	.word	0x20001610
 80005bc:	40020008 	.word	0x40020008
 80005c0:	200015cc 	.word	0x200015cc
 80005c4:	4002001c 	.word	0x4002001c

080005c8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b088      	sub	sp, #32
 80005cc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005ce:	f107 0310 	add.w	r3, r7, #16
 80005d2:	2200      	movs	r2, #0
 80005d4:	601a      	str	r2, [r3, #0]
 80005d6:	605a      	str	r2, [r3, #4]
 80005d8:	609a      	str	r2, [r3, #8]
 80005da:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005dc:	4b27      	ldr	r3, [pc, #156]	; (800067c <MX_GPIO_Init+0xb4>)
 80005de:	699b      	ldr	r3, [r3, #24]
 80005e0:	4a26      	ldr	r2, [pc, #152]	; (800067c <MX_GPIO_Init+0xb4>)
 80005e2:	f043 0310 	orr.w	r3, r3, #16
 80005e6:	6193      	str	r3, [r2, #24]
 80005e8:	4b24      	ldr	r3, [pc, #144]	; (800067c <MX_GPIO_Init+0xb4>)
 80005ea:	699b      	ldr	r3, [r3, #24]
 80005ec:	f003 0310 	and.w	r3, r3, #16
 80005f0:	60fb      	str	r3, [r7, #12]
 80005f2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80005f4:	4b21      	ldr	r3, [pc, #132]	; (800067c <MX_GPIO_Init+0xb4>)
 80005f6:	699b      	ldr	r3, [r3, #24]
 80005f8:	4a20      	ldr	r2, [pc, #128]	; (800067c <MX_GPIO_Init+0xb4>)
 80005fa:	f043 0320 	orr.w	r3, r3, #32
 80005fe:	6193      	str	r3, [r2, #24]
 8000600:	4b1e      	ldr	r3, [pc, #120]	; (800067c <MX_GPIO_Init+0xb4>)
 8000602:	699b      	ldr	r3, [r3, #24]
 8000604:	f003 0320 	and.w	r3, r3, #32
 8000608:	60bb      	str	r3, [r7, #8]
 800060a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800060c:	4b1b      	ldr	r3, [pc, #108]	; (800067c <MX_GPIO_Init+0xb4>)
 800060e:	699b      	ldr	r3, [r3, #24]
 8000610:	4a1a      	ldr	r2, [pc, #104]	; (800067c <MX_GPIO_Init+0xb4>)
 8000612:	f043 0304 	orr.w	r3, r3, #4
 8000616:	6193      	str	r3, [r2, #24]
 8000618:	4b18      	ldr	r3, [pc, #96]	; (800067c <MX_GPIO_Init+0xb4>)
 800061a:	699b      	ldr	r3, [r3, #24]
 800061c:	f003 0304 	and.w	r3, r3, #4
 8000620:	607b      	str	r3, [r7, #4]
 8000622:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8000624:	2201      	movs	r2, #1
 8000626:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800062a:	4815      	ldr	r0, [pc, #84]	; (8000680 <MX_GPIO_Init+0xb8>)
 800062c:	f000 fe04 	bl	8001238 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET);
 8000630:	2200      	movs	r2, #0
 8000632:	2101      	movs	r1, #1
 8000634:	4813      	ldr	r0, [pc, #76]	; (8000684 <MX_GPIO_Init+0xbc>)
 8000636:	f000 fdff 	bl	8001238 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800063a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800063e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000640:	2301      	movs	r3, #1
 8000642:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000644:	2300      	movs	r3, #0
 8000646:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000648:	2302      	movs	r3, #2
 800064a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800064c:	f107 0310 	add.w	r3, r7, #16
 8000650:	4619      	mov	r1, r3
 8000652:	480b      	ldr	r0, [pc, #44]	; (8000680 <MX_GPIO_Init+0xb8>)
 8000654:	f000 fc9e 	bl	8000f94 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000658:	2301      	movs	r3, #1
 800065a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800065c:	2301      	movs	r3, #1
 800065e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000660:	2300      	movs	r3, #0
 8000662:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000664:	2302      	movs	r3, #2
 8000666:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000668:	f107 0310 	add.w	r3, r7, #16
 800066c:	4619      	mov	r1, r3
 800066e:	4805      	ldr	r0, [pc, #20]	; (8000684 <MX_GPIO_Init+0xbc>)
 8000670:	f000 fc90 	bl	8000f94 <HAL_GPIO_Init>

}
 8000674:	bf00      	nop
 8000676:	3720      	adds	r7, #32
 8000678:	46bd      	mov	sp, r7
 800067a:	bd80      	pop	{r7, pc}
 800067c:	40021000 	.word	0x40021000
 8000680:	40011000 	.word	0x40011000
 8000684:	40010800 	.word	0x40010800

08000688 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000688:	b480      	push	{r7}
 800068a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	GPIOC->ODR = 0xffff;
 800068c:	4b03      	ldr	r3, [pc, #12]	; (800069c <Error_Handler+0x14>)
 800068e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000692:	60da      	str	r2, [r3, #12]
  /* USER CODE END Error_Handler_Debug */
}
 8000694:	bf00      	nop
 8000696:	46bd      	mov	sp, r7
 8000698:	bc80      	pop	{r7}
 800069a:	4770      	bx	lr
 800069c:	40011000 	.word	0x40011000

080006a0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006a0:	b480      	push	{r7}
 80006a2:	b085      	sub	sp, #20
 80006a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80006a6:	4b15      	ldr	r3, [pc, #84]	; (80006fc <HAL_MspInit+0x5c>)
 80006a8:	699b      	ldr	r3, [r3, #24]
 80006aa:	4a14      	ldr	r2, [pc, #80]	; (80006fc <HAL_MspInit+0x5c>)
 80006ac:	f043 0301 	orr.w	r3, r3, #1
 80006b0:	6193      	str	r3, [r2, #24]
 80006b2:	4b12      	ldr	r3, [pc, #72]	; (80006fc <HAL_MspInit+0x5c>)
 80006b4:	699b      	ldr	r3, [r3, #24]
 80006b6:	f003 0301 	and.w	r3, r3, #1
 80006ba:	60bb      	str	r3, [r7, #8]
 80006bc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80006be:	4b0f      	ldr	r3, [pc, #60]	; (80006fc <HAL_MspInit+0x5c>)
 80006c0:	69db      	ldr	r3, [r3, #28]
 80006c2:	4a0e      	ldr	r2, [pc, #56]	; (80006fc <HAL_MspInit+0x5c>)
 80006c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006c8:	61d3      	str	r3, [r2, #28]
 80006ca:	4b0c      	ldr	r3, [pc, #48]	; (80006fc <HAL_MspInit+0x5c>)
 80006cc:	69db      	ldr	r3, [r3, #28]
 80006ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006d2:	607b      	str	r3, [r7, #4]
 80006d4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80006d6:	4b0a      	ldr	r3, [pc, #40]	; (8000700 <HAL_MspInit+0x60>)
 80006d8:	685b      	ldr	r3, [r3, #4]
 80006da:	60fb      	str	r3, [r7, #12]
 80006dc:	68fb      	ldr	r3, [r7, #12]
 80006de:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80006e2:	60fb      	str	r3, [r7, #12]
 80006e4:	68fb      	ldr	r3, [r7, #12]
 80006e6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80006ea:	60fb      	str	r3, [r7, #12]
 80006ec:	4a04      	ldr	r2, [pc, #16]	; (8000700 <HAL_MspInit+0x60>)
 80006ee:	68fb      	ldr	r3, [r7, #12]
 80006f0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006f2:	bf00      	nop
 80006f4:	3714      	adds	r7, #20
 80006f6:	46bd      	mov	sp, r7
 80006f8:	bc80      	pop	{r7}
 80006fa:	4770      	bx	lr
 80006fc:	40021000 	.word	0x40021000
 8000700:	40010000 	.word	0x40010000

08000704 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000704:	b480      	push	{r7}
 8000706:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000708:	bf00      	nop
 800070a:	46bd      	mov	sp, r7
 800070c:	bc80      	pop	{r7}
 800070e:	4770      	bx	lr

08000710 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000710:	b480      	push	{r7}
 8000712:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000714:	e7fe      	b.n	8000714 <HardFault_Handler+0x4>

08000716 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000716:	b480      	push	{r7}
 8000718:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800071a:	e7fe      	b.n	800071a <MemManage_Handler+0x4>

0800071c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800071c:	b480      	push	{r7}
 800071e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000720:	e7fe      	b.n	8000720 <BusFault_Handler+0x4>

08000722 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000722:	b480      	push	{r7}
 8000724:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000726:	e7fe      	b.n	8000726 <UsageFault_Handler+0x4>

08000728 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000728:	b480      	push	{r7}
 800072a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800072c:	bf00      	nop
 800072e:	46bd      	mov	sp, r7
 8000730:	bc80      	pop	{r7}
 8000732:	4770      	bx	lr

08000734 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000734:	b480      	push	{r7}
 8000736:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000738:	bf00      	nop
 800073a:	46bd      	mov	sp, r7
 800073c:	bc80      	pop	{r7}
 800073e:	4770      	bx	lr

08000740 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000740:	b480      	push	{r7}
 8000742:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000744:	bf00      	nop
 8000746:	46bd      	mov	sp, r7
 8000748:	bc80      	pop	{r7}
 800074a:	4770      	bx	lr

0800074c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000750:	f000 f8c0 	bl	80008d4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000754:	bf00      	nop
 8000756:	bd80      	pop	{r7, pc}

08000758 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_memtomem_dma1_channel1);
 800075c:	4802      	ldr	r0, [pc, #8]	; (8000768 <DMA1_Channel1_IRQHandler+0x10>)
 800075e:	f000 fa9d 	bl	8000c9c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000762:	bf00      	nop
 8000764:	bd80      	pop	{r7, pc}
 8000766:	bf00      	nop
 8000768:	20001610 	.word	0x20001610

0800076c <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_memtomem_dma1_channel2);
 8000770:	4802      	ldr	r0, [pc, #8]	; (800077c <DMA1_Channel2_IRQHandler+0x10>)
 8000772:	f000 fa93 	bl	8000c9c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8000776:	bf00      	nop
 8000778:	bd80      	pop	{r7, pc}
 800077a:	bf00      	nop
 800077c:	200015cc 	.word	0x200015cc

08000780 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000784:	4802      	ldr	r0, [pc, #8]	; (8000790 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8000786:	f000 fe76 	bl	8001476 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 800078a:	bf00      	nop
 800078c:	bd80      	pop	{r7, pc}
 800078e:	bf00      	nop
 8000790:	20001c1c 	.word	0x20001c1c

08000794 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000794:	b480      	push	{r7}
 8000796:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8000798:	4b15      	ldr	r3, [pc, #84]	; (80007f0 <SystemInit+0x5c>)
 800079a:	681b      	ldr	r3, [r3, #0]
 800079c:	4a14      	ldr	r2, [pc, #80]	; (80007f0 <SystemInit+0x5c>)
 800079e:	f043 0301 	orr.w	r3, r3, #1
 80007a2:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 80007a4:	4b12      	ldr	r3, [pc, #72]	; (80007f0 <SystemInit+0x5c>)
 80007a6:	685a      	ldr	r2, [r3, #4]
 80007a8:	4911      	ldr	r1, [pc, #68]	; (80007f0 <SystemInit+0x5c>)
 80007aa:	4b12      	ldr	r3, [pc, #72]	; (80007f4 <SystemInit+0x60>)
 80007ac:	4013      	ands	r3, r2
 80007ae:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 80007b0:	4b0f      	ldr	r3, [pc, #60]	; (80007f0 <SystemInit+0x5c>)
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	4a0e      	ldr	r2, [pc, #56]	; (80007f0 <SystemInit+0x5c>)
 80007b6:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80007ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80007be:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80007c0:	4b0b      	ldr	r3, [pc, #44]	; (80007f0 <SystemInit+0x5c>)
 80007c2:	681b      	ldr	r3, [r3, #0]
 80007c4:	4a0a      	ldr	r2, [pc, #40]	; (80007f0 <SystemInit+0x5c>)
 80007c6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80007ca:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 80007cc:	4b08      	ldr	r3, [pc, #32]	; (80007f0 <SystemInit+0x5c>)
 80007ce:	685b      	ldr	r3, [r3, #4]
 80007d0:	4a07      	ldr	r2, [pc, #28]	; (80007f0 <SystemInit+0x5c>)
 80007d2:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 80007d6:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 80007d8:	4b05      	ldr	r3, [pc, #20]	; (80007f0 <SystemInit+0x5c>)
 80007da:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 80007de:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80007e0:	4b05      	ldr	r3, [pc, #20]	; (80007f8 <SystemInit+0x64>)
 80007e2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80007e6:	609a      	str	r2, [r3, #8]
#endif 
}
 80007e8:	bf00      	nop
 80007ea:	46bd      	mov	sp, r7
 80007ec:	bc80      	pop	{r7}
 80007ee:	4770      	bx	lr
 80007f0:	40021000 	.word	0x40021000
 80007f4:	f8ff0000 	.word	0xf8ff0000
 80007f8:	e000ed00 	.word	0xe000ed00

080007fc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80007fc:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80007fe:	e003      	b.n	8000808 <LoopCopyDataInit>

08000800 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000800:	4b0b      	ldr	r3, [pc, #44]	; (8000830 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8000802:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000804:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000806:	3104      	adds	r1, #4

08000808 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000808:	480a      	ldr	r0, [pc, #40]	; (8000834 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800080a:	4b0b      	ldr	r3, [pc, #44]	; (8000838 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 800080c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800080e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000810:	d3f6      	bcc.n	8000800 <CopyDataInit>
  ldr r2, =_sbss
 8000812:	4a0a      	ldr	r2, [pc, #40]	; (800083c <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000814:	e002      	b.n	800081c <LoopFillZerobss>

08000816 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000816:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000818:	f842 3b04 	str.w	r3, [r2], #4

0800081c <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 800081c:	4b08      	ldr	r3, [pc, #32]	; (8000840 <LoopFillZerobss+0x24>)
  cmp r2, r3
 800081e:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000820:	d3f9      	bcc.n	8000816 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000822:	f7ff ffb7 	bl	8000794 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000826:	f005 f9a7 	bl	8005b78 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800082a:	f7ff fca9 	bl	8000180 <main>
  bx lr
 800082e:	4770      	bx	lr
  ldr r3, =_sidata
 8000830:	08005c5c 	.word	0x08005c5c
  ldr r0, =_sdata
 8000834:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000838:	20000188 	.word	0x20000188
  ldr r2, =_sbss
 800083c:	20000188 	.word	0x20000188
  ldr r3, = _ebss
 8000840:	20001e88 	.word	0x20001e88

08000844 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000844:	e7fe      	b.n	8000844 <ADC1_2_IRQHandler>
	...

08000848 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800084c:	4b08      	ldr	r3, [pc, #32]	; (8000870 <HAL_Init+0x28>)
 800084e:	681b      	ldr	r3, [r3, #0]
 8000850:	4a07      	ldr	r2, [pc, #28]	; (8000870 <HAL_Init+0x28>)
 8000852:	f043 0310 	orr.w	r3, r3, #16
 8000856:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000858:	2003      	movs	r0, #3
 800085a:	f000 f923 	bl	8000aa4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800085e:	2000      	movs	r0, #0
 8000860:	f000 f808 	bl	8000874 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000864:	f7ff ff1c 	bl	80006a0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000868:	2300      	movs	r3, #0
}
 800086a:	4618      	mov	r0, r3
 800086c:	bd80      	pop	{r7, pc}
 800086e:	bf00      	nop
 8000870:	40022000 	.word	0x40022000

08000874 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	b082      	sub	sp, #8
 8000878:	af00      	add	r7, sp, #0
 800087a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800087c:	4b12      	ldr	r3, [pc, #72]	; (80008c8 <HAL_InitTick+0x54>)
 800087e:	681a      	ldr	r2, [r3, #0]
 8000880:	4b12      	ldr	r3, [pc, #72]	; (80008cc <HAL_InitTick+0x58>)
 8000882:	781b      	ldrb	r3, [r3, #0]
 8000884:	4619      	mov	r1, r3
 8000886:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800088a:	fbb3 f3f1 	udiv	r3, r3, r1
 800088e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000892:	4618      	mov	r0, r3
 8000894:	f000 f93b 	bl	8000b0e <HAL_SYSTICK_Config>
 8000898:	4603      	mov	r3, r0
 800089a:	2b00      	cmp	r3, #0
 800089c:	d001      	beq.n	80008a2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800089e:	2301      	movs	r3, #1
 80008a0:	e00e      	b.n	80008c0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	2b0f      	cmp	r3, #15
 80008a6:	d80a      	bhi.n	80008be <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80008a8:	2200      	movs	r2, #0
 80008aa:	6879      	ldr	r1, [r7, #4]
 80008ac:	f04f 30ff 	mov.w	r0, #4294967295
 80008b0:	f000 f903 	bl	8000aba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80008b4:	4a06      	ldr	r2, [pc, #24]	; (80008d0 <HAL_InitTick+0x5c>)
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80008ba:	2300      	movs	r3, #0
 80008bc:	e000      	b.n	80008c0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80008be:	2301      	movs	r3, #1
}
 80008c0:	4618      	mov	r0, r3
 80008c2:	3708      	adds	r7, #8
 80008c4:	46bd      	mov	sp, r7
 80008c6:	bd80      	pop	{r7, pc}
 80008c8:	2000000c 	.word	0x2000000c
 80008cc:	20000014 	.word	0x20000014
 80008d0:	20000010 	.word	0x20000010

080008d4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80008d4:	b480      	push	{r7}
 80008d6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80008d8:	4b05      	ldr	r3, [pc, #20]	; (80008f0 <HAL_IncTick+0x1c>)
 80008da:	781b      	ldrb	r3, [r3, #0]
 80008dc:	461a      	mov	r2, r3
 80008de:	4b05      	ldr	r3, [pc, #20]	; (80008f4 <HAL_IncTick+0x20>)
 80008e0:	681b      	ldr	r3, [r3, #0]
 80008e2:	4413      	add	r3, r2
 80008e4:	4a03      	ldr	r2, [pc, #12]	; (80008f4 <HAL_IncTick+0x20>)
 80008e6:	6013      	str	r3, [r2, #0]
}
 80008e8:	bf00      	nop
 80008ea:	46bd      	mov	sp, r7
 80008ec:	bc80      	pop	{r7}
 80008ee:	4770      	bx	lr
 80008f0:	20000014 	.word	0x20000014
 80008f4:	20001654 	.word	0x20001654

080008f8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80008f8:	b480      	push	{r7}
 80008fa:	af00      	add	r7, sp, #0
  return uwTick;
 80008fc:	4b02      	ldr	r3, [pc, #8]	; (8000908 <HAL_GetTick+0x10>)
 80008fe:	681b      	ldr	r3, [r3, #0]
}
 8000900:	4618      	mov	r0, r3
 8000902:	46bd      	mov	sp, r7
 8000904:	bc80      	pop	{r7}
 8000906:	4770      	bx	lr
 8000908:	20001654 	.word	0x20001654

0800090c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800090c:	b480      	push	{r7}
 800090e:	b085      	sub	sp, #20
 8000910:	af00      	add	r7, sp, #0
 8000912:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	f003 0307 	and.w	r3, r3, #7
 800091a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800091c:	4b0c      	ldr	r3, [pc, #48]	; (8000950 <__NVIC_SetPriorityGrouping+0x44>)
 800091e:	68db      	ldr	r3, [r3, #12]
 8000920:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000922:	68ba      	ldr	r2, [r7, #8]
 8000924:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000928:	4013      	ands	r3, r2
 800092a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800092c:	68fb      	ldr	r3, [r7, #12]
 800092e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000930:	68bb      	ldr	r3, [r7, #8]
 8000932:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000934:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000938:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800093c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800093e:	4a04      	ldr	r2, [pc, #16]	; (8000950 <__NVIC_SetPriorityGrouping+0x44>)
 8000940:	68bb      	ldr	r3, [r7, #8]
 8000942:	60d3      	str	r3, [r2, #12]
}
 8000944:	bf00      	nop
 8000946:	3714      	adds	r7, #20
 8000948:	46bd      	mov	sp, r7
 800094a:	bc80      	pop	{r7}
 800094c:	4770      	bx	lr
 800094e:	bf00      	nop
 8000950:	e000ed00 	.word	0xe000ed00

08000954 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000954:	b480      	push	{r7}
 8000956:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000958:	4b04      	ldr	r3, [pc, #16]	; (800096c <__NVIC_GetPriorityGrouping+0x18>)
 800095a:	68db      	ldr	r3, [r3, #12]
 800095c:	0a1b      	lsrs	r3, r3, #8
 800095e:	f003 0307 	and.w	r3, r3, #7
}
 8000962:	4618      	mov	r0, r3
 8000964:	46bd      	mov	sp, r7
 8000966:	bc80      	pop	{r7}
 8000968:	4770      	bx	lr
 800096a:	bf00      	nop
 800096c:	e000ed00 	.word	0xe000ed00

08000970 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000970:	b480      	push	{r7}
 8000972:	b083      	sub	sp, #12
 8000974:	af00      	add	r7, sp, #0
 8000976:	4603      	mov	r3, r0
 8000978:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800097a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800097e:	2b00      	cmp	r3, #0
 8000980:	db0b      	blt.n	800099a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000982:	79fb      	ldrb	r3, [r7, #7]
 8000984:	f003 021f 	and.w	r2, r3, #31
 8000988:	4906      	ldr	r1, [pc, #24]	; (80009a4 <__NVIC_EnableIRQ+0x34>)
 800098a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800098e:	095b      	lsrs	r3, r3, #5
 8000990:	2001      	movs	r0, #1
 8000992:	fa00 f202 	lsl.w	r2, r0, r2
 8000996:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800099a:	bf00      	nop
 800099c:	370c      	adds	r7, #12
 800099e:	46bd      	mov	sp, r7
 80009a0:	bc80      	pop	{r7}
 80009a2:	4770      	bx	lr
 80009a4:	e000e100 	.word	0xe000e100

080009a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80009a8:	b480      	push	{r7}
 80009aa:	b083      	sub	sp, #12
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	4603      	mov	r3, r0
 80009b0:	6039      	str	r1, [r7, #0]
 80009b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80009b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	db0a      	blt.n	80009d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009bc:	683b      	ldr	r3, [r7, #0]
 80009be:	b2da      	uxtb	r2, r3
 80009c0:	490c      	ldr	r1, [pc, #48]	; (80009f4 <__NVIC_SetPriority+0x4c>)
 80009c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009c6:	0112      	lsls	r2, r2, #4
 80009c8:	b2d2      	uxtb	r2, r2
 80009ca:	440b      	add	r3, r1
 80009cc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80009d0:	e00a      	b.n	80009e8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009d2:	683b      	ldr	r3, [r7, #0]
 80009d4:	b2da      	uxtb	r2, r3
 80009d6:	4908      	ldr	r1, [pc, #32]	; (80009f8 <__NVIC_SetPriority+0x50>)
 80009d8:	79fb      	ldrb	r3, [r7, #7]
 80009da:	f003 030f 	and.w	r3, r3, #15
 80009de:	3b04      	subs	r3, #4
 80009e0:	0112      	lsls	r2, r2, #4
 80009e2:	b2d2      	uxtb	r2, r2
 80009e4:	440b      	add	r3, r1
 80009e6:	761a      	strb	r2, [r3, #24]
}
 80009e8:	bf00      	nop
 80009ea:	370c      	adds	r7, #12
 80009ec:	46bd      	mov	sp, r7
 80009ee:	bc80      	pop	{r7}
 80009f0:	4770      	bx	lr
 80009f2:	bf00      	nop
 80009f4:	e000e100 	.word	0xe000e100
 80009f8:	e000ed00 	.word	0xe000ed00

080009fc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80009fc:	b480      	push	{r7}
 80009fe:	b089      	sub	sp, #36	; 0x24
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	60f8      	str	r0, [r7, #12]
 8000a04:	60b9      	str	r1, [r7, #8]
 8000a06:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a08:	68fb      	ldr	r3, [r7, #12]
 8000a0a:	f003 0307 	and.w	r3, r3, #7
 8000a0e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a10:	69fb      	ldr	r3, [r7, #28]
 8000a12:	f1c3 0307 	rsb	r3, r3, #7
 8000a16:	2b04      	cmp	r3, #4
 8000a18:	bf28      	it	cs
 8000a1a:	2304      	movcs	r3, #4
 8000a1c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a1e:	69fb      	ldr	r3, [r7, #28]
 8000a20:	3304      	adds	r3, #4
 8000a22:	2b06      	cmp	r3, #6
 8000a24:	d902      	bls.n	8000a2c <NVIC_EncodePriority+0x30>
 8000a26:	69fb      	ldr	r3, [r7, #28]
 8000a28:	3b03      	subs	r3, #3
 8000a2a:	e000      	b.n	8000a2e <NVIC_EncodePriority+0x32>
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a30:	f04f 32ff 	mov.w	r2, #4294967295
 8000a34:	69bb      	ldr	r3, [r7, #24]
 8000a36:	fa02 f303 	lsl.w	r3, r2, r3
 8000a3a:	43da      	mvns	r2, r3
 8000a3c:	68bb      	ldr	r3, [r7, #8]
 8000a3e:	401a      	ands	r2, r3
 8000a40:	697b      	ldr	r3, [r7, #20]
 8000a42:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a44:	f04f 31ff 	mov.w	r1, #4294967295
 8000a48:	697b      	ldr	r3, [r7, #20]
 8000a4a:	fa01 f303 	lsl.w	r3, r1, r3
 8000a4e:	43d9      	mvns	r1, r3
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a54:	4313      	orrs	r3, r2
         );
}
 8000a56:	4618      	mov	r0, r3
 8000a58:	3724      	adds	r7, #36	; 0x24
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	bc80      	pop	{r7}
 8000a5e:	4770      	bx	lr

08000a60 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b082      	sub	sp, #8
 8000a64:	af00      	add	r7, sp, #0
 8000a66:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	3b01      	subs	r3, #1
 8000a6c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000a70:	d301      	bcc.n	8000a76 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000a72:	2301      	movs	r3, #1
 8000a74:	e00f      	b.n	8000a96 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a76:	4a0a      	ldr	r2, [pc, #40]	; (8000aa0 <SysTick_Config+0x40>)
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	3b01      	subs	r3, #1
 8000a7c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000a7e:	210f      	movs	r1, #15
 8000a80:	f04f 30ff 	mov.w	r0, #4294967295
 8000a84:	f7ff ff90 	bl	80009a8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a88:	4b05      	ldr	r3, [pc, #20]	; (8000aa0 <SysTick_Config+0x40>)
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a8e:	4b04      	ldr	r3, [pc, #16]	; (8000aa0 <SysTick_Config+0x40>)
 8000a90:	2207      	movs	r2, #7
 8000a92:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000a94:	2300      	movs	r3, #0
}
 8000a96:	4618      	mov	r0, r3
 8000a98:	3708      	adds	r7, #8
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	bd80      	pop	{r7, pc}
 8000a9e:	bf00      	nop
 8000aa0:	e000e010 	.word	0xe000e010

08000aa4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	b082      	sub	sp, #8
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000aac:	6878      	ldr	r0, [r7, #4]
 8000aae:	f7ff ff2d 	bl	800090c <__NVIC_SetPriorityGrouping>
}
 8000ab2:	bf00      	nop
 8000ab4:	3708      	adds	r7, #8
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	bd80      	pop	{r7, pc}

08000aba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000aba:	b580      	push	{r7, lr}
 8000abc:	b086      	sub	sp, #24
 8000abe:	af00      	add	r7, sp, #0
 8000ac0:	4603      	mov	r3, r0
 8000ac2:	60b9      	str	r1, [r7, #8]
 8000ac4:	607a      	str	r2, [r7, #4]
 8000ac6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000ac8:	2300      	movs	r3, #0
 8000aca:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000acc:	f7ff ff42 	bl	8000954 <__NVIC_GetPriorityGrouping>
 8000ad0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ad2:	687a      	ldr	r2, [r7, #4]
 8000ad4:	68b9      	ldr	r1, [r7, #8]
 8000ad6:	6978      	ldr	r0, [r7, #20]
 8000ad8:	f7ff ff90 	bl	80009fc <NVIC_EncodePriority>
 8000adc:	4602      	mov	r2, r0
 8000ade:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ae2:	4611      	mov	r1, r2
 8000ae4:	4618      	mov	r0, r3
 8000ae6:	f7ff ff5f 	bl	80009a8 <__NVIC_SetPriority>
}
 8000aea:	bf00      	nop
 8000aec:	3718      	adds	r7, #24
 8000aee:	46bd      	mov	sp, r7
 8000af0:	bd80      	pop	{r7, pc}

08000af2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000af2:	b580      	push	{r7, lr}
 8000af4:	b082      	sub	sp, #8
 8000af6:	af00      	add	r7, sp, #0
 8000af8:	4603      	mov	r3, r0
 8000afa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000afc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b00:	4618      	mov	r0, r3
 8000b02:	f7ff ff35 	bl	8000970 <__NVIC_EnableIRQ>
}
 8000b06:	bf00      	nop
 8000b08:	3708      	adds	r7, #8
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	bd80      	pop	{r7, pc}

08000b0e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b0e:	b580      	push	{r7, lr}
 8000b10:	b082      	sub	sp, #8
 8000b12:	af00      	add	r7, sp, #0
 8000b14:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000b16:	6878      	ldr	r0, [r7, #4]
 8000b18:	f7ff ffa2 	bl	8000a60 <SysTick_Config>
 8000b1c:	4603      	mov	r3, r0
}
 8000b1e:	4618      	mov	r0, r3
 8000b20:	3708      	adds	r7, #8
 8000b22:	46bd      	mov	sp, r7
 8000b24:	bd80      	pop	{r7, pc}
	...

08000b28 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000b28:	b480      	push	{r7}
 8000b2a:	b085      	sub	sp, #20
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000b30:	2300      	movs	r3, #0
 8000b32:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d101      	bne.n	8000b3e <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8000b3a:	2301      	movs	r3, #1
 8000b3c:	e043      	b.n	8000bc6 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	681b      	ldr	r3, [r3, #0]
 8000b42:	461a      	mov	r2, r3
 8000b44:	4b22      	ldr	r3, [pc, #136]	; (8000bd0 <HAL_DMA_Init+0xa8>)
 8000b46:	4413      	add	r3, r2
 8000b48:	4a22      	ldr	r2, [pc, #136]	; (8000bd4 <HAL_DMA_Init+0xac>)
 8000b4a:	fba2 2303 	umull	r2, r3, r2, r3
 8000b4e:	091b      	lsrs	r3, r3, #4
 8000b50:	009a      	lsls	r2, r3, #2
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	4a1f      	ldr	r2, [pc, #124]	; (8000bd8 <HAL_DMA_Init+0xb0>)
 8000b5a:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	2202      	movs	r2, #2
 8000b60:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	681b      	ldr	r3, [r3, #0]
 8000b6a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000b6c:	68fb      	ldr	r3, [r7, #12]
 8000b6e:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8000b72:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8000b76:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8000b80:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	68db      	ldr	r3, [r3, #12]
 8000b86:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000b8c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	695b      	ldr	r3, [r3, #20]
 8000b92:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000b98:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	69db      	ldr	r3, [r3, #28]
 8000b9e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000ba0:	68fa      	ldr	r2, [r7, #12]
 8000ba2:	4313      	orrs	r3, r2
 8000ba4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	681b      	ldr	r3, [r3, #0]
 8000baa:	68fa      	ldr	r2, [r7, #12]
 8000bac:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	2201      	movs	r2, #1
 8000bb8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8000bc4:	2300      	movs	r3, #0
}
 8000bc6:	4618      	mov	r0, r3
 8000bc8:	3714      	adds	r7, #20
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	bc80      	pop	{r7}
 8000bce:	4770      	bx	lr
 8000bd0:	bffdfff8 	.word	0xbffdfff8
 8000bd4:	cccccccd 	.word	0xcccccccd
 8000bd8:	40020000 	.word	0x40020000

08000bdc <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b086      	sub	sp, #24
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	60f8      	str	r0, [r7, #12]
 8000be4:	60b9      	str	r1, [r7, #8]
 8000be6:	607a      	str	r2, [r7, #4]
 8000be8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000bea:	2300      	movs	r3, #0
 8000bec:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8000bee:	68fb      	ldr	r3, [r7, #12]
 8000bf0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000bf4:	2b01      	cmp	r3, #1
 8000bf6:	d101      	bne.n	8000bfc <HAL_DMA_Start_IT+0x20>
 8000bf8:	2302      	movs	r3, #2
 8000bfa:	e04a      	b.n	8000c92 <HAL_DMA_Start_IT+0xb6>
 8000bfc:	68fb      	ldr	r3, [r7, #12]
 8000bfe:	2201      	movs	r2, #1
 8000c00:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8000c04:	68fb      	ldr	r3, [r7, #12]
 8000c06:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000c0a:	2b01      	cmp	r3, #1
 8000c0c:	d13a      	bne.n	8000c84 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000c0e:	68fb      	ldr	r3, [r7, #12]
 8000c10:	2202      	movs	r2, #2
 8000c12:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000c16:	68fb      	ldr	r3, [r7, #12]
 8000c18:	2200      	movs	r2, #0
 8000c1a:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8000c1c:	68fb      	ldr	r3, [r7, #12]
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	681a      	ldr	r2, [r3, #0]
 8000c22:	68fb      	ldr	r3, [r7, #12]
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	f022 0201 	bic.w	r2, r2, #1
 8000c2a:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000c2c:	683b      	ldr	r3, [r7, #0]
 8000c2e:	687a      	ldr	r2, [r7, #4]
 8000c30:	68b9      	ldr	r1, [r7, #8]
 8000c32:	68f8      	ldr	r0, [r7, #12]
 8000c34:	f000 f980 	bl	8000f38 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8000c38:	68fb      	ldr	r3, [r7, #12]
 8000c3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d008      	beq.n	8000c52 <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000c40:	68fb      	ldr	r3, [r7, #12]
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	681a      	ldr	r2, [r3, #0]
 8000c46:	68fb      	ldr	r3, [r7, #12]
 8000c48:	681b      	ldr	r3, [r3, #0]
 8000c4a:	f042 020e 	orr.w	r2, r2, #14
 8000c4e:	601a      	str	r2, [r3, #0]
 8000c50:	e00f      	b.n	8000c72 <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000c52:	68fb      	ldr	r3, [r7, #12]
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	681a      	ldr	r2, [r3, #0]
 8000c58:	68fb      	ldr	r3, [r7, #12]
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	f022 0204 	bic.w	r2, r2, #4
 8000c60:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8000c62:	68fb      	ldr	r3, [r7, #12]
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	681a      	ldr	r2, [r3, #0]
 8000c68:	68fb      	ldr	r3, [r7, #12]
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	f042 020a 	orr.w	r2, r2, #10
 8000c70:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8000c72:	68fb      	ldr	r3, [r7, #12]
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	681a      	ldr	r2, [r3, #0]
 8000c78:	68fb      	ldr	r3, [r7, #12]
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	f042 0201 	orr.w	r2, r2, #1
 8000c80:	601a      	str	r2, [r3, #0]
 8000c82:	e005      	b.n	8000c90 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8000c84:	68fb      	ldr	r3, [r7, #12]
 8000c86:	2200      	movs	r2, #0
 8000c88:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8000c8c:	2302      	movs	r3, #2
 8000c8e:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8000c90:	7dfb      	ldrb	r3, [r7, #23]
}
 8000c92:	4618      	mov	r0, r3
 8000c94:	3718      	adds	r7, #24
 8000c96:	46bd      	mov	sp, r7
 8000c98:	bd80      	pop	{r7, pc}
	...

08000c9c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b084      	sub	sp, #16
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cb8:	2204      	movs	r2, #4
 8000cba:	409a      	lsls	r2, r3
 8000cbc:	68fb      	ldr	r3, [r7, #12]
 8000cbe:	4013      	ands	r3, r2
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d04f      	beq.n	8000d64 <HAL_DMA_IRQHandler+0xc8>
 8000cc4:	68bb      	ldr	r3, [r7, #8]
 8000cc6:	f003 0304 	and.w	r3, r3, #4
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d04a      	beq.n	8000d64 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	f003 0320 	and.w	r3, r3, #32
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	d107      	bne.n	8000cec <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	681a      	ldr	r2, [r3, #0]
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	f022 0204 	bic.w	r2, r2, #4
 8000cea:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	4a66      	ldr	r2, [pc, #408]	; (8000e8c <HAL_DMA_IRQHandler+0x1f0>)
 8000cf2:	4293      	cmp	r3, r2
 8000cf4:	d029      	beq.n	8000d4a <HAL_DMA_IRQHandler+0xae>
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	4a65      	ldr	r2, [pc, #404]	; (8000e90 <HAL_DMA_IRQHandler+0x1f4>)
 8000cfc:	4293      	cmp	r3, r2
 8000cfe:	d022      	beq.n	8000d46 <HAL_DMA_IRQHandler+0xaa>
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	4a63      	ldr	r2, [pc, #396]	; (8000e94 <HAL_DMA_IRQHandler+0x1f8>)
 8000d06:	4293      	cmp	r3, r2
 8000d08:	d01a      	beq.n	8000d40 <HAL_DMA_IRQHandler+0xa4>
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	4a62      	ldr	r2, [pc, #392]	; (8000e98 <HAL_DMA_IRQHandler+0x1fc>)
 8000d10:	4293      	cmp	r3, r2
 8000d12:	d012      	beq.n	8000d3a <HAL_DMA_IRQHandler+0x9e>
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	4a60      	ldr	r2, [pc, #384]	; (8000e9c <HAL_DMA_IRQHandler+0x200>)
 8000d1a:	4293      	cmp	r3, r2
 8000d1c:	d00a      	beq.n	8000d34 <HAL_DMA_IRQHandler+0x98>
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	4a5f      	ldr	r2, [pc, #380]	; (8000ea0 <HAL_DMA_IRQHandler+0x204>)
 8000d24:	4293      	cmp	r3, r2
 8000d26:	d102      	bne.n	8000d2e <HAL_DMA_IRQHandler+0x92>
 8000d28:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000d2c:	e00e      	b.n	8000d4c <HAL_DMA_IRQHandler+0xb0>
 8000d2e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8000d32:	e00b      	b.n	8000d4c <HAL_DMA_IRQHandler+0xb0>
 8000d34:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8000d38:	e008      	b.n	8000d4c <HAL_DMA_IRQHandler+0xb0>
 8000d3a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000d3e:	e005      	b.n	8000d4c <HAL_DMA_IRQHandler+0xb0>
 8000d40:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d44:	e002      	b.n	8000d4c <HAL_DMA_IRQHandler+0xb0>
 8000d46:	2340      	movs	r3, #64	; 0x40
 8000d48:	e000      	b.n	8000d4c <HAL_DMA_IRQHandler+0xb0>
 8000d4a:	2304      	movs	r3, #4
 8000d4c:	4a55      	ldr	r2, [pc, #340]	; (8000ea4 <HAL_DMA_IRQHandler+0x208>)
 8000d4e:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	f000 8094 	beq.w	8000e82 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d5e:	6878      	ldr	r0, [r7, #4]
 8000d60:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8000d62:	e08e      	b.n	8000e82 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d68:	2202      	movs	r2, #2
 8000d6a:	409a      	lsls	r2, r3
 8000d6c:	68fb      	ldr	r3, [r7, #12]
 8000d6e:	4013      	ands	r3, r2
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d056      	beq.n	8000e22 <HAL_DMA_IRQHandler+0x186>
 8000d74:	68bb      	ldr	r3, [r7, #8]
 8000d76:	f003 0302 	and.w	r3, r3, #2
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d051      	beq.n	8000e22 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	f003 0320 	and.w	r3, r3, #32
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	d10b      	bne.n	8000da4 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	681a      	ldr	r2, [r3, #0]
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	f022 020a 	bic.w	r2, r2, #10
 8000d9a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	2201      	movs	r2, #1
 8000da0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	4a38      	ldr	r2, [pc, #224]	; (8000e8c <HAL_DMA_IRQHandler+0x1f0>)
 8000daa:	4293      	cmp	r3, r2
 8000dac:	d029      	beq.n	8000e02 <HAL_DMA_IRQHandler+0x166>
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	4a37      	ldr	r2, [pc, #220]	; (8000e90 <HAL_DMA_IRQHandler+0x1f4>)
 8000db4:	4293      	cmp	r3, r2
 8000db6:	d022      	beq.n	8000dfe <HAL_DMA_IRQHandler+0x162>
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	4a35      	ldr	r2, [pc, #212]	; (8000e94 <HAL_DMA_IRQHandler+0x1f8>)
 8000dbe:	4293      	cmp	r3, r2
 8000dc0:	d01a      	beq.n	8000df8 <HAL_DMA_IRQHandler+0x15c>
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	4a34      	ldr	r2, [pc, #208]	; (8000e98 <HAL_DMA_IRQHandler+0x1fc>)
 8000dc8:	4293      	cmp	r3, r2
 8000dca:	d012      	beq.n	8000df2 <HAL_DMA_IRQHandler+0x156>
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	4a32      	ldr	r2, [pc, #200]	; (8000e9c <HAL_DMA_IRQHandler+0x200>)
 8000dd2:	4293      	cmp	r3, r2
 8000dd4:	d00a      	beq.n	8000dec <HAL_DMA_IRQHandler+0x150>
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	4a31      	ldr	r2, [pc, #196]	; (8000ea0 <HAL_DMA_IRQHandler+0x204>)
 8000ddc:	4293      	cmp	r3, r2
 8000dde:	d102      	bne.n	8000de6 <HAL_DMA_IRQHandler+0x14a>
 8000de0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8000de4:	e00e      	b.n	8000e04 <HAL_DMA_IRQHandler+0x168>
 8000de6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000dea:	e00b      	b.n	8000e04 <HAL_DMA_IRQHandler+0x168>
 8000dec:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000df0:	e008      	b.n	8000e04 <HAL_DMA_IRQHandler+0x168>
 8000df2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000df6:	e005      	b.n	8000e04 <HAL_DMA_IRQHandler+0x168>
 8000df8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000dfc:	e002      	b.n	8000e04 <HAL_DMA_IRQHandler+0x168>
 8000dfe:	2320      	movs	r3, #32
 8000e00:	e000      	b.n	8000e04 <HAL_DMA_IRQHandler+0x168>
 8000e02:	2302      	movs	r3, #2
 8000e04:	4a27      	ldr	r2, [pc, #156]	; (8000ea4 <HAL_DMA_IRQHandler+0x208>)
 8000e06:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d034      	beq.n	8000e82 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e1c:	6878      	ldr	r0, [r7, #4]
 8000e1e:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8000e20:	e02f      	b.n	8000e82 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e26:	2208      	movs	r2, #8
 8000e28:	409a      	lsls	r2, r3
 8000e2a:	68fb      	ldr	r3, [r7, #12]
 8000e2c:	4013      	ands	r3, r2
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d028      	beq.n	8000e84 <HAL_DMA_IRQHandler+0x1e8>
 8000e32:	68bb      	ldr	r3, [r7, #8]
 8000e34:	f003 0308 	and.w	r3, r3, #8
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d023      	beq.n	8000e84 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	681a      	ldr	r2, [r3, #0]
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	f022 020e 	bic.w	r2, r2, #14
 8000e4a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000e54:	2101      	movs	r1, #1
 8000e56:	fa01 f202 	lsl.w	r2, r1, r2
 8000e5a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	2201      	movs	r2, #1
 8000e60:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	2201      	movs	r2, #1
 8000e66:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d004      	beq.n	8000e84 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e7e:	6878      	ldr	r0, [r7, #4]
 8000e80:	4798      	blx	r3
    }
  }
  return;
 8000e82:	bf00      	nop
 8000e84:	bf00      	nop
}
 8000e86:	3710      	adds	r7, #16
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	bd80      	pop	{r7, pc}
 8000e8c:	40020008 	.word	0x40020008
 8000e90:	4002001c 	.word	0x4002001c
 8000e94:	40020030 	.word	0x40020030
 8000e98:	40020044 	.word	0x40020044
 8000e9c:	40020058 	.word	0x40020058
 8000ea0:	4002006c 	.word	0x4002006c
 8000ea4:	40020000 	.word	0x40020000

08000ea8 <HAL_DMA_RegisterCallback>:
  * @param pCallback: pointer to private callbacsk function which has pointer to 
  *                   a DMA_HandleTypeDef structure as parameter.
  * @retval HAL status
  */                          
HAL_StatusTypeDef HAL_DMA_RegisterCallback(DMA_HandleTypeDef *hdma, HAL_DMA_CallbackIDTypeDef CallbackID, void (* pCallback)( DMA_HandleTypeDef * _hdma))
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	b087      	sub	sp, #28
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	60f8      	str	r0, [r7, #12]
 8000eb0:	460b      	mov	r3, r1
 8000eb2:	607a      	str	r2, [r7, #4]
 8000eb4:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	75fb      	strb	r3, [r7, #23]
  
  /* Process locked */
  __HAL_LOCK(hdma);
 8000eba:	68fb      	ldr	r3, [r7, #12]
 8000ebc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000ec0:	2b01      	cmp	r3, #1
 8000ec2:	d101      	bne.n	8000ec8 <HAL_DMA_RegisterCallback+0x20>
 8000ec4:	2302      	movs	r3, #2
 8000ec6:	e032      	b.n	8000f2e <HAL_DMA_RegisterCallback+0x86>
 8000ec8:	68fb      	ldr	r3, [r7, #12]
 8000eca:	2201      	movs	r2, #1
 8000ecc:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8000ed0:	68fb      	ldr	r3, [r7, #12]
 8000ed2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000ed6:	2b01      	cmp	r3, #1
 8000ed8:	d122      	bne.n	8000f20 <HAL_DMA_RegisterCallback+0x78>
  {
    switch (CallbackID)
 8000eda:	7afb      	ldrb	r3, [r7, #11]
 8000edc:	2b03      	cmp	r3, #3
 8000ede:	d81b      	bhi.n	8000f18 <HAL_DMA_RegisterCallback+0x70>
 8000ee0:	a201      	add	r2, pc, #4	; (adr r2, 8000ee8 <HAL_DMA_RegisterCallback+0x40>)
 8000ee2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ee6:	bf00      	nop
 8000ee8:	08000ef9 	.word	0x08000ef9
 8000eec:	08000f01 	.word	0x08000f01
 8000ef0:	08000f09 	.word	0x08000f09
 8000ef4:	08000f11 	.word	0x08000f11
    {
    case  HAL_DMA_XFER_CPLT_CB_ID:
      hdma->XferCpltCallback = pCallback;
 8000ef8:	68fb      	ldr	r3, [r7, #12]
 8000efa:	687a      	ldr	r2, [r7, #4]
 8000efc:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 8000efe:	e011      	b.n	8000f24 <HAL_DMA_RegisterCallback+0x7c>
      
    case  HAL_DMA_XFER_HALFCPLT_CB_ID:
      hdma->XferHalfCpltCallback = pCallback;
 8000f00:	68fb      	ldr	r3, [r7, #12]
 8000f02:	687a      	ldr	r2, [r7, #4]
 8000f04:	62da      	str	r2, [r3, #44]	; 0x2c
      break;         
 8000f06:	e00d      	b.n	8000f24 <HAL_DMA_RegisterCallback+0x7c>

    case  HAL_DMA_XFER_ERROR_CB_ID:
      hdma->XferErrorCallback = pCallback;
 8000f08:	68fb      	ldr	r3, [r7, #12]
 8000f0a:	687a      	ldr	r2, [r7, #4]
 8000f0c:	631a      	str	r2, [r3, #48]	; 0x30
      break;         
 8000f0e:	e009      	b.n	8000f24 <HAL_DMA_RegisterCallback+0x7c>
      
    case  HAL_DMA_XFER_ABORT_CB_ID:
      hdma->XferAbortCallback = pCallback;
 8000f10:	68fb      	ldr	r3, [r7, #12]
 8000f12:	687a      	ldr	r2, [r7, #4]
 8000f14:	635a      	str	r2, [r3, #52]	; 0x34
      break; 
 8000f16:	e005      	b.n	8000f24 <HAL_DMA_RegisterCallback+0x7c>
      
    default:
      status = HAL_ERROR;
 8000f18:	2301      	movs	r3, #1
 8000f1a:	75fb      	strb	r3, [r7, #23]
      break;                                                            
 8000f1c:	bf00      	nop
 8000f1e:	e001      	b.n	8000f24 <HAL_DMA_RegisterCallback+0x7c>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000f20:	2301      	movs	r3, #1
 8000f22:	75fb      	strb	r3, [r7, #23]
  } 
  
  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8000f24:	68fb      	ldr	r3, [r7, #12]
 8000f26:	2200      	movs	r2, #0
 8000f28:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status;
 8000f2c:	7dfb      	ldrb	r3, [r7, #23]
}
 8000f2e:	4618      	mov	r0, r3
 8000f30:	371c      	adds	r7, #28
 8000f32:	46bd      	mov	sp, r7
 8000f34:	bc80      	pop	{r7}
 8000f36:	4770      	bx	lr

08000f38 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000f38:	b480      	push	{r7}
 8000f3a:	b085      	sub	sp, #20
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	60f8      	str	r0, [r7, #12]
 8000f40:	60b9      	str	r1, [r7, #8]
 8000f42:	607a      	str	r2, [r7, #4]
 8000f44:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000f46:	68fb      	ldr	r3, [r7, #12]
 8000f48:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000f4a:	68fb      	ldr	r3, [r7, #12]
 8000f4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000f4e:	2101      	movs	r1, #1
 8000f50:	fa01 f202 	lsl.w	r2, r1, r2
 8000f54:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8000f56:	68fb      	ldr	r3, [r7, #12]
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	683a      	ldr	r2, [r7, #0]
 8000f5c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8000f5e:	68fb      	ldr	r3, [r7, #12]
 8000f60:	685b      	ldr	r3, [r3, #4]
 8000f62:	2b10      	cmp	r3, #16
 8000f64:	d108      	bne.n	8000f78 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8000f66:	68fb      	ldr	r3, [r7, #12]
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	687a      	ldr	r2, [r7, #4]
 8000f6c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8000f6e:	68fb      	ldr	r3, [r7, #12]
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	68ba      	ldr	r2, [r7, #8]
 8000f74:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8000f76:	e007      	b.n	8000f88 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8000f78:	68fb      	ldr	r3, [r7, #12]
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	68ba      	ldr	r2, [r7, #8]
 8000f7e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8000f80:	68fb      	ldr	r3, [r7, #12]
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	687a      	ldr	r2, [r7, #4]
 8000f86:	60da      	str	r2, [r3, #12]
}
 8000f88:	bf00      	nop
 8000f8a:	3714      	adds	r7, #20
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	bc80      	pop	{r7}
 8000f90:	4770      	bx	lr
	...

08000f94 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f94:	b480      	push	{r7}
 8000f96:	b08b      	sub	sp, #44	; 0x2c
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]
 8000f9c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000fa6:	e121      	b.n	80011ec <HAL_GPIO_Init+0x258>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000fa8:	2201      	movs	r2, #1
 8000faa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fac:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000fb2:	683b      	ldr	r3, [r7, #0]
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	69fa      	ldr	r2, [r7, #28]
 8000fb8:	4013      	ands	r3, r2
 8000fba:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000fbc:	69ba      	ldr	r2, [r7, #24]
 8000fbe:	69fb      	ldr	r3, [r7, #28]
 8000fc0:	429a      	cmp	r2, r3
 8000fc2:	f040 8110 	bne.w	80011e6 <HAL_GPIO_Init+0x252>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000fc6:	683b      	ldr	r3, [r7, #0]
 8000fc8:	685b      	ldr	r3, [r3, #4]
 8000fca:	2b12      	cmp	r3, #18
 8000fcc:	d034      	beq.n	8001038 <HAL_GPIO_Init+0xa4>
 8000fce:	2b12      	cmp	r3, #18
 8000fd0:	d80d      	bhi.n	8000fee <HAL_GPIO_Init+0x5a>
 8000fd2:	2b02      	cmp	r3, #2
 8000fd4:	d02b      	beq.n	800102e <HAL_GPIO_Init+0x9a>
 8000fd6:	2b02      	cmp	r3, #2
 8000fd8:	d804      	bhi.n	8000fe4 <HAL_GPIO_Init+0x50>
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d031      	beq.n	8001042 <HAL_GPIO_Init+0xae>
 8000fde:	2b01      	cmp	r3, #1
 8000fe0:	d01c      	beq.n	800101c <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000fe2:	e048      	b.n	8001076 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000fe4:	2b03      	cmp	r3, #3
 8000fe6:	d043      	beq.n	8001070 <HAL_GPIO_Init+0xdc>
 8000fe8:	2b11      	cmp	r3, #17
 8000fea:	d01b      	beq.n	8001024 <HAL_GPIO_Init+0x90>
          break;
 8000fec:	e043      	b.n	8001076 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000fee:	4a86      	ldr	r2, [pc, #536]	; (8001208 <HAL_GPIO_Init+0x274>)
 8000ff0:	4293      	cmp	r3, r2
 8000ff2:	d026      	beq.n	8001042 <HAL_GPIO_Init+0xae>
 8000ff4:	4a84      	ldr	r2, [pc, #528]	; (8001208 <HAL_GPIO_Init+0x274>)
 8000ff6:	4293      	cmp	r3, r2
 8000ff8:	d806      	bhi.n	8001008 <HAL_GPIO_Init+0x74>
 8000ffa:	4a84      	ldr	r2, [pc, #528]	; (800120c <HAL_GPIO_Init+0x278>)
 8000ffc:	4293      	cmp	r3, r2
 8000ffe:	d020      	beq.n	8001042 <HAL_GPIO_Init+0xae>
 8001000:	4a83      	ldr	r2, [pc, #524]	; (8001210 <HAL_GPIO_Init+0x27c>)
 8001002:	4293      	cmp	r3, r2
 8001004:	d01d      	beq.n	8001042 <HAL_GPIO_Init+0xae>
          break;
 8001006:	e036      	b.n	8001076 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001008:	4a82      	ldr	r2, [pc, #520]	; (8001214 <HAL_GPIO_Init+0x280>)
 800100a:	4293      	cmp	r3, r2
 800100c:	d019      	beq.n	8001042 <HAL_GPIO_Init+0xae>
 800100e:	4a82      	ldr	r2, [pc, #520]	; (8001218 <HAL_GPIO_Init+0x284>)
 8001010:	4293      	cmp	r3, r2
 8001012:	d016      	beq.n	8001042 <HAL_GPIO_Init+0xae>
 8001014:	4a81      	ldr	r2, [pc, #516]	; (800121c <HAL_GPIO_Init+0x288>)
 8001016:	4293      	cmp	r3, r2
 8001018:	d013      	beq.n	8001042 <HAL_GPIO_Init+0xae>
          break;
 800101a:	e02c      	b.n	8001076 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800101c:	683b      	ldr	r3, [r7, #0]
 800101e:	68db      	ldr	r3, [r3, #12]
 8001020:	623b      	str	r3, [r7, #32]
          break;
 8001022:	e028      	b.n	8001076 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001024:	683b      	ldr	r3, [r7, #0]
 8001026:	68db      	ldr	r3, [r3, #12]
 8001028:	3304      	adds	r3, #4
 800102a:	623b      	str	r3, [r7, #32]
          break;
 800102c:	e023      	b.n	8001076 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800102e:	683b      	ldr	r3, [r7, #0]
 8001030:	68db      	ldr	r3, [r3, #12]
 8001032:	3308      	adds	r3, #8
 8001034:	623b      	str	r3, [r7, #32]
          break;
 8001036:	e01e      	b.n	8001076 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001038:	683b      	ldr	r3, [r7, #0]
 800103a:	68db      	ldr	r3, [r3, #12]
 800103c:	330c      	adds	r3, #12
 800103e:	623b      	str	r3, [r7, #32]
          break;
 8001040:	e019      	b.n	8001076 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001042:	683b      	ldr	r3, [r7, #0]
 8001044:	689b      	ldr	r3, [r3, #8]
 8001046:	2b00      	cmp	r3, #0
 8001048:	d102      	bne.n	8001050 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800104a:	2304      	movs	r3, #4
 800104c:	623b      	str	r3, [r7, #32]
          break;
 800104e:	e012      	b.n	8001076 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001050:	683b      	ldr	r3, [r7, #0]
 8001052:	689b      	ldr	r3, [r3, #8]
 8001054:	2b01      	cmp	r3, #1
 8001056:	d105      	bne.n	8001064 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001058:	2308      	movs	r3, #8
 800105a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	69fa      	ldr	r2, [r7, #28]
 8001060:	611a      	str	r2, [r3, #16]
          break;
 8001062:	e008      	b.n	8001076 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001064:	2308      	movs	r3, #8
 8001066:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	69fa      	ldr	r2, [r7, #28]
 800106c:	615a      	str	r2, [r3, #20]
          break;
 800106e:	e002      	b.n	8001076 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001070:	2300      	movs	r3, #0
 8001072:	623b      	str	r3, [r7, #32]
          break;
 8001074:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001076:	69bb      	ldr	r3, [r7, #24]
 8001078:	2bff      	cmp	r3, #255	; 0xff
 800107a:	d801      	bhi.n	8001080 <HAL_GPIO_Init+0xec>
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	e001      	b.n	8001084 <HAL_GPIO_Init+0xf0>
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	3304      	adds	r3, #4
 8001084:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001086:	69bb      	ldr	r3, [r7, #24]
 8001088:	2bff      	cmp	r3, #255	; 0xff
 800108a:	d802      	bhi.n	8001092 <HAL_GPIO_Init+0xfe>
 800108c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800108e:	009b      	lsls	r3, r3, #2
 8001090:	e002      	b.n	8001098 <HAL_GPIO_Init+0x104>
 8001092:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001094:	3b08      	subs	r3, #8
 8001096:	009b      	lsls	r3, r3, #2
 8001098:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800109a:	697b      	ldr	r3, [r7, #20]
 800109c:	681a      	ldr	r2, [r3, #0]
 800109e:	210f      	movs	r1, #15
 80010a0:	693b      	ldr	r3, [r7, #16]
 80010a2:	fa01 f303 	lsl.w	r3, r1, r3
 80010a6:	43db      	mvns	r3, r3
 80010a8:	401a      	ands	r2, r3
 80010aa:	6a39      	ldr	r1, [r7, #32]
 80010ac:	693b      	ldr	r3, [r7, #16]
 80010ae:	fa01 f303 	lsl.w	r3, r1, r3
 80010b2:	431a      	orrs	r2, r3
 80010b4:	697b      	ldr	r3, [r7, #20]
 80010b6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80010b8:	683b      	ldr	r3, [r7, #0]
 80010ba:	685b      	ldr	r3, [r3, #4]
 80010bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	f000 8090 	beq.w	80011e6 <HAL_GPIO_Init+0x252>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80010c6:	4b56      	ldr	r3, [pc, #344]	; (8001220 <HAL_GPIO_Init+0x28c>)
 80010c8:	699b      	ldr	r3, [r3, #24]
 80010ca:	4a55      	ldr	r2, [pc, #340]	; (8001220 <HAL_GPIO_Init+0x28c>)
 80010cc:	f043 0301 	orr.w	r3, r3, #1
 80010d0:	6193      	str	r3, [r2, #24]
 80010d2:	4b53      	ldr	r3, [pc, #332]	; (8001220 <HAL_GPIO_Init+0x28c>)
 80010d4:	699b      	ldr	r3, [r3, #24]
 80010d6:	f003 0301 	and.w	r3, r3, #1
 80010da:	60bb      	str	r3, [r7, #8]
 80010dc:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80010de:	4a51      	ldr	r2, [pc, #324]	; (8001224 <HAL_GPIO_Init+0x290>)
 80010e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010e2:	089b      	lsrs	r3, r3, #2
 80010e4:	3302      	adds	r3, #2
 80010e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010ea:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80010ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010ee:	f003 0303 	and.w	r3, r3, #3
 80010f2:	009b      	lsls	r3, r3, #2
 80010f4:	220f      	movs	r2, #15
 80010f6:	fa02 f303 	lsl.w	r3, r2, r3
 80010fa:	43db      	mvns	r3, r3
 80010fc:	68fa      	ldr	r2, [r7, #12]
 80010fe:	4013      	ands	r3, r2
 8001100:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	4a48      	ldr	r2, [pc, #288]	; (8001228 <HAL_GPIO_Init+0x294>)
 8001106:	4293      	cmp	r3, r2
 8001108:	d00d      	beq.n	8001126 <HAL_GPIO_Init+0x192>
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	4a47      	ldr	r2, [pc, #284]	; (800122c <HAL_GPIO_Init+0x298>)
 800110e:	4293      	cmp	r3, r2
 8001110:	d007      	beq.n	8001122 <HAL_GPIO_Init+0x18e>
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	4a46      	ldr	r2, [pc, #280]	; (8001230 <HAL_GPIO_Init+0x29c>)
 8001116:	4293      	cmp	r3, r2
 8001118:	d101      	bne.n	800111e <HAL_GPIO_Init+0x18a>
 800111a:	2302      	movs	r3, #2
 800111c:	e004      	b.n	8001128 <HAL_GPIO_Init+0x194>
 800111e:	2303      	movs	r3, #3
 8001120:	e002      	b.n	8001128 <HAL_GPIO_Init+0x194>
 8001122:	2301      	movs	r3, #1
 8001124:	e000      	b.n	8001128 <HAL_GPIO_Init+0x194>
 8001126:	2300      	movs	r3, #0
 8001128:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800112a:	f002 0203 	and.w	r2, r2, #3
 800112e:	0092      	lsls	r2, r2, #2
 8001130:	4093      	lsls	r3, r2
 8001132:	68fa      	ldr	r2, [r7, #12]
 8001134:	4313      	orrs	r3, r2
 8001136:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001138:	493a      	ldr	r1, [pc, #232]	; (8001224 <HAL_GPIO_Init+0x290>)
 800113a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800113c:	089b      	lsrs	r3, r3, #2
 800113e:	3302      	adds	r3, #2
 8001140:	68fa      	ldr	r2, [r7, #12]
 8001142:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001146:	683b      	ldr	r3, [r7, #0]
 8001148:	685b      	ldr	r3, [r3, #4]
 800114a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800114e:	2b00      	cmp	r3, #0
 8001150:	d006      	beq.n	8001160 <HAL_GPIO_Init+0x1cc>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001152:	4b38      	ldr	r3, [pc, #224]	; (8001234 <HAL_GPIO_Init+0x2a0>)
 8001154:	681a      	ldr	r2, [r3, #0]
 8001156:	4937      	ldr	r1, [pc, #220]	; (8001234 <HAL_GPIO_Init+0x2a0>)
 8001158:	69bb      	ldr	r3, [r7, #24]
 800115a:	4313      	orrs	r3, r2
 800115c:	600b      	str	r3, [r1, #0]
 800115e:	e006      	b.n	800116e <HAL_GPIO_Init+0x1da>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001160:	4b34      	ldr	r3, [pc, #208]	; (8001234 <HAL_GPIO_Init+0x2a0>)
 8001162:	681a      	ldr	r2, [r3, #0]
 8001164:	69bb      	ldr	r3, [r7, #24]
 8001166:	43db      	mvns	r3, r3
 8001168:	4932      	ldr	r1, [pc, #200]	; (8001234 <HAL_GPIO_Init+0x2a0>)
 800116a:	4013      	ands	r3, r2
 800116c:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800116e:	683b      	ldr	r3, [r7, #0]
 8001170:	685b      	ldr	r3, [r3, #4]
 8001172:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001176:	2b00      	cmp	r3, #0
 8001178:	d006      	beq.n	8001188 <HAL_GPIO_Init+0x1f4>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800117a:	4b2e      	ldr	r3, [pc, #184]	; (8001234 <HAL_GPIO_Init+0x2a0>)
 800117c:	685a      	ldr	r2, [r3, #4]
 800117e:	492d      	ldr	r1, [pc, #180]	; (8001234 <HAL_GPIO_Init+0x2a0>)
 8001180:	69bb      	ldr	r3, [r7, #24]
 8001182:	4313      	orrs	r3, r2
 8001184:	604b      	str	r3, [r1, #4]
 8001186:	e006      	b.n	8001196 <HAL_GPIO_Init+0x202>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001188:	4b2a      	ldr	r3, [pc, #168]	; (8001234 <HAL_GPIO_Init+0x2a0>)
 800118a:	685a      	ldr	r2, [r3, #4]
 800118c:	69bb      	ldr	r3, [r7, #24]
 800118e:	43db      	mvns	r3, r3
 8001190:	4928      	ldr	r1, [pc, #160]	; (8001234 <HAL_GPIO_Init+0x2a0>)
 8001192:	4013      	ands	r3, r2
 8001194:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001196:	683b      	ldr	r3, [r7, #0]
 8001198:	685b      	ldr	r3, [r3, #4]
 800119a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d006      	beq.n	80011b0 <HAL_GPIO_Init+0x21c>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80011a2:	4b24      	ldr	r3, [pc, #144]	; (8001234 <HAL_GPIO_Init+0x2a0>)
 80011a4:	689a      	ldr	r2, [r3, #8]
 80011a6:	4923      	ldr	r1, [pc, #140]	; (8001234 <HAL_GPIO_Init+0x2a0>)
 80011a8:	69bb      	ldr	r3, [r7, #24]
 80011aa:	4313      	orrs	r3, r2
 80011ac:	608b      	str	r3, [r1, #8]
 80011ae:	e006      	b.n	80011be <HAL_GPIO_Init+0x22a>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80011b0:	4b20      	ldr	r3, [pc, #128]	; (8001234 <HAL_GPIO_Init+0x2a0>)
 80011b2:	689a      	ldr	r2, [r3, #8]
 80011b4:	69bb      	ldr	r3, [r7, #24]
 80011b6:	43db      	mvns	r3, r3
 80011b8:	491e      	ldr	r1, [pc, #120]	; (8001234 <HAL_GPIO_Init+0x2a0>)
 80011ba:	4013      	ands	r3, r2
 80011bc:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80011be:	683b      	ldr	r3, [r7, #0]
 80011c0:	685b      	ldr	r3, [r3, #4]
 80011c2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d006      	beq.n	80011d8 <HAL_GPIO_Init+0x244>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80011ca:	4b1a      	ldr	r3, [pc, #104]	; (8001234 <HAL_GPIO_Init+0x2a0>)
 80011cc:	68da      	ldr	r2, [r3, #12]
 80011ce:	4919      	ldr	r1, [pc, #100]	; (8001234 <HAL_GPIO_Init+0x2a0>)
 80011d0:	69bb      	ldr	r3, [r7, #24]
 80011d2:	4313      	orrs	r3, r2
 80011d4:	60cb      	str	r3, [r1, #12]
 80011d6:	e006      	b.n	80011e6 <HAL_GPIO_Init+0x252>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80011d8:	4b16      	ldr	r3, [pc, #88]	; (8001234 <HAL_GPIO_Init+0x2a0>)
 80011da:	68da      	ldr	r2, [r3, #12]
 80011dc:	69bb      	ldr	r3, [r7, #24]
 80011de:	43db      	mvns	r3, r3
 80011e0:	4914      	ldr	r1, [pc, #80]	; (8001234 <HAL_GPIO_Init+0x2a0>)
 80011e2:	4013      	ands	r3, r2
 80011e4:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80011e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011e8:	3301      	adds	r3, #1
 80011ea:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80011ec:	683b      	ldr	r3, [r7, #0]
 80011ee:	681a      	ldr	r2, [r3, #0]
 80011f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011f2:	fa22 f303 	lsr.w	r3, r2, r3
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	f47f aed6 	bne.w	8000fa8 <HAL_GPIO_Init+0x14>
  }
}
 80011fc:	bf00      	nop
 80011fe:	372c      	adds	r7, #44	; 0x2c
 8001200:	46bd      	mov	sp, r7
 8001202:	bc80      	pop	{r7}
 8001204:	4770      	bx	lr
 8001206:	bf00      	nop
 8001208:	10210000 	.word	0x10210000
 800120c:	10110000 	.word	0x10110000
 8001210:	10120000 	.word	0x10120000
 8001214:	10310000 	.word	0x10310000
 8001218:	10320000 	.word	0x10320000
 800121c:	10220000 	.word	0x10220000
 8001220:	40021000 	.word	0x40021000
 8001224:	40010000 	.word	0x40010000
 8001228:	40010800 	.word	0x40010800
 800122c:	40010c00 	.word	0x40010c00
 8001230:	40011000 	.word	0x40011000
 8001234:	40010400 	.word	0x40010400

08001238 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001238:	b480      	push	{r7}
 800123a:	b083      	sub	sp, #12
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
 8001240:	460b      	mov	r3, r1
 8001242:	807b      	strh	r3, [r7, #2]
 8001244:	4613      	mov	r3, r2
 8001246:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001248:	787b      	ldrb	r3, [r7, #1]
 800124a:	2b00      	cmp	r3, #0
 800124c:	d003      	beq.n	8001256 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800124e:	887a      	ldrh	r2, [r7, #2]
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001254:	e003      	b.n	800125e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001256:	887b      	ldrh	r3, [r7, #2]
 8001258:	041a      	lsls	r2, r3, #16
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	611a      	str	r2, [r3, #16]
}
 800125e:	bf00      	nop
 8001260:	370c      	adds	r7, #12
 8001262:	46bd      	mov	sp, r7
 8001264:	bc80      	pop	{r7}
 8001266:	4770      	bx	lr

08001268 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001268:	b5f0      	push	{r4, r5, r6, r7, lr}
 800126a:	b08b      	sub	sp, #44	; 0x2c
 800126c:	af06      	add	r7, sp, #24
 800126e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	2b00      	cmp	r3, #0
 8001274:	d101      	bne.n	800127a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001276:	2301      	movs	r3, #1
 8001278:	e0d3      	b.n	8001422 <HAL_PCD_Init+0x1ba>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	f893 3229 	ldrb.w	r3, [r3, #553]	; 0x229
 8001280:	b2db      	uxtb	r3, r3
 8001282:	2b00      	cmp	r3, #0
 8001284:	d106      	bne.n	8001294 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	2200      	movs	r2, #0
 800128a:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800128e:	6878      	ldr	r0, [r7, #4]
 8001290:	f004 f9d4 	bl	800563c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	2203      	movs	r2, #3
 8001298:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	4618      	mov	r0, r3
 80012a2:	f001 fb8a 	bl	80029ba <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	603b      	str	r3, [r7, #0]
 80012ac:	687e      	ldr	r6, [r7, #4]
 80012ae:	466d      	mov	r5, sp
 80012b0:	f106 0410 	add.w	r4, r6, #16
 80012b4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80012b6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80012b8:	6823      	ldr	r3, [r4, #0]
 80012ba:	602b      	str	r3, [r5, #0]
 80012bc:	1d33      	adds	r3, r6, #4
 80012be:	cb0e      	ldmia	r3, {r1, r2, r3}
 80012c0:	6838      	ldr	r0, [r7, #0]
 80012c2:	f001 fb53 	bl	800296c <USB_CoreInit>
 80012c6:	4603      	mov	r3, r0
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d005      	beq.n	80012d8 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	2202      	movs	r2, #2
 80012d0:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
    return HAL_ERROR;
 80012d4:	2301      	movs	r3, #1
 80012d6:	e0a4      	b.n	8001422 <HAL_PCD_Init+0x1ba>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	2100      	movs	r1, #0
 80012de:	4618      	mov	r0, r3
 80012e0:	f001 fb87 	bl	80029f2 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80012e4:	2300      	movs	r3, #0
 80012e6:	73fb      	strb	r3, [r7, #15]
 80012e8:	e035      	b.n	8001356 <HAL_PCD_Init+0xee>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80012ea:	7bfb      	ldrb	r3, [r7, #15]
 80012ec:	687a      	ldr	r2, [r7, #4]
 80012ee:	015b      	lsls	r3, r3, #5
 80012f0:	4413      	add	r3, r2
 80012f2:	3329      	adds	r3, #41	; 0x29
 80012f4:	2201      	movs	r2, #1
 80012f6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80012f8:	7bfb      	ldrb	r3, [r7, #15]
 80012fa:	687a      	ldr	r2, [r7, #4]
 80012fc:	015b      	lsls	r3, r3, #5
 80012fe:	4413      	add	r3, r2
 8001300:	3328      	adds	r3, #40	; 0x28
 8001302:	7bfa      	ldrb	r2, [r7, #15]
 8001304:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001306:	7bfb      	ldrb	r3, [r7, #15]
 8001308:	7bfa      	ldrb	r2, [r7, #15]
 800130a:	b291      	uxth	r1, r2
 800130c:	687a      	ldr	r2, [r7, #4]
 800130e:	015b      	lsls	r3, r3, #5
 8001310:	4413      	add	r3, r2
 8001312:	3336      	adds	r3, #54	; 0x36
 8001314:	460a      	mov	r2, r1
 8001316:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001318:	7bfb      	ldrb	r3, [r7, #15]
 800131a:	687a      	ldr	r2, [r7, #4]
 800131c:	015b      	lsls	r3, r3, #5
 800131e:	4413      	add	r3, r2
 8001320:	332b      	adds	r3, #43	; 0x2b
 8001322:	2200      	movs	r2, #0
 8001324:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001326:	7bfb      	ldrb	r3, [r7, #15]
 8001328:	687a      	ldr	r2, [r7, #4]
 800132a:	015b      	lsls	r3, r3, #5
 800132c:	4413      	add	r3, r2
 800132e:	3338      	adds	r3, #56	; 0x38
 8001330:	2200      	movs	r2, #0
 8001332:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001334:	7bfb      	ldrb	r3, [r7, #15]
 8001336:	687a      	ldr	r2, [r7, #4]
 8001338:	015b      	lsls	r3, r3, #5
 800133a:	4413      	add	r3, r2
 800133c:	333c      	adds	r3, #60	; 0x3c
 800133e:	2200      	movs	r2, #0
 8001340:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001342:	7bfb      	ldrb	r3, [r7, #15]
 8001344:	687a      	ldr	r2, [r7, #4]
 8001346:	3302      	adds	r3, #2
 8001348:	015b      	lsls	r3, r3, #5
 800134a:	4413      	add	r3, r2
 800134c:	2200      	movs	r2, #0
 800134e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001350:	7bfb      	ldrb	r3, [r7, #15]
 8001352:	3301      	adds	r3, #1
 8001354:	73fb      	strb	r3, [r7, #15]
 8001356:	7bfa      	ldrb	r2, [r7, #15]
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	685b      	ldr	r3, [r3, #4]
 800135c:	429a      	cmp	r2, r3
 800135e:	d3c4      	bcc.n	80012ea <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001360:	2300      	movs	r3, #0
 8001362:	73fb      	strb	r3, [r7, #15]
 8001364:	e031      	b.n	80013ca <HAL_PCD_Init+0x162>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001366:	7bfb      	ldrb	r3, [r7, #15]
 8001368:	687a      	ldr	r2, [r7, #4]
 800136a:	015b      	lsls	r3, r3, #5
 800136c:	4413      	add	r3, r2
 800136e:	f203 1329 	addw	r3, r3, #297	; 0x129
 8001372:	2200      	movs	r2, #0
 8001374:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001376:	7bfb      	ldrb	r3, [r7, #15]
 8001378:	687a      	ldr	r2, [r7, #4]
 800137a:	015b      	lsls	r3, r3, #5
 800137c:	4413      	add	r3, r2
 800137e:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001382:	7bfa      	ldrb	r2, [r7, #15]
 8001384:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001386:	7bfb      	ldrb	r3, [r7, #15]
 8001388:	687a      	ldr	r2, [r7, #4]
 800138a:	015b      	lsls	r3, r3, #5
 800138c:	4413      	add	r3, r2
 800138e:	f203 132b 	addw	r3, r3, #299	; 0x12b
 8001392:	2200      	movs	r2, #0
 8001394:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001396:	7bfb      	ldrb	r3, [r7, #15]
 8001398:	687a      	ldr	r2, [r7, #4]
 800139a:	015b      	lsls	r3, r3, #5
 800139c:	4413      	add	r3, r2
 800139e:	f503 739c 	add.w	r3, r3, #312	; 0x138
 80013a2:	2200      	movs	r2, #0
 80013a4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80013a6:	7bfb      	ldrb	r3, [r7, #15]
 80013a8:	687a      	ldr	r2, [r7, #4]
 80013aa:	015b      	lsls	r3, r3, #5
 80013ac:	4413      	add	r3, r2
 80013ae:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 80013b2:	2200      	movs	r2, #0
 80013b4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80013b6:	7bfb      	ldrb	r3, [r7, #15]
 80013b8:	687a      	ldr	r2, [r7, #4]
 80013ba:	330a      	adds	r3, #10
 80013bc:	015b      	lsls	r3, r3, #5
 80013be:	4413      	add	r3, r2
 80013c0:	2200      	movs	r2, #0
 80013c2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80013c4:	7bfb      	ldrb	r3, [r7, #15]
 80013c6:	3301      	adds	r3, #1
 80013c8:	73fb      	strb	r3, [r7, #15]
 80013ca:	7bfa      	ldrb	r2, [r7, #15]
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	685b      	ldr	r3, [r3, #4]
 80013d0:	429a      	cmp	r2, r3
 80013d2:	d3c8      	bcc.n	8001366 <HAL_PCD_Init+0xfe>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	603b      	str	r3, [r7, #0]
 80013da:	687e      	ldr	r6, [r7, #4]
 80013dc:	466d      	mov	r5, sp
 80013de:	f106 0410 	add.w	r4, r6, #16
 80013e2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80013e4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80013e6:	6823      	ldr	r3, [r4, #0]
 80013e8:	602b      	str	r3, [r5, #0]
 80013ea:	1d33      	adds	r3, r6, #4
 80013ec:	cb0e      	ldmia	r3, {r1, r2, r3}
 80013ee:	6838      	ldr	r0, [r7, #0]
 80013f0:	f001 fb0b 	bl	8002a0a <USB_DevInit>
 80013f4:	4603      	mov	r3, r0
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d005      	beq.n	8001406 <HAL_PCD_Init+0x19e>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	2202      	movs	r2, #2
 80013fe:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
    return HAL_ERROR;
 8001402:	2301      	movs	r3, #1
 8001404:	e00d      	b.n	8001422 <HAL_PCD_Init+0x1ba>
  }

  hpcd->USB_Address = 0U;
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	2200      	movs	r2, #0
 800140a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	2201      	movs	r2, #1
 8001412:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
  (void)USB_DevDisconnect(hpcd->Instance);
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	4618      	mov	r0, r3
 800141c:	f002 fb49 	bl	8003ab2 <USB_DevDisconnect>

  return HAL_OK;
 8001420:	2300      	movs	r3, #0
}
 8001422:	4618      	mov	r0, r3
 8001424:	3714      	adds	r7, #20
 8001426:	46bd      	mov	sp, r7
 8001428:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800142a <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800142a:	b580      	push	{r7, lr}
 800142c:	b082      	sub	sp, #8
 800142e:	af00      	add	r7, sp, #0
 8001430:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8001438:	2b01      	cmp	r3, #1
 800143a:	d101      	bne.n	8001440 <HAL_PCD_Start+0x16>
 800143c:	2302      	movs	r3, #2
 800143e:	e016      	b.n	800146e <HAL_PCD_Start+0x44>
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	2201      	movs	r2, #1
 8001444:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8001448:	2101      	movs	r1, #1
 800144a:	6878      	ldr	r0, [r7, #4]
 800144c:	f004 fb5d 	bl	8005b0a <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */
  (void)USB_DevConnect(hpcd->Instance);
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	4618      	mov	r0, r3
 8001456:	f002 fb22 	bl	8003a9e <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	4618      	mov	r0, r3
 8001460:	f001 fa94 	bl	800298c <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	2200      	movs	r2, #0
 8001468:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 800146c:	2300      	movs	r3, #0
}
 800146e:	4618      	mov	r0, r3
 8001470:	3708      	adds	r7, #8
 8001472:	46bd      	mov	sp, r7
 8001474:	bd80      	pop	{r7, pc}

08001476 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001476:	b580      	push	{r7, lr}
 8001478:	b082      	sub	sp, #8
 800147a:	af00      	add	r7, sp, #0
 800147c:	6078      	str	r0, [r7, #4]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	4618      	mov	r0, r3
 8001484:	f002 fb1f 	bl	8003ac6 <USB_ReadInterrupts>
 8001488:	4603      	mov	r3, r0
 800148a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800148e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001492:	d102      	bne.n	800149a <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8001494:	6878      	ldr	r0, [r7, #4]
 8001496:	f000 faf3 	bl	8001a80 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	4618      	mov	r0, r3
 80014a0:	f002 fb11 	bl	8003ac6 <USB_ReadInterrupts>
 80014a4:	4603      	mov	r3, r0
 80014a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80014aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80014ae:	d112      	bne.n	80014d6 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80014b8:	b29a      	uxth	r2, r3
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80014c2:	b292      	uxth	r2, r2
 80014c4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 80014c8:	6878      	ldr	r0, [r7, #4]
 80014ca:	f004 f92c 	bl	8005726 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80014ce:	2100      	movs	r1, #0
 80014d0:	6878      	ldr	r0, [r7, #4]
 80014d2:	f000 f8de 	bl	8001692 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	4618      	mov	r0, r3
 80014dc:	f002 faf3 	bl	8003ac6 <USB_ReadInterrupts>
 80014e0:	4603      	mov	r3, r0
 80014e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80014e6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80014ea:	d10b      	bne.n	8001504 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80014f4:	b29a      	uxth	r2, r3
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80014fe:	b292      	uxth	r2, r2
 8001500:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	4618      	mov	r0, r3
 800150a:	f002 fadc 	bl	8003ac6 <USB_ReadInterrupts>
 800150e:	4603      	mov	r3, r0
 8001510:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001514:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001518:	d10b      	bne.n	8001532 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001522:	b29a      	uxth	r2, r3
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800152c:	b292      	uxth	r2, r2
 800152e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	4618      	mov	r0, r3
 8001538:	f002 fac5 	bl	8003ac6 <USB_ReadInterrupts>
 800153c:	4603      	mov	r3, r0
 800153e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001542:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001546:	d126      	bne.n	8001596 <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001550:	b29a      	uxth	r2, r3
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	f022 0204 	bic.w	r2, r2, #4
 800155a:	b292      	uxth	r2, r2
 800155c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001568:	b29a      	uxth	r2, r3
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	f022 0208 	bic.w	r2, r2, #8
 8001572:	b292      	uxth	r2, r2
 8001574:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8001578:	6878      	ldr	r0, [r7, #4]
 800157a:	f004 f90d 	bl	8005798 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001586:	b29a      	uxth	r2, r3
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001590:	b292      	uxth	r2, r2
 8001592:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	4618      	mov	r0, r3
 800159c:	f002 fa93 	bl	8003ac6 <USB_ReadInterrupts>
 80015a0:	4603      	mov	r3, r0
 80015a2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80015a6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80015aa:	d13d      	bne.n	8001628 <HAL_PCD_IRQHandler+0x1b2>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= USB_CNTR_FSUSP;
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80015b4:	b29a      	uxth	r2, r3
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	f042 0208 	orr.w	r2, r2, #8
 80015be:	b292      	uxth	r2, r2
 80015c0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80015cc:	b29a      	uxth	r2, r3
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80015d6:	b292      	uxth	r2, r2
 80015d8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= USB_CNTR_LP_MODE;
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80015e4:	b29a      	uxth	r2, r3
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	f042 0204 	orr.w	r2, r2, #4
 80015ee:	b292      	uxth	r2, r2
 80015f0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* WA: Clear Wakeup flag if raised with suspend signal */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	4618      	mov	r0, r3
 80015fa:	f002 fa64 	bl	8003ac6 <USB_ReadInterrupts>
 80015fe:	4603      	mov	r3, r0
 8001600:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001604:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001608:	d10b      	bne.n	8001622 <HAL_PCD_IRQHandler+0x1ac>
    {
       __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001612:	b29a      	uxth	r2, r3
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800161c:	b292      	uxth	r2, r2
 800161e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8001622:	6878      	ldr	r0, [r7, #4]
 8001624:	f004 f89e 	bl	8005764 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	4618      	mov	r0, r3
 800162e:	f002 fa4a 	bl	8003ac6 <USB_ReadInterrupts>
 8001632:	4603      	mov	r3, r0
 8001634:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001638:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800163c:	d10e      	bne.n	800165c <HAL_PCD_IRQHandler+0x1e6>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001646:	b29a      	uxth	r2, r3
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001650:	b292      	uxth	r2, r2
 8001652:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8001656:	6878      	ldr	r0, [r7, #4]
 8001658:	f004 f857 	bl	800570a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	4618      	mov	r0, r3
 8001662:	f002 fa30 	bl	8003ac6 <USB_ReadInterrupts>
 8001666:	4603      	mov	r3, r0
 8001668:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800166c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001670:	d10b      	bne.n	800168a <HAL_PCD_IRQHandler+0x214>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800167a:	b29a      	uxth	r2, r3
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001684:	b292      	uxth	r2, r2
 8001686:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 800168a:	bf00      	nop
 800168c:	3708      	adds	r7, #8
 800168e:	46bd      	mov	sp, r7
 8001690:	bd80      	pop	{r7, pc}

08001692 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001692:	b580      	push	{r7, lr}
 8001694:	b082      	sub	sp, #8
 8001696:	af00      	add	r7, sp, #0
 8001698:	6078      	str	r0, [r7, #4]
 800169a:	460b      	mov	r3, r1
 800169c:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 80016a4:	2b01      	cmp	r3, #1
 80016a6:	d101      	bne.n	80016ac <HAL_PCD_SetAddress+0x1a>
 80016a8:	2302      	movs	r3, #2
 80016aa:	e013      	b.n	80016d4 <HAL_PCD_SetAddress+0x42>
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	2201      	movs	r2, #1
 80016b0:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  hpcd->USB_Address = address;
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	78fa      	ldrb	r2, [r7, #3]
 80016b8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	78fa      	ldrb	r2, [r7, #3]
 80016c2:	4611      	mov	r1, r2
 80016c4:	4618      	mov	r0, r3
 80016c6:	f002 f9d7 	bl	8003a78 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	2200      	movs	r2, #0
 80016ce:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 80016d2:	2300      	movs	r3, #0
}
 80016d4:	4618      	mov	r0, r3
 80016d6:	3708      	adds	r7, #8
 80016d8:	46bd      	mov	sp, r7
 80016da:	bd80      	pop	{r7, pc}

080016dc <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	b084      	sub	sp, #16
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	6078      	str	r0, [r7, #4]
 80016e4:	4608      	mov	r0, r1
 80016e6:	4611      	mov	r1, r2
 80016e8:	461a      	mov	r2, r3
 80016ea:	4603      	mov	r3, r0
 80016ec:	70fb      	strb	r3, [r7, #3]
 80016ee:	460b      	mov	r3, r1
 80016f0:	803b      	strh	r3, [r7, #0]
 80016f2:	4613      	mov	r3, r2
 80016f4:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80016f6:	2300      	movs	r3, #0
 80016f8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80016fa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80016fe:	2b00      	cmp	r3, #0
 8001700:	da0b      	bge.n	800171a <HAL_PCD_EP_Open+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001702:	78fb      	ldrb	r3, [r7, #3]
 8001704:	f003 0307 	and.w	r3, r3, #7
 8001708:	015b      	lsls	r3, r3, #5
 800170a:	3328      	adds	r3, #40	; 0x28
 800170c:	687a      	ldr	r2, [r7, #4]
 800170e:	4413      	add	r3, r2
 8001710:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	2201      	movs	r2, #1
 8001716:	705a      	strb	r2, [r3, #1]
 8001718:	e00b      	b.n	8001732 <HAL_PCD_EP_Open+0x56>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800171a:	78fb      	ldrb	r3, [r7, #3]
 800171c:	f003 0307 	and.w	r3, r3, #7
 8001720:	015b      	lsls	r3, r3, #5
 8001722:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001726:	687a      	ldr	r2, [r7, #4]
 8001728:	4413      	add	r3, r2
 800172a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	2200      	movs	r2, #0
 8001730:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001732:	78fb      	ldrb	r3, [r7, #3]
 8001734:	f003 0307 	and.w	r3, r3, #7
 8001738:	b2da      	uxtb	r2, r3
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800173e:	883a      	ldrh	r2, [r7, #0]
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	78ba      	ldrb	r2, [r7, #2]
 8001748:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	785b      	ldrb	r3, [r3, #1]
 800174e:	2b00      	cmp	r3, #0
 8001750:	d004      	beq.n	800175c <HAL_PCD_EP_Open+0x80>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	781b      	ldrb	r3, [r3, #0]
 8001756:	b29a      	uxth	r2, r3
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800175c:	78bb      	ldrb	r3, [r7, #2]
 800175e:	2b02      	cmp	r3, #2
 8001760:	d102      	bne.n	8001768 <HAL_PCD_EP_Open+0x8c>
  {
    ep->data_pid_start = 0U;
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	2200      	movs	r2, #0
 8001766:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 800176e:	2b01      	cmp	r3, #1
 8001770:	d101      	bne.n	8001776 <HAL_PCD_EP_Open+0x9a>
 8001772:	2302      	movs	r3, #2
 8001774:	e00e      	b.n	8001794 <HAL_PCD_EP_Open+0xb8>
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	2201      	movs	r2, #1
 800177a:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	68f9      	ldr	r1, [r7, #12]
 8001784:	4618      	mov	r0, r3
 8001786:	f001 f965 	bl	8002a54 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	2200      	movs	r2, #0
 800178e:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return ret;
 8001792:	7afb      	ldrb	r3, [r7, #11]
}
 8001794:	4618      	mov	r0, r3
 8001796:	3710      	adds	r7, #16
 8001798:	46bd      	mov	sp, r7
 800179a:	bd80      	pop	{r7, pc}

0800179c <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	b084      	sub	sp, #16
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]
 80017a4:	460b      	mov	r3, r1
 80017a6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80017a8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	da0b      	bge.n	80017c8 <HAL_PCD_EP_Close+0x2c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80017b0:	78fb      	ldrb	r3, [r7, #3]
 80017b2:	f003 0307 	and.w	r3, r3, #7
 80017b6:	015b      	lsls	r3, r3, #5
 80017b8:	3328      	adds	r3, #40	; 0x28
 80017ba:	687a      	ldr	r2, [r7, #4]
 80017bc:	4413      	add	r3, r2
 80017be:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	2201      	movs	r2, #1
 80017c4:	705a      	strb	r2, [r3, #1]
 80017c6:	e00b      	b.n	80017e0 <HAL_PCD_EP_Close+0x44>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80017c8:	78fb      	ldrb	r3, [r7, #3]
 80017ca:	f003 0307 	and.w	r3, r3, #7
 80017ce:	015b      	lsls	r3, r3, #5
 80017d0:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80017d4:	687a      	ldr	r2, [r7, #4]
 80017d6:	4413      	add	r3, r2
 80017d8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	2200      	movs	r2, #0
 80017de:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80017e0:	78fb      	ldrb	r3, [r7, #3]
 80017e2:	f003 0307 	and.w	r3, r3, #7
 80017e6:	b2da      	uxtb	r2, r3
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 80017f2:	2b01      	cmp	r3, #1
 80017f4:	d101      	bne.n	80017fa <HAL_PCD_EP_Close+0x5e>
 80017f6:	2302      	movs	r3, #2
 80017f8:	e00e      	b.n	8001818 <HAL_PCD_EP_Close+0x7c>
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	2201      	movs	r2, #1
 80017fe:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	68f9      	ldr	r1, [r7, #12]
 8001808:	4618      	mov	r0, r3
 800180a:	f001 fc11 	bl	8003030 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	2200      	movs	r2, #0
 8001812:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 8001816:	2300      	movs	r3, #0
}
 8001818:	4618      	mov	r0, r3
 800181a:	3710      	adds	r7, #16
 800181c:	46bd      	mov	sp, r7
 800181e:	bd80      	pop	{r7, pc}

08001820 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	b086      	sub	sp, #24
 8001824:	af00      	add	r7, sp, #0
 8001826:	60f8      	str	r0, [r7, #12]
 8001828:	607a      	str	r2, [r7, #4]
 800182a:	603b      	str	r3, [r7, #0]
 800182c:	460b      	mov	r3, r1
 800182e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001830:	7afb      	ldrb	r3, [r7, #11]
 8001832:	f003 0307 	and.w	r3, r3, #7
 8001836:	015b      	lsls	r3, r3, #5
 8001838:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800183c:	68fa      	ldr	r2, [r7, #12]
 800183e:	4413      	add	r3, r2
 8001840:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001842:	697b      	ldr	r3, [r7, #20]
 8001844:	687a      	ldr	r2, [r7, #4]
 8001846:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001848:	697b      	ldr	r3, [r7, #20]
 800184a:	683a      	ldr	r2, [r7, #0]
 800184c:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800184e:	697b      	ldr	r3, [r7, #20]
 8001850:	2200      	movs	r2, #0
 8001852:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8001854:	697b      	ldr	r3, [r7, #20]
 8001856:	2200      	movs	r2, #0
 8001858:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800185a:	7afb      	ldrb	r3, [r7, #11]
 800185c:	f003 0307 	and.w	r3, r3, #7
 8001860:	b2da      	uxtb	r2, r3
 8001862:	697b      	ldr	r3, [r7, #20]
 8001864:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001866:	7afb      	ldrb	r3, [r7, #11]
 8001868:	f003 0307 	and.w	r3, r3, #7
 800186c:	2b00      	cmp	r3, #0
 800186e:	d106      	bne.n	800187e <HAL_PCD_EP_Receive+0x5e>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	6979      	ldr	r1, [r7, #20]
 8001876:	4618      	mov	r0, r3
 8001878:	f001 fd70 	bl	800335c <USB_EPStartXfer>
 800187c:	e005      	b.n	800188a <HAL_PCD_EP_Receive+0x6a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	6979      	ldr	r1, [r7, #20]
 8001884:	4618      	mov	r0, r3
 8001886:	f001 fd69 	bl	800335c <USB_EPStartXfer>
  }

  return HAL_OK;
 800188a:	2300      	movs	r3, #0
}
 800188c:	4618      	mov	r0, r3
 800188e:	3718      	adds	r7, #24
 8001890:	46bd      	mov	sp, r7
 8001892:	bd80      	pop	{r7, pc}

08001894 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001894:	b480      	push	{r7}
 8001896:	b083      	sub	sp, #12
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]
 800189c:	460b      	mov	r3, r1
 800189e:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80018a0:	78fb      	ldrb	r3, [r7, #3]
 80018a2:	f003 0307 	and.w	r3, r3, #7
 80018a6:	687a      	ldr	r2, [r7, #4]
 80018a8:	330a      	adds	r3, #10
 80018aa:	015b      	lsls	r3, r3, #5
 80018ac:	4413      	add	r3, r2
 80018ae:	3304      	adds	r3, #4
 80018b0:	681b      	ldr	r3, [r3, #0]
}
 80018b2:	4618      	mov	r0, r3
 80018b4:	370c      	adds	r7, #12
 80018b6:	46bd      	mov	sp, r7
 80018b8:	bc80      	pop	{r7}
 80018ba:	4770      	bx	lr

080018bc <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	b086      	sub	sp, #24
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	60f8      	str	r0, [r7, #12]
 80018c4:	607a      	str	r2, [r7, #4]
 80018c6:	603b      	str	r3, [r7, #0]
 80018c8:	460b      	mov	r3, r1
 80018ca:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80018cc:	7afb      	ldrb	r3, [r7, #11]
 80018ce:	f003 0307 	and.w	r3, r3, #7
 80018d2:	015b      	lsls	r3, r3, #5
 80018d4:	3328      	adds	r3, #40	; 0x28
 80018d6:	68fa      	ldr	r2, [r7, #12]
 80018d8:	4413      	add	r3, r2
 80018da:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80018dc:	697b      	ldr	r3, [r7, #20]
 80018de:	687a      	ldr	r2, [r7, #4]
 80018e0:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80018e2:	697b      	ldr	r3, [r7, #20]
 80018e4:	683a      	ldr	r2, [r7, #0]
 80018e6:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80018e8:	697b      	ldr	r3, [r7, #20]
 80018ea:	2200      	movs	r2, #0
 80018ec:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 80018ee:	697b      	ldr	r3, [r7, #20]
 80018f0:	2201      	movs	r2, #1
 80018f2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80018f4:	7afb      	ldrb	r3, [r7, #11]
 80018f6:	f003 0307 	and.w	r3, r3, #7
 80018fa:	b2da      	uxtb	r2, r3
 80018fc:	697b      	ldr	r3, [r7, #20]
 80018fe:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001900:	7afb      	ldrb	r3, [r7, #11]
 8001902:	f003 0307 	and.w	r3, r3, #7
 8001906:	2b00      	cmp	r3, #0
 8001908:	d106      	bne.n	8001918 <HAL_PCD_EP_Transmit+0x5c>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	6979      	ldr	r1, [r7, #20]
 8001910:	4618      	mov	r0, r3
 8001912:	f001 fd23 	bl	800335c <USB_EPStartXfer>
 8001916:	e005      	b.n	8001924 <HAL_PCD_EP_Transmit+0x68>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	6979      	ldr	r1, [r7, #20]
 800191e:	4618      	mov	r0, r3
 8001920:	f001 fd1c 	bl	800335c <USB_EPStartXfer>
  }

  return HAL_OK;
 8001924:	2300      	movs	r3, #0
}
 8001926:	4618      	mov	r0, r3
 8001928:	3718      	adds	r7, #24
 800192a:	46bd      	mov	sp, r7
 800192c:	bd80      	pop	{r7, pc}

0800192e <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800192e:	b580      	push	{r7, lr}
 8001930:	b084      	sub	sp, #16
 8001932:	af00      	add	r7, sp, #0
 8001934:	6078      	str	r0, [r7, #4]
 8001936:	460b      	mov	r3, r1
 8001938:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800193a:	78fb      	ldrb	r3, [r7, #3]
 800193c:	f003 0207 	and.w	r2, r3, #7
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	685b      	ldr	r3, [r3, #4]
 8001944:	429a      	cmp	r2, r3
 8001946:	d901      	bls.n	800194c <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001948:	2301      	movs	r3, #1
 800194a:	e046      	b.n	80019da <HAL_PCD_EP_SetStall+0xac>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800194c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001950:	2b00      	cmp	r3, #0
 8001952:	da0b      	bge.n	800196c <HAL_PCD_EP_SetStall+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001954:	78fb      	ldrb	r3, [r7, #3]
 8001956:	f003 0307 	and.w	r3, r3, #7
 800195a:	015b      	lsls	r3, r3, #5
 800195c:	3328      	adds	r3, #40	; 0x28
 800195e:	687a      	ldr	r2, [r7, #4]
 8001960:	4413      	add	r3, r2
 8001962:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	2201      	movs	r2, #1
 8001968:	705a      	strb	r2, [r3, #1]
 800196a:	e009      	b.n	8001980 <HAL_PCD_EP_SetStall+0x52>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800196c:	78fb      	ldrb	r3, [r7, #3]
 800196e:	015b      	lsls	r3, r3, #5
 8001970:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001974:	687a      	ldr	r2, [r7, #4]
 8001976:	4413      	add	r3, r2
 8001978:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	2200      	movs	r2, #0
 800197e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	2201      	movs	r2, #1
 8001984:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001986:	78fb      	ldrb	r3, [r7, #3]
 8001988:	f003 0307 	and.w	r3, r3, #7
 800198c:	b2da      	uxtb	r2, r3
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8001998:	2b01      	cmp	r3, #1
 800199a:	d101      	bne.n	80019a0 <HAL_PCD_EP_SetStall+0x72>
 800199c:	2302      	movs	r3, #2
 800199e:	e01c      	b.n	80019da <HAL_PCD_EP_SetStall+0xac>
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	2201      	movs	r2, #1
 80019a4:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	68f9      	ldr	r1, [r7, #12]
 80019ae:	4618      	mov	r0, r3
 80019b0:	f001 ff8c 	bl	80038cc <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80019b4:	78fb      	ldrb	r3, [r7, #3]
 80019b6:	f003 0307 	and.w	r3, r3, #7
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d108      	bne.n	80019d0 <HAL_PCD_EP_SetStall+0xa2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681a      	ldr	r2, [r3, #0]
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	f503 730c 	add.w	r3, r3, #560	; 0x230
 80019c8:	4619      	mov	r1, r3
 80019ca:	4610      	mov	r0, r2
 80019cc:	f002 f88a 	bl	8003ae4 <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	2200      	movs	r2, #0
 80019d4:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return HAL_OK;
 80019d8:	2300      	movs	r3, #0
}
 80019da:	4618      	mov	r0, r3
 80019dc:	3710      	adds	r7, #16
 80019de:	46bd      	mov	sp, r7
 80019e0:	bd80      	pop	{r7, pc}

080019e2 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80019e2:	b580      	push	{r7, lr}
 80019e4:	b084      	sub	sp, #16
 80019e6:	af00      	add	r7, sp, #0
 80019e8:	6078      	str	r0, [r7, #4]
 80019ea:	460b      	mov	r3, r1
 80019ec:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80019ee:	78fb      	ldrb	r3, [r7, #3]
 80019f0:	f003 020f 	and.w	r2, r3, #15
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	685b      	ldr	r3, [r3, #4]
 80019f8:	429a      	cmp	r2, r3
 80019fa:	d901      	bls.n	8001a00 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80019fc:	2301      	movs	r3, #1
 80019fe:	e03a      	b.n	8001a76 <HAL_PCD_EP_ClrStall+0x94>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001a00:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	da0b      	bge.n	8001a20 <HAL_PCD_EP_ClrStall+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001a08:	78fb      	ldrb	r3, [r7, #3]
 8001a0a:	f003 0307 	and.w	r3, r3, #7
 8001a0e:	015b      	lsls	r3, r3, #5
 8001a10:	3328      	adds	r3, #40	; 0x28
 8001a12:	687a      	ldr	r2, [r7, #4]
 8001a14:	4413      	add	r3, r2
 8001a16:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	2201      	movs	r2, #1
 8001a1c:	705a      	strb	r2, [r3, #1]
 8001a1e:	e00b      	b.n	8001a38 <HAL_PCD_EP_ClrStall+0x56>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001a20:	78fb      	ldrb	r3, [r7, #3]
 8001a22:	f003 0307 	and.w	r3, r3, #7
 8001a26:	015b      	lsls	r3, r3, #5
 8001a28:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001a2c:	687a      	ldr	r2, [r7, #4]
 8001a2e:	4413      	add	r3, r2
 8001a30:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	2200      	movs	r2, #0
 8001a36:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001a3e:	78fb      	ldrb	r3, [r7, #3]
 8001a40:	f003 0307 	and.w	r3, r3, #7
 8001a44:	b2da      	uxtb	r2, r3
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8001a50:	2b01      	cmp	r3, #1
 8001a52:	d101      	bne.n	8001a58 <HAL_PCD_EP_ClrStall+0x76>
 8001a54:	2302      	movs	r3, #2
 8001a56:	e00e      	b.n	8001a76 <HAL_PCD_EP_ClrStall+0x94>
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	2201      	movs	r2, #1
 8001a5c:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	68f9      	ldr	r1, [r7, #12]
 8001a66:	4618      	mov	r0, r3
 8001a68:	f001 ff72 	bl	8003950 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	2200      	movs	r2, #0
 8001a70:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return HAL_OK;
 8001a74:	2300      	movs	r3, #0
}
 8001a76:	4618      	mov	r0, r3
 8001a78:	3710      	adds	r7, #16
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	bd80      	pop	{r7, pc}
	...

08001a80 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8001a80:	b590      	push	{r4, r7, lr}
 8001a82:	b089      	sub	sp, #36	; 0x24
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
  uint16_t wIstr;
  uint16_t wEPVal;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001a88:	e282      	b.n	8001f90 <PCD_EP_ISR_Handler+0x510>
  {
    wIstr = hpcd->Instance->ISTR;
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001a92:	82fb      	strh	r3, [r7, #22]
    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8001a94:	8afb      	ldrh	r3, [r7, #22]
 8001a96:	b2db      	uxtb	r3, r3
 8001a98:	f003 030f 	and.w	r3, r3, #15
 8001a9c:	757b      	strb	r3, [r7, #21]

    if (epindex == 0U)
 8001a9e:	7d7b      	ldrb	r3, [r7, #21]
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	f040 8142 	bne.w	8001d2a <PCD_EP_ISR_Handler+0x2aa>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8001aa6:	8afb      	ldrh	r3, [r7, #22]
 8001aa8:	f003 0310 	and.w	r3, r3, #16
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d151      	bne.n	8001b54 <PCD_EP_ISR_Handler+0xd4>
      {
        /* DIR = 0 */

        /* DIR = 0      => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always  */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	881b      	ldrh	r3, [r3, #0]
 8001ab6:	b29b      	uxth	r3, r3
 8001ab8:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8001abc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001ac0:	b29c      	uxth	r4, r3
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681a      	ldr	r2, [r3, #0]
 8001ac6:	ea6f 4344 	mvn.w	r3, r4, lsl #17
 8001aca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001ace:	b29b      	uxth	r3, r3
 8001ad0:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	3328      	adds	r3, #40	; 0x28
 8001ad6:	60fb      	str	r3, [r7, #12]

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001ae0:	b29b      	uxth	r3, r3
 8001ae2:	461a      	mov	r2, r3
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	781b      	ldrb	r3, [r3, #0]
 8001ae8:	00db      	lsls	r3, r3, #3
 8001aea:	4413      	add	r3, r2
 8001aec:	3302      	adds	r3, #2
 8001aee:	005b      	lsls	r3, r3, #1
 8001af0:	687a      	ldr	r2, [r7, #4]
 8001af2:	6812      	ldr	r2, [r2, #0]
 8001af4:	4413      	add	r3, r2
 8001af6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001afa:	881b      	ldrh	r3, [r3, #0]
 8001afc:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	695a      	ldr	r2, [r3, #20]
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	69db      	ldr	r3, [r3, #28]
 8001b0c:	441a      	add	r2, r3
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8001b12:	2100      	movs	r1, #0
 8001b14:	6878      	ldr	r0, [r7, #4]
 8001b16:	f003 fde1 	bl	80056dc <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001b20:	b2db      	uxtb	r3, r3
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	f000 8234 	beq.w	8001f90 <PCD_EP_ISR_Handler+0x510>
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	699b      	ldr	r3, [r3, #24]
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	f040 822f 	bne.w	8001f90 <PCD_EP_ISR_Handler+0x510>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001b38:	b2db      	uxtb	r3, r3
 8001b3a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001b3e:	b2da      	uxtb	r2, r3
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	b292      	uxth	r2, r2
 8001b46:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8001b52:	e21d      	b.n	8001f90 <PCD_EP_ISR_Handler+0x510>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX       => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001b5a:	60fb      	str	r3, [r7, #12]
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	881b      	ldrh	r3, [r3, #0]
 8001b62:	827b      	strh	r3, [r7, #18]

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8001b64:	8a7b      	ldrh	r3, [r7, #18]
 8001b66:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d033      	beq.n	8001bd6 <PCD_EP_ISR_Handler+0x156>
        {
          /* Get SETUP Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001b76:	b29b      	uxth	r3, r3
 8001b78:	461a      	mov	r2, r3
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	781b      	ldrb	r3, [r3, #0]
 8001b7e:	00db      	lsls	r3, r3, #3
 8001b80:	4413      	add	r3, r2
 8001b82:	3306      	adds	r3, #6
 8001b84:	005b      	lsls	r3, r3, #1
 8001b86:	687a      	ldr	r2, [r7, #4]
 8001b88:	6812      	ldr	r2, [r2, #0]
 8001b8a:	4413      	add	r3, r2
 8001b8c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001b90:	881b      	ldrh	r3, [r3, #0]
 8001b92:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	6818      	ldr	r0, [r3, #0]
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	f503 710c 	add.w	r1, r3, #560	; 0x230
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001bac:	b29b      	uxth	r3, r3
 8001bae:	f001 ffe8 	bl	8003b82 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1*/
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	881b      	ldrh	r3, [r3, #0]
 8001bb8:	b29a      	uxth	r2, r3
 8001bba:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001bbe:	4013      	ands	r3, r2
 8001bc0:	b29c      	uxth	r4, r3
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 8001bca:	b292      	uxth	r2, r2
 8001bcc:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8001bce:	6878      	ldr	r0, [r7, #4]
 8001bd0:	f003 fd5a 	bl	8005688 <HAL_PCD_SetupStageCallback>
 8001bd4:	e1dc      	b.n	8001f90 <PCD_EP_ISR_Handler+0x510>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }

        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001bd6:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	f280 81d8 	bge.w	8001f90 <PCD_EP_ISR_Handler+0x510>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	881b      	ldrh	r3, [r3, #0]
 8001be6:	b29a      	uxth	r2, r3
 8001be8:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001bec:	4013      	ands	r3, r2
 8001bee:	b29c      	uxth	r4, r3
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 8001bf8:	b292      	uxth	r2, r2
 8001bfa:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001c04:	b29b      	uxth	r3, r3
 8001c06:	461a      	mov	r2, r3
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	781b      	ldrb	r3, [r3, #0]
 8001c0c:	00db      	lsls	r3, r3, #3
 8001c0e:	4413      	add	r3, r2
 8001c10:	3306      	adds	r3, #6
 8001c12:	005b      	lsls	r3, r3, #1
 8001c14:	687a      	ldr	r2, [r7, #4]
 8001c16:	6812      	ldr	r2, [r2, #0]
 8001c18:	4413      	add	r3, r2
 8001c1a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001c1e:	881b      	ldrh	r3, [r3, #0]
 8001c20:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	69db      	ldr	r3, [r3, #28]
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d019      	beq.n	8001c64 <PCD_EP_ISR_Handler+0x1e4>
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	695b      	ldr	r3, [r3, #20]
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d015      	beq.n	8001c64 <PCD_EP_ISR_Handler+0x1e4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	6818      	ldr	r0, [r3, #0]
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	6959      	ldr	r1, [r3, #20]
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001c48:	b29b      	uxth	r3, r3
 8001c4a:	f001 ff9a 	bl	8003b82 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	695a      	ldr	r2, [r3, #20]
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	69db      	ldr	r3, [r3, #28]
 8001c56:	441a      	add	r2, r3
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8001c5c:	2100      	movs	r1, #0
 8001c5e:	6878      	ldr	r0, [r7, #4]
 8001c60:	f003 fd24 	bl	80056ac <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	461c      	mov	r4, r3
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001c72:	b29b      	uxth	r3, r3
 8001c74:	441c      	add	r4, r3
 8001c76:	f204 430c 	addw	r3, r4, #1036	; 0x40c
 8001c7a:	461c      	mov	r4, r3
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	691b      	ldr	r3, [r3, #16]
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d10e      	bne.n	8001ca2 <PCD_EP_ISR_Handler+0x222>
 8001c84:	8823      	ldrh	r3, [r4, #0]
 8001c86:	b29b      	uxth	r3, r3
 8001c88:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8001c8c:	b29b      	uxth	r3, r3
 8001c8e:	8023      	strh	r3, [r4, #0]
 8001c90:	8823      	ldrh	r3, [r4, #0]
 8001c92:	b29b      	uxth	r3, r3
 8001c94:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001c98:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001c9c:	b29b      	uxth	r3, r3
 8001c9e:	8023      	strh	r3, [r4, #0]
 8001ca0:	e02d      	b.n	8001cfe <PCD_EP_ISR_Handler+0x27e>
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	691b      	ldr	r3, [r3, #16]
 8001ca6:	2b3e      	cmp	r3, #62	; 0x3e
 8001ca8:	d812      	bhi.n	8001cd0 <PCD_EP_ISR_Handler+0x250>
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	691b      	ldr	r3, [r3, #16]
 8001cae:	085b      	lsrs	r3, r3, #1
 8001cb0:	61bb      	str	r3, [r7, #24]
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	691b      	ldr	r3, [r3, #16]
 8001cb6:	f003 0301 	and.w	r3, r3, #1
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d002      	beq.n	8001cc4 <PCD_EP_ISR_Handler+0x244>
 8001cbe:	69bb      	ldr	r3, [r7, #24]
 8001cc0:	3301      	adds	r3, #1
 8001cc2:	61bb      	str	r3, [r7, #24]
 8001cc4:	69bb      	ldr	r3, [r7, #24]
 8001cc6:	b29b      	uxth	r3, r3
 8001cc8:	029b      	lsls	r3, r3, #10
 8001cca:	b29b      	uxth	r3, r3
 8001ccc:	8023      	strh	r3, [r4, #0]
 8001cce:	e016      	b.n	8001cfe <PCD_EP_ISR_Handler+0x27e>
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	691b      	ldr	r3, [r3, #16]
 8001cd4:	095b      	lsrs	r3, r3, #5
 8001cd6:	61bb      	str	r3, [r7, #24]
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	691b      	ldr	r3, [r3, #16]
 8001cdc:	f003 031f 	and.w	r3, r3, #31
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d102      	bne.n	8001cea <PCD_EP_ISR_Handler+0x26a>
 8001ce4:	69bb      	ldr	r3, [r7, #24]
 8001ce6:	3b01      	subs	r3, #1
 8001ce8:	61bb      	str	r3, [r7, #24]
 8001cea:	69bb      	ldr	r3, [r7, #24]
 8001cec:	b29b      	uxth	r3, r3
 8001cee:	029b      	lsls	r3, r3, #10
 8001cf0:	b29b      	uxth	r3, r3
 8001cf2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001cf6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001cfa:	b29b      	uxth	r3, r3
 8001cfc:	8023      	strh	r3, [r4, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	881b      	ldrh	r3, [r3, #0]
 8001d04:	b29b      	uxth	r3, r3
 8001d06:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001d0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001d0e:	b29c      	uxth	r4, r3
 8001d10:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8001d14:	b29c      	uxth	r4, r3
 8001d16:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8001d1a:	b29c      	uxth	r4, r3
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681a      	ldr	r2, [r3, #0]
 8001d20:	4ba2      	ldr	r3, [pc, #648]	; (8001fac <PCD_EP_ISR_Handler+0x52c>)
 8001d22:	4323      	orrs	r3, r4
 8001d24:	b29b      	uxth	r3, r3
 8001d26:	8013      	strh	r3, [r2, #0]
 8001d28:	e132      	b.n	8001f90 <PCD_EP_ISR_Handler+0x510>
    else
    {
      /* Decode and service non control endpoints interrupt  */

      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	461a      	mov	r2, r3
 8001d30:	7d7b      	ldrb	r3, [r7, #21]
 8001d32:	009b      	lsls	r3, r3, #2
 8001d34:	4413      	add	r3, r2
 8001d36:	881b      	ldrh	r3, [r3, #0]
 8001d38:	827b      	strh	r3, [r7, #18]
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001d3a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	f280 80d1 	bge.w	8001ee6 <PCD_EP_ISR_Handler+0x466>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	461a      	mov	r2, r3
 8001d4a:	7d7b      	ldrb	r3, [r7, #21]
 8001d4c:	009b      	lsls	r3, r3, #2
 8001d4e:	4413      	add	r3, r2
 8001d50:	881b      	ldrh	r3, [r3, #0]
 8001d52:	b29a      	uxth	r2, r3
 8001d54:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001d58:	4013      	ands	r3, r2
 8001d5a:	b29c      	uxth	r4, r3
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	461a      	mov	r2, r3
 8001d62:	7d7b      	ldrb	r3, [r7, #21]
 8001d64:	009b      	lsls	r3, r3, #2
 8001d66:	4413      	add	r3, r2
 8001d68:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 8001d6c:	b292      	uxth	r2, r2
 8001d6e:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8001d70:	7d7b      	ldrb	r3, [r7, #21]
 8001d72:	015b      	lsls	r3, r3, #5
 8001d74:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001d78:	687a      	ldr	r2, [r7, #4]
 8001d7a:	4413      	add	r3, r2
 8001d7c:	60fb      	str	r3, [r7, #12]

        /* OUT double Buffering*/
        if (ep->doublebuffer == 0U)
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	7b1b      	ldrb	r3, [r3, #12]
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d121      	bne.n	8001dca <PCD_EP_ISR_Handler+0x34a>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001d8e:	b29b      	uxth	r3, r3
 8001d90:	461a      	mov	r2, r3
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	781b      	ldrb	r3, [r3, #0]
 8001d96:	00db      	lsls	r3, r3, #3
 8001d98:	4413      	add	r3, r2
 8001d9a:	3306      	adds	r3, #6
 8001d9c:	005b      	lsls	r3, r3, #1
 8001d9e:	687a      	ldr	r2, [r7, #4]
 8001da0:	6812      	ldr	r2, [r2, #0]
 8001da2:	4413      	add	r3, r2
 8001da4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001da8:	881b      	ldrh	r3, [r3, #0]
 8001daa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001dae:	83fb      	strh	r3, [r7, #30]
          if (count != 0U)
 8001db0:	8bfb      	ldrh	r3, [r7, #30]
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d072      	beq.n	8001e9c <PCD_EP_ISR_Handler+0x41c>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	6818      	ldr	r0, [r3, #0]
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	6959      	ldr	r1, [r3, #20]
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	88da      	ldrh	r2, [r3, #6]
 8001dc2:	8bfb      	ldrh	r3, [r7, #30]
 8001dc4:	f001 fedd 	bl	8003b82 <USB_ReadPMA>
 8001dc8:	e068      	b.n	8001e9c <PCD_EP_ISR_Handler+0x41c>
          }
        }
        else
        {
          if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	461a      	mov	r2, r3
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	781b      	ldrb	r3, [r3, #0]
 8001dd4:	009b      	lsls	r3, r3, #2
 8001dd6:	4413      	add	r3, r2
 8001dd8:	881b      	ldrh	r3, [r3, #0]
 8001dda:	b29b      	uxth	r3, r3
 8001ddc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d021      	beq.n	8001e28 <PCD_EP_ISR_Handler+0x3a8>
          {
            /*read from endpoint BUF0Addr buffer*/
            count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001dec:	b29b      	uxth	r3, r3
 8001dee:	461a      	mov	r2, r3
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	781b      	ldrb	r3, [r3, #0]
 8001df4:	00db      	lsls	r3, r3, #3
 8001df6:	4413      	add	r3, r2
 8001df8:	3302      	adds	r3, #2
 8001dfa:	005b      	lsls	r3, r3, #1
 8001dfc:	687a      	ldr	r2, [r7, #4]
 8001dfe:	6812      	ldr	r2, [r2, #0]
 8001e00:	4413      	add	r3, r2
 8001e02:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001e06:	881b      	ldrh	r3, [r3, #0]
 8001e08:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001e0c:	83fb      	strh	r3, [r7, #30]
            if (count != 0U)
 8001e0e:	8bfb      	ldrh	r3, [r7, #30]
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d02a      	beq.n	8001e6a <PCD_EP_ISR_Handler+0x3ea>
            {
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	6818      	ldr	r0, [r3, #0]
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	6959      	ldr	r1, [r3, #20]
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	891a      	ldrh	r2, [r3, #8]
 8001e20:	8bfb      	ldrh	r3, [r7, #30]
 8001e22:	f001 feae 	bl	8003b82 <USB_ReadPMA>
 8001e26:	e020      	b.n	8001e6a <PCD_EP_ISR_Handler+0x3ea>
            }
          }
          else
          {
            /*read from endpoint BUF1Addr buffer*/
            count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001e30:	b29b      	uxth	r3, r3
 8001e32:	461a      	mov	r2, r3
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	781b      	ldrb	r3, [r3, #0]
 8001e38:	00db      	lsls	r3, r3, #3
 8001e3a:	4413      	add	r3, r2
 8001e3c:	3306      	adds	r3, #6
 8001e3e:	005b      	lsls	r3, r3, #1
 8001e40:	687a      	ldr	r2, [r7, #4]
 8001e42:	6812      	ldr	r2, [r2, #0]
 8001e44:	4413      	add	r3, r2
 8001e46:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001e4a:	881b      	ldrh	r3, [r3, #0]
 8001e4c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001e50:	83fb      	strh	r3, [r7, #30]
            if (count != 0U)
 8001e52:	8bfb      	ldrh	r3, [r7, #30]
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d008      	beq.n	8001e6a <PCD_EP_ISR_Handler+0x3ea>
            {
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	6818      	ldr	r0, [r3, #0]
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	6959      	ldr	r1, [r3, #20]
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	895a      	ldrh	r2, [r3, #10]
 8001e64:	8bfb      	ldrh	r3, [r7, #30]
 8001e66:	f001 fe8c 	bl	8003b82 <USB_ReadPMA>
            }
          }
          /* free EP OUT Buffer */
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	461a      	mov	r2, r3
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	781b      	ldrb	r3, [r3, #0]
 8001e74:	009b      	lsls	r3, r3, #2
 8001e76:	4413      	add	r3, r2
 8001e78:	881b      	ldrh	r3, [r3, #0]
 8001e7a:	b29b      	uxth	r3, r3
 8001e7c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001e80:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001e84:	b29c      	uxth	r4, r3
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	461a      	mov	r2, r3
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	781b      	ldrb	r3, [r3, #0]
 8001e90:	009b      	lsls	r3, r3, #2
 8001e92:	441a      	add	r2, r3
 8001e94:	4b46      	ldr	r3, [pc, #280]	; (8001fb0 <PCD_EP_ISR_Handler+0x530>)
 8001e96:	4323      	orrs	r3, r4
 8001e98:	b29b      	uxth	r3, r3
 8001e9a:	8013      	strh	r3, [r2, #0]
        }
        /*multi-packet on the NON control OUT endpoint*/
        ep->xfer_count += count;
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	69da      	ldr	r2, [r3, #28]
 8001ea0:	8bfb      	ldrh	r3, [r7, #30]
 8001ea2:	441a      	add	r2, r3
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	695a      	ldr	r2, [r3, #20]
 8001eac:	8bfb      	ldrh	r3, [r7, #30]
 8001eae:	441a      	add	r2, r3
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	699b      	ldr	r3, [r3, #24]
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d004      	beq.n	8001ec6 <PCD_EP_ISR_Handler+0x446>
 8001ebc:	8bfa      	ldrh	r2, [r7, #30]
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	691b      	ldr	r3, [r3, #16]
 8001ec2:	429a      	cmp	r2, r3
 8001ec4:	d206      	bcs.n	8001ed4 <PCD_EP_ISR_Handler+0x454>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	781b      	ldrb	r3, [r3, #0]
 8001eca:	4619      	mov	r1, r3
 8001ecc:	6878      	ldr	r0, [r7, #4]
 8001ece:	f003 fbed 	bl	80056ac <HAL_PCD_DataOutStageCallback>
 8001ed2:	e008      	b.n	8001ee6 <PCD_EP_ISR_Handler+0x466>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)HAL_PCD_EP_Receive(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	7819      	ldrb	r1, [r3, #0]
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	695a      	ldr	r2, [r3, #20]
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	699b      	ldr	r3, [r3, #24]
 8001ee0:	6878      	ldr	r0, [r7, #4]
 8001ee2:	f7ff fc9d 	bl	8001820 <HAL_PCD_EP_Receive>
        }

      } /* if((wEPVal & EP_CTR_RX) */

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8001ee6:	8a7b      	ldrh	r3, [r7, #18]
 8001ee8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d04f      	beq.n	8001f90 <PCD_EP_ISR_Handler+0x510>
      {
        ep = &hpcd->IN_ep[epindex];
 8001ef0:	7d7b      	ldrb	r3, [r7, #21]
 8001ef2:	015b      	lsls	r3, r3, #5
 8001ef4:	3328      	adds	r3, #40	; 0x28
 8001ef6:	687a      	ldr	r2, [r7, #4]
 8001ef8:	4413      	add	r3, r2
 8001efa:	60fb      	str	r3, [r7, #12]

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	461a      	mov	r2, r3
 8001f02:	7d7b      	ldrb	r3, [r7, #21]
 8001f04:	009b      	lsls	r3, r3, #2
 8001f06:	4413      	add	r3, r2
 8001f08:	881b      	ldrh	r3, [r3, #0]
 8001f0a:	b29b      	uxth	r3, r3
 8001f0c:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8001f10:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001f14:	b29c      	uxth	r4, r3
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	461a      	mov	r2, r3
 8001f1c:	7d7b      	ldrb	r3, [r7, #21]
 8001f1e:	009b      	lsls	r3, r3, #2
 8001f20:	441a      	add	r2, r3
 8001f22:	ea6f 4344 	mvn.w	r3, r4, lsl #17
 8001f26:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001f2a:	b29b      	uxth	r3, r3
 8001f2c:	8013      	strh	r3, [r2, #0]

        /*multi-packet on the NON control IN endpoint*/
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001f36:	b29b      	uxth	r3, r3
 8001f38:	461a      	mov	r2, r3
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	781b      	ldrb	r3, [r3, #0]
 8001f3e:	00db      	lsls	r3, r3, #3
 8001f40:	4413      	add	r3, r2
 8001f42:	3302      	adds	r3, #2
 8001f44:	005b      	lsls	r3, r3, #1
 8001f46:	687a      	ldr	r2, [r7, #4]
 8001f48:	6812      	ldr	r2, [r2, #0]
 8001f4a:	4413      	add	r3, r2
 8001f4c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001f50:	881b      	ldrh	r3, [r3, #0]
 8001f52:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	695a      	ldr	r2, [r3, #20]
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	69db      	ldr	r3, [r3, #28]
 8001f62:	441a      	add	r2, r3
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	615a      	str	r2, [r3, #20]

        /* Zero Length Packet? */
        if (ep->xfer_len == 0U)
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	699b      	ldr	r3, [r3, #24]
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d106      	bne.n	8001f7e <PCD_EP_ISR_Handler+0x4fe>
        {
          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	781b      	ldrb	r3, [r3, #0]
 8001f74:	4619      	mov	r1, r3
 8001f76:	6878      	ldr	r0, [r7, #4]
 8001f78:	f003 fbb0 	bl	80056dc <HAL_PCD_DataInStageCallback>
 8001f7c:	e008      	b.n	8001f90 <PCD_EP_ISR_Handler+0x510>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)HAL_PCD_EP_Transmit(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	7819      	ldrb	r1, [r3, #0]
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	695a      	ldr	r2, [r3, #20]
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	699b      	ldr	r3, [r3, #24]
 8001f8a:	6878      	ldr	r0, [r7, #4]
 8001f8c:	f7ff fc96 	bl	80018bc <HAL_PCD_EP_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001f98:	b29b      	uxth	r3, r3
 8001f9a:	b21b      	sxth	r3, r3
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	f6ff ad74 	blt.w	8001a8a <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }
  return HAL_OK;
 8001fa2:	2300      	movs	r3, #0
}
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	3724      	adds	r7, #36	; 0x24
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	bd90      	pop	{r4, r7, pc}
 8001fac:	ffff8080 	.word	0xffff8080
 8001fb0:	ffff80c0 	.word	0xffff80c0

08001fb4 <HAL_PCDEx_PMAConfig>:

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd,
                                       uint16_t ep_addr,
                                       uint16_t ep_kind,
                                       uint32_t pmaadress)
{
 8001fb4:	b480      	push	{r7}
 8001fb6:	b087      	sub	sp, #28
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	60f8      	str	r0, [r7, #12]
 8001fbc:	607b      	str	r3, [r7, #4]
 8001fbe:	460b      	mov	r3, r1
 8001fc0:	817b      	strh	r3, [r7, #10]
 8001fc2:	4613      	mov	r3, r2
 8001fc4:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8001fc6:	897b      	ldrh	r3, [r7, #10]
 8001fc8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001fcc:	b29b      	uxth	r3, r3
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d008      	beq.n	8001fe4 <HAL_PCDEx_PMAConfig+0x30>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001fd2:	897b      	ldrh	r3, [r7, #10]
 8001fd4:	f003 0307 	and.w	r3, r3, #7
 8001fd8:	015b      	lsls	r3, r3, #5
 8001fda:	3328      	adds	r3, #40	; 0x28
 8001fdc:	68fa      	ldr	r2, [r7, #12]
 8001fde:	4413      	add	r3, r2
 8001fe0:	617b      	str	r3, [r7, #20]
 8001fe2:	e006      	b.n	8001ff2 <HAL_PCDEx_PMAConfig+0x3e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001fe4:	897b      	ldrh	r3, [r7, #10]
 8001fe6:	015b      	lsls	r3, r3, #5
 8001fe8:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001fec:	68fa      	ldr	r2, [r7, #12]
 8001fee:	4413      	add	r3, r2
 8001ff0:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8001ff2:	893b      	ldrh	r3, [r7, #8]
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d107      	bne.n	8002008 <HAL_PCDEx_PMAConfig+0x54>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8001ff8:	697b      	ldr	r3, [r7, #20]
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	b29a      	uxth	r2, r3
 8002002:	697b      	ldr	r3, [r7, #20]
 8002004:	80da      	strh	r2, [r3, #6]
 8002006:	e00b      	b.n	8002020 <HAL_PCDEx_PMAConfig+0x6c>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8002008:	697b      	ldr	r3, [r7, #20]
 800200a:	2201      	movs	r2, #1
 800200c:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	b29a      	uxth	r2, r3
 8002012:	697b      	ldr	r3, [r7, #20]
 8002014:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	0c1b      	lsrs	r3, r3, #16
 800201a:	b29a      	uxth	r2, r3
 800201c:	697b      	ldr	r3, [r7, #20]
 800201e:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8002020:	2300      	movs	r3, #0
}
 8002022:	4618      	mov	r0, r3
 8002024:	371c      	adds	r7, #28
 8002026:	46bd      	mov	sp, r7
 8002028:	bc80      	pop	{r7}
 800202a:	4770      	bx	lr

0800202c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800202c:	b580      	push	{r7, lr}
 800202e:	b086      	sub	sp, #24
 8002030:	af00      	add	r7, sp, #0
 8002032:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	2b00      	cmp	r3, #0
 8002038:	d101      	bne.n	800203e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800203a:	2301      	movs	r3, #1
 800203c:	e26c      	b.n	8002518 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f003 0301 	and.w	r3, r3, #1
 8002046:	2b00      	cmp	r3, #0
 8002048:	f000 8087 	beq.w	800215a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800204c:	4b92      	ldr	r3, [pc, #584]	; (8002298 <HAL_RCC_OscConfig+0x26c>)
 800204e:	685b      	ldr	r3, [r3, #4]
 8002050:	f003 030c 	and.w	r3, r3, #12
 8002054:	2b04      	cmp	r3, #4
 8002056:	d00c      	beq.n	8002072 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002058:	4b8f      	ldr	r3, [pc, #572]	; (8002298 <HAL_RCC_OscConfig+0x26c>)
 800205a:	685b      	ldr	r3, [r3, #4]
 800205c:	f003 030c 	and.w	r3, r3, #12
 8002060:	2b08      	cmp	r3, #8
 8002062:	d112      	bne.n	800208a <HAL_RCC_OscConfig+0x5e>
 8002064:	4b8c      	ldr	r3, [pc, #560]	; (8002298 <HAL_RCC_OscConfig+0x26c>)
 8002066:	685b      	ldr	r3, [r3, #4]
 8002068:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800206c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002070:	d10b      	bne.n	800208a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002072:	4b89      	ldr	r3, [pc, #548]	; (8002298 <HAL_RCC_OscConfig+0x26c>)
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800207a:	2b00      	cmp	r3, #0
 800207c:	d06c      	beq.n	8002158 <HAL_RCC_OscConfig+0x12c>
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	685b      	ldr	r3, [r3, #4]
 8002082:	2b00      	cmp	r3, #0
 8002084:	d168      	bne.n	8002158 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002086:	2301      	movs	r3, #1
 8002088:	e246      	b.n	8002518 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	685b      	ldr	r3, [r3, #4]
 800208e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002092:	d106      	bne.n	80020a2 <HAL_RCC_OscConfig+0x76>
 8002094:	4b80      	ldr	r3, [pc, #512]	; (8002298 <HAL_RCC_OscConfig+0x26c>)
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	4a7f      	ldr	r2, [pc, #508]	; (8002298 <HAL_RCC_OscConfig+0x26c>)
 800209a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800209e:	6013      	str	r3, [r2, #0]
 80020a0:	e02e      	b.n	8002100 <HAL_RCC_OscConfig+0xd4>
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	685b      	ldr	r3, [r3, #4]
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d10c      	bne.n	80020c4 <HAL_RCC_OscConfig+0x98>
 80020aa:	4b7b      	ldr	r3, [pc, #492]	; (8002298 <HAL_RCC_OscConfig+0x26c>)
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	4a7a      	ldr	r2, [pc, #488]	; (8002298 <HAL_RCC_OscConfig+0x26c>)
 80020b0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80020b4:	6013      	str	r3, [r2, #0]
 80020b6:	4b78      	ldr	r3, [pc, #480]	; (8002298 <HAL_RCC_OscConfig+0x26c>)
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	4a77      	ldr	r2, [pc, #476]	; (8002298 <HAL_RCC_OscConfig+0x26c>)
 80020bc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80020c0:	6013      	str	r3, [r2, #0]
 80020c2:	e01d      	b.n	8002100 <HAL_RCC_OscConfig+0xd4>
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	685b      	ldr	r3, [r3, #4]
 80020c8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80020cc:	d10c      	bne.n	80020e8 <HAL_RCC_OscConfig+0xbc>
 80020ce:	4b72      	ldr	r3, [pc, #456]	; (8002298 <HAL_RCC_OscConfig+0x26c>)
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	4a71      	ldr	r2, [pc, #452]	; (8002298 <HAL_RCC_OscConfig+0x26c>)
 80020d4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80020d8:	6013      	str	r3, [r2, #0]
 80020da:	4b6f      	ldr	r3, [pc, #444]	; (8002298 <HAL_RCC_OscConfig+0x26c>)
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	4a6e      	ldr	r2, [pc, #440]	; (8002298 <HAL_RCC_OscConfig+0x26c>)
 80020e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020e4:	6013      	str	r3, [r2, #0]
 80020e6:	e00b      	b.n	8002100 <HAL_RCC_OscConfig+0xd4>
 80020e8:	4b6b      	ldr	r3, [pc, #428]	; (8002298 <HAL_RCC_OscConfig+0x26c>)
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	4a6a      	ldr	r2, [pc, #424]	; (8002298 <HAL_RCC_OscConfig+0x26c>)
 80020ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80020f2:	6013      	str	r3, [r2, #0]
 80020f4:	4b68      	ldr	r3, [pc, #416]	; (8002298 <HAL_RCC_OscConfig+0x26c>)
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	4a67      	ldr	r2, [pc, #412]	; (8002298 <HAL_RCC_OscConfig+0x26c>)
 80020fa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80020fe:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	685b      	ldr	r3, [r3, #4]
 8002104:	2b00      	cmp	r3, #0
 8002106:	d013      	beq.n	8002130 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002108:	f7fe fbf6 	bl	80008f8 <HAL_GetTick>
 800210c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800210e:	e008      	b.n	8002122 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002110:	f7fe fbf2 	bl	80008f8 <HAL_GetTick>
 8002114:	4602      	mov	r2, r0
 8002116:	693b      	ldr	r3, [r7, #16]
 8002118:	1ad3      	subs	r3, r2, r3
 800211a:	2b64      	cmp	r3, #100	; 0x64
 800211c:	d901      	bls.n	8002122 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800211e:	2303      	movs	r3, #3
 8002120:	e1fa      	b.n	8002518 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002122:	4b5d      	ldr	r3, [pc, #372]	; (8002298 <HAL_RCC_OscConfig+0x26c>)
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800212a:	2b00      	cmp	r3, #0
 800212c:	d0f0      	beq.n	8002110 <HAL_RCC_OscConfig+0xe4>
 800212e:	e014      	b.n	800215a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002130:	f7fe fbe2 	bl	80008f8 <HAL_GetTick>
 8002134:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002136:	e008      	b.n	800214a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002138:	f7fe fbde 	bl	80008f8 <HAL_GetTick>
 800213c:	4602      	mov	r2, r0
 800213e:	693b      	ldr	r3, [r7, #16]
 8002140:	1ad3      	subs	r3, r2, r3
 8002142:	2b64      	cmp	r3, #100	; 0x64
 8002144:	d901      	bls.n	800214a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002146:	2303      	movs	r3, #3
 8002148:	e1e6      	b.n	8002518 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800214a:	4b53      	ldr	r3, [pc, #332]	; (8002298 <HAL_RCC_OscConfig+0x26c>)
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002152:	2b00      	cmp	r3, #0
 8002154:	d1f0      	bne.n	8002138 <HAL_RCC_OscConfig+0x10c>
 8002156:	e000      	b.n	800215a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002158:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f003 0302 	and.w	r3, r3, #2
 8002162:	2b00      	cmp	r3, #0
 8002164:	d063      	beq.n	800222e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002166:	4b4c      	ldr	r3, [pc, #304]	; (8002298 <HAL_RCC_OscConfig+0x26c>)
 8002168:	685b      	ldr	r3, [r3, #4]
 800216a:	f003 030c 	and.w	r3, r3, #12
 800216e:	2b00      	cmp	r3, #0
 8002170:	d00b      	beq.n	800218a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002172:	4b49      	ldr	r3, [pc, #292]	; (8002298 <HAL_RCC_OscConfig+0x26c>)
 8002174:	685b      	ldr	r3, [r3, #4]
 8002176:	f003 030c 	and.w	r3, r3, #12
 800217a:	2b08      	cmp	r3, #8
 800217c:	d11c      	bne.n	80021b8 <HAL_RCC_OscConfig+0x18c>
 800217e:	4b46      	ldr	r3, [pc, #280]	; (8002298 <HAL_RCC_OscConfig+0x26c>)
 8002180:	685b      	ldr	r3, [r3, #4]
 8002182:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002186:	2b00      	cmp	r3, #0
 8002188:	d116      	bne.n	80021b8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800218a:	4b43      	ldr	r3, [pc, #268]	; (8002298 <HAL_RCC_OscConfig+0x26c>)
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f003 0302 	and.w	r3, r3, #2
 8002192:	2b00      	cmp	r3, #0
 8002194:	d005      	beq.n	80021a2 <HAL_RCC_OscConfig+0x176>
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	691b      	ldr	r3, [r3, #16]
 800219a:	2b01      	cmp	r3, #1
 800219c:	d001      	beq.n	80021a2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800219e:	2301      	movs	r3, #1
 80021a0:	e1ba      	b.n	8002518 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021a2:	4b3d      	ldr	r3, [pc, #244]	; (8002298 <HAL_RCC_OscConfig+0x26c>)
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	695b      	ldr	r3, [r3, #20]
 80021ae:	00db      	lsls	r3, r3, #3
 80021b0:	4939      	ldr	r1, [pc, #228]	; (8002298 <HAL_RCC_OscConfig+0x26c>)
 80021b2:	4313      	orrs	r3, r2
 80021b4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80021b6:	e03a      	b.n	800222e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	691b      	ldr	r3, [r3, #16]
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d020      	beq.n	8002202 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80021c0:	4b36      	ldr	r3, [pc, #216]	; (800229c <HAL_RCC_OscConfig+0x270>)
 80021c2:	2201      	movs	r2, #1
 80021c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021c6:	f7fe fb97 	bl	80008f8 <HAL_GetTick>
 80021ca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021cc:	e008      	b.n	80021e0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80021ce:	f7fe fb93 	bl	80008f8 <HAL_GetTick>
 80021d2:	4602      	mov	r2, r0
 80021d4:	693b      	ldr	r3, [r7, #16]
 80021d6:	1ad3      	subs	r3, r2, r3
 80021d8:	2b02      	cmp	r3, #2
 80021da:	d901      	bls.n	80021e0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80021dc:	2303      	movs	r3, #3
 80021de:	e19b      	b.n	8002518 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021e0:	4b2d      	ldr	r3, [pc, #180]	; (8002298 <HAL_RCC_OscConfig+0x26c>)
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f003 0302 	and.w	r3, r3, #2
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d0f0      	beq.n	80021ce <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021ec:	4b2a      	ldr	r3, [pc, #168]	; (8002298 <HAL_RCC_OscConfig+0x26c>)
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	695b      	ldr	r3, [r3, #20]
 80021f8:	00db      	lsls	r3, r3, #3
 80021fa:	4927      	ldr	r1, [pc, #156]	; (8002298 <HAL_RCC_OscConfig+0x26c>)
 80021fc:	4313      	orrs	r3, r2
 80021fe:	600b      	str	r3, [r1, #0]
 8002200:	e015      	b.n	800222e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002202:	4b26      	ldr	r3, [pc, #152]	; (800229c <HAL_RCC_OscConfig+0x270>)
 8002204:	2200      	movs	r2, #0
 8002206:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002208:	f7fe fb76 	bl	80008f8 <HAL_GetTick>
 800220c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800220e:	e008      	b.n	8002222 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002210:	f7fe fb72 	bl	80008f8 <HAL_GetTick>
 8002214:	4602      	mov	r2, r0
 8002216:	693b      	ldr	r3, [r7, #16]
 8002218:	1ad3      	subs	r3, r2, r3
 800221a:	2b02      	cmp	r3, #2
 800221c:	d901      	bls.n	8002222 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800221e:	2303      	movs	r3, #3
 8002220:	e17a      	b.n	8002518 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002222:	4b1d      	ldr	r3, [pc, #116]	; (8002298 <HAL_RCC_OscConfig+0x26c>)
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f003 0302 	and.w	r3, r3, #2
 800222a:	2b00      	cmp	r3, #0
 800222c:	d1f0      	bne.n	8002210 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f003 0308 	and.w	r3, r3, #8
 8002236:	2b00      	cmp	r3, #0
 8002238:	d03a      	beq.n	80022b0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	699b      	ldr	r3, [r3, #24]
 800223e:	2b00      	cmp	r3, #0
 8002240:	d019      	beq.n	8002276 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002242:	4b17      	ldr	r3, [pc, #92]	; (80022a0 <HAL_RCC_OscConfig+0x274>)
 8002244:	2201      	movs	r2, #1
 8002246:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002248:	f7fe fb56 	bl	80008f8 <HAL_GetTick>
 800224c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800224e:	e008      	b.n	8002262 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002250:	f7fe fb52 	bl	80008f8 <HAL_GetTick>
 8002254:	4602      	mov	r2, r0
 8002256:	693b      	ldr	r3, [r7, #16]
 8002258:	1ad3      	subs	r3, r2, r3
 800225a:	2b02      	cmp	r3, #2
 800225c:	d901      	bls.n	8002262 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800225e:	2303      	movs	r3, #3
 8002260:	e15a      	b.n	8002518 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002262:	4b0d      	ldr	r3, [pc, #52]	; (8002298 <HAL_RCC_OscConfig+0x26c>)
 8002264:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002266:	f003 0302 	and.w	r3, r3, #2
 800226a:	2b00      	cmp	r3, #0
 800226c:	d0f0      	beq.n	8002250 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800226e:	2001      	movs	r0, #1
 8002270:	f000 faa8 	bl	80027c4 <RCC_Delay>
 8002274:	e01c      	b.n	80022b0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002276:	4b0a      	ldr	r3, [pc, #40]	; (80022a0 <HAL_RCC_OscConfig+0x274>)
 8002278:	2200      	movs	r2, #0
 800227a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800227c:	f7fe fb3c 	bl	80008f8 <HAL_GetTick>
 8002280:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002282:	e00f      	b.n	80022a4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002284:	f7fe fb38 	bl	80008f8 <HAL_GetTick>
 8002288:	4602      	mov	r2, r0
 800228a:	693b      	ldr	r3, [r7, #16]
 800228c:	1ad3      	subs	r3, r2, r3
 800228e:	2b02      	cmp	r3, #2
 8002290:	d908      	bls.n	80022a4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002292:	2303      	movs	r3, #3
 8002294:	e140      	b.n	8002518 <HAL_RCC_OscConfig+0x4ec>
 8002296:	bf00      	nop
 8002298:	40021000 	.word	0x40021000
 800229c:	42420000 	.word	0x42420000
 80022a0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80022a4:	4b9e      	ldr	r3, [pc, #632]	; (8002520 <HAL_RCC_OscConfig+0x4f4>)
 80022a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022a8:	f003 0302 	and.w	r3, r3, #2
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d1e9      	bne.n	8002284 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	f003 0304 	and.w	r3, r3, #4
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	f000 80a6 	beq.w	800240a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80022be:	2300      	movs	r3, #0
 80022c0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80022c2:	4b97      	ldr	r3, [pc, #604]	; (8002520 <HAL_RCC_OscConfig+0x4f4>)
 80022c4:	69db      	ldr	r3, [r3, #28]
 80022c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d10d      	bne.n	80022ea <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80022ce:	4b94      	ldr	r3, [pc, #592]	; (8002520 <HAL_RCC_OscConfig+0x4f4>)
 80022d0:	69db      	ldr	r3, [r3, #28]
 80022d2:	4a93      	ldr	r2, [pc, #588]	; (8002520 <HAL_RCC_OscConfig+0x4f4>)
 80022d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022d8:	61d3      	str	r3, [r2, #28]
 80022da:	4b91      	ldr	r3, [pc, #580]	; (8002520 <HAL_RCC_OscConfig+0x4f4>)
 80022dc:	69db      	ldr	r3, [r3, #28]
 80022de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022e2:	60bb      	str	r3, [r7, #8]
 80022e4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80022e6:	2301      	movs	r3, #1
 80022e8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022ea:	4b8e      	ldr	r3, [pc, #568]	; (8002524 <HAL_RCC_OscConfig+0x4f8>)
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d118      	bne.n	8002328 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80022f6:	4b8b      	ldr	r3, [pc, #556]	; (8002524 <HAL_RCC_OscConfig+0x4f8>)
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	4a8a      	ldr	r2, [pc, #552]	; (8002524 <HAL_RCC_OscConfig+0x4f8>)
 80022fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002300:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002302:	f7fe faf9 	bl	80008f8 <HAL_GetTick>
 8002306:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002308:	e008      	b.n	800231c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800230a:	f7fe faf5 	bl	80008f8 <HAL_GetTick>
 800230e:	4602      	mov	r2, r0
 8002310:	693b      	ldr	r3, [r7, #16]
 8002312:	1ad3      	subs	r3, r2, r3
 8002314:	2b64      	cmp	r3, #100	; 0x64
 8002316:	d901      	bls.n	800231c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002318:	2303      	movs	r3, #3
 800231a:	e0fd      	b.n	8002518 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800231c:	4b81      	ldr	r3, [pc, #516]	; (8002524 <HAL_RCC_OscConfig+0x4f8>)
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002324:	2b00      	cmp	r3, #0
 8002326:	d0f0      	beq.n	800230a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	68db      	ldr	r3, [r3, #12]
 800232c:	2b01      	cmp	r3, #1
 800232e:	d106      	bne.n	800233e <HAL_RCC_OscConfig+0x312>
 8002330:	4b7b      	ldr	r3, [pc, #492]	; (8002520 <HAL_RCC_OscConfig+0x4f4>)
 8002332:	6a1b      	ldr	r3, [r3, #32]
 8002334:	4a7a      	ldr	r2, [pc, #488]	; (8002520 <HAL_RCC_OscConfig+0x4f4>)
 8002336:	f043 0301 	orr.w	r3, r3, #1
 800233a:	6213      	str	r3, [r2, #32]
 800233c:	e02d      	b.n	800239a <HAL_RCC_OscConfig+0x36e>
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	68db      	ldr	r3, [r3, #12]
 8002342:	2b00      	cmp	r3, #0
 8002344:	d10c      	bne.n	8002360 <HAL_RCC_OscConfig+0x334>
 8002346:	4b76      	ldr	r3, [pc, #472]	; (8002520 <HAL_RCC_OscConfig+0x4f4>)
 8002348:	6a1b      	ldr	r3, [r3, #32]
 800234a:	4a75      	ldr	r2, [pc, #468]	; (8002520 <HAL_RCC_OscConfig+0x4f4>)
 800234c:	f023 0301 	bic.w	r3, r3, #1
 8002350:	6213      	str	r3, [r2, #32]
 8002352:	4b73      	ldr	r3, [pc, #460]	; (8002520 <HAL_RCC_OscConfig+0x4f4>)
 8002354:	6a1b      	ldr	r3, [r3, #32]
 8002356:	4a72      	ldr	r2, [pc, #456]	; (8002520 <HAL_RCC_OscConfig+0x4f4>)
 8002358:	f023 0304 	bic.w	r3, r3, #4
 800235c:	6213      	str	r3, [r2, #32]
 800235e:	e01c      	b.n	800239a <HAL_RCC_OscConfig+0x36e>
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	68db      	ldr	r3, [r3, #12]
 8002364:	2b05      	cmp	r3, #5
 8002366:	d10c      	bne.n	8002382 <HAL_RCC_OscConfig+0x356>
 8002368:	4b6d      	ldr	r3, [pc, #436]	; (8002520 <HAL_RCC_OscConfig+0x4f4>)
 800236a:	6a1b      	ldr	r3, [r3, #32]
 800236c:	4a6c      	ldr	r2, [pc, #432]	; (8002520 <HAL_RCC_OscConfig+0x4f4>)
 800236e:	f043 0304 	orr.w	r3, r3, #4
 8002372:	6213      	str	r3, [r2, #32]
 8002374:	4b6a      	ldr	r3, [pc, #424]	; (8002520 <HAL_RCC_OscConfig+0x4f4>)
 8002376:	6a1b      	ldr	r3, [r3, #32]
 8002378:	4a69      	ldr	r2, [pc, #420]	; (8002520 <HAL_RCC_OscConfig+0x4f4>)
 800237a:	f043 0301 	orr.w	r3, r3, #1
 800237e:	6213      	str	r3, [r2, #32]
 8002380:	e00b      	b.n	800239a <HAL_RCC_OscConfig+0x36e>
 8002382:	4b67      	ldr	r3, [pc, #412]	; (8002520 <HAL_RCC_OscConfig+0x4f4>)
 8002384:	6a1b      	ldr	r3, [r3, #32]
 8002386:	4a66      	ldr	r2, [pc, #408]	; (8002520 <HAL_RCC_OscConfig+0x4f4>)
 8002388:	f023 0301 	bic.w	r3, r3, #1
 800238c:	6213      	str	r3, [r2, #32]
 800238e:	4b64      	ldr	r3, [pc, #400]	; (8002520 <HAL_RCC_OscConfig+0x4f4>)
 8002390:	6a1b      	ldr	r3, [r3, #32]
 8002392:	4a63      	ldr	r2, [pc, #396]	; (8002520 <HAL_RCC_OscConfig+0x4f4>)
 8002394:	f023 0304 	bic.w	r3, r3, #4
 8002398:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	68db      	ldr	r3, [r3, #12]
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d015      	beq.n	80023ce <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023a2:	f7fe faa9 	bl	80008f8 <HAL_GetTick>
 80023a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023a8:	e00a      	b.n	80023c0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80023aa:	f7fe faa5 	bl	80008f8 <HAL_GetTick>
 80023ae:	4602      	mov	r2, r0
 80023b0:	693b      	ldr	r3, [r7, #16]
 80023b2:	1ad3      	subs	r3, r2, r3
 80023b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80023b8:	4293      	cmp	r3, r2
 80023ba:	d901      	bls.n	80023c0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80023bc:	2303      	movs	r3, #3
 80023be:	e0ab      	b.n	8002518 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023c0:	4b57      	ldr	r3, [pc, #348]	; (8002520 <HAL_RCC_OscConfig+0x4f4>)
 80023c2:	6a1b      	ldr	r3, [r3, #32]
 80023c4:	f003 0302 	and.w	r3, r3, #2
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d0ee      	beq.n	80023aa <HAL_RCC_OscConfig+0x37e>
 80023cc:	e014      	b.n	80023f8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023ce:	f7fe fa93 	bl	80008f8 <HAL_GetTick>
 80023d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80023d4:	e00a      	b.n	80023ec <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80023d6:	f7fe fa8f 	bl	80008f8 <HAL_GetTick>
 80023da:	4602      	mov	r2, r0
 80023dc:	693b      	ldr	r3, [r7, #16]
 80023de:	1ad3      	subs	r3, r2, r3
 80023e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80023e4:	4293      	cmp	r3, r2
 80023e6:	d901      	bls.n	80023ec <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80023e8:	2303      	movs	r3, #3
 80023ea:	e095      	b.n	8002518 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80023ec:	4b4c      	ldr	r3, [pc, #304]	; (8002520 <HAL_RCC_OscConfig+0x4f4>)
 80023ee:	6a1b      	ldr	r3, [r3, #32]
 80023f0:	f003 0302 	and.w	r3, r3, #2
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d1ee      	bne.n	80023d6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80023f8:	7dfb      	ldrb	r3, [r7, #23]
 80023fa:	2b01      	cmp	r3, #1
 80023fc:	d105      	bne.n	800240a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80023fe:	4b48      	ldr	r3, [pc, #288]	; (8002520 <HAL_RCC_OscConfig+0x4f4>)
 8002400:	69db      	ldr	r3, [r3, #28]
 8002402:	4a47      	ldr	r2, [pc, #284]	; (8002520 <HAL_RCC_OscConfig+0x4f4>)
 8002404:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002408:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	69db      	ldr	r3, [r3, #28]
 800240e:	2b00      	cmp	r3, #0
 8002410:	f000 8081 	beq.w	8002516 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002414:	4b42      	ldr	r3, [pc, #264]	; (8002520 <HAL_RCC_OscConfig+0x4f4>)
 8002416:	685b      	ldr	r3, [r3, #4]
 8002418:	f003 030c 	and.w	r3, r3, #12
 800241c:	2b08      	cmp	r3, #8
 800241e:	d061      	beq.n	80024e4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	69db      	ldr	r3, [r3, #28]
 8002424:	2b02      	cmp	r3, #2
 8002426:	d146      	bne.n	80024b6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002428:	4b3f      	ldr	r3, [pc, #252]	; (8002528 <HAL_RCC_OscConfig+0x4fc>)
 800242a:	2200      	movs	r2, #0
 800242c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800242e:	f7fe fa63 	bl	80008f8 <HAL_GetTick>
 8002432:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002434:	e008      	b.n	8002448 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002436:	f7fe fa5f 	bl	80008f8 <HAL_GetTick>
 800243a:	4602      	mov	r2, r0
 800243c:	693b      	ldr	r3, [r7, #16]
 800243e:	1ad3      	subs	r3, r2, r3
 8002440:	2b02      	cmp	r3, #2
 8002442:	d901      	bls.n	8002448 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002444:	2303      	movs	r3, #3
 8002446:	e067      	b.n	8002518 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002448:	4b35      	ldr	r3, [pc, #212]	; (8002520 <HAL_RCC_OscConfig+0x4f4>)
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002450:	2b00      	cmp	r3, #0
 8002452:	d1f0      	bne.n	8002436 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	6a1b      	ldr	r3, [r3, #32]
 8002458:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800245c:	d108      	bne.n	8002470 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800245e:	4b30      	ldr	r3, [pc, #192]	; (8002520 <HAL_RCC_OscConfig+0x4f4>)
 8002460:	685b      	ldr	r3, [r3, #4]
 8002462:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	689b      	ldr	r3, [r3, #8]
 800246a:	492d      	ldr	r1, [pc, #180]	; (8002520 <HAL_RCC_OscConfig+0x4f4>)
 800246c:	4313      	orrs	r3, r2
 800246e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002470:	4b2b      	ldr	r3, [pc, #172]	; (8002520 <HAL_RCC_OscConfig+0x4f4>)
 8002472:	685b      	ldr	r3, [r3, #4]
 8002474:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	6a19      	ldr	r1, [r3, #32]
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002480:	430b      	orrs	r3, r1
 8002482:	4927      	ldr	r1, [pc, #156]	; (8002520 <HAL_RCC_OscConfig+0x4f4>)
 8002484:	4313      	orrs	r3, r2
 8002486:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002488:	4b27      	ldr	r3, [pc, #156]	; (8002528 <HAL_RCC_OscConfig+0x4fc>)
 800248a:	2201      	movs	r2, #1
 800248c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800248e:	f7fe fa33 	bl	80008f8 <HAL_GetTick>
 8002492:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002494:	e008      	b.n	80024a8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002496:	f7fe fa2f 	bl	80008f8 <HAL_GetTick>
 800249a:	4602      	mov	r2, r0
 800249c:	693b      	ldr	r3, [r7, #16]
 800249e:	1ad3      	subs	r3, r2, r3
 80024a0:	2b02      	cmp	r3, #2
 80024a2:	d901      	bls.n	80024a8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80024a4:	2303      	movs	r3, #3
 80024a6:	e037      	b.n	8002518 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80024a8:	4b1d      	ldr	r3, [pc, #116]	; (8002520 <HAL_RCC_OscConfig+0x4f4>)
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d0f0      	beq.n	8002496 <HAL_RCC_OscConfig+0x46a>
 80024b4:	e02f      	b.n	8002516 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024b6:	4b1c      	ldr	r3, [pc, #112]	; (8002528 <HAL_RCC_OscConfig+0x4fc>)
 80024b8:	2200      	movs	r2, #0
 80024ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024bc:	f7fe fa1c 	bl	80008f8 <HAL_GetTick>
 80024c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80024c2:	e008      	b.n	80024d6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024c4:	f7fe fa18 	bl	80008f8 <HAL_GetTick>
 80024c8:	4602      	mov	r2, r0
 80024ca:	693b      	ldr	r3, [r7, #16]
 80024cc:	1ad3      	subs	r3, r2, r3
 80024ce:	2b02      	cmp	r3, #2
 80024d0:	d901      	bls.n	80024d6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80024d2:	2303      	movs	r3, #3
 80024d4:	e020      	b.n	8002518 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80024d6:	4b12      	ldr	r3, [pc, #72]	; (8002520 <HAL_RCC_OscConfig+0x4f4>)
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d1f0      	bne.n	80024c4 <HAL_RCC_OscConfig+0x498>
 80024e2:	e018      	b.n	8002516 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	69db      	ldr	r3, [r3, #28]
 80024e8:	2b01      	cmp	r3, #1
 80024ea:	d101      	bne.n	80024f0 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80024ec:	2301      	movs	r3, #1
 80024ee:	e013      	b.n	8002518 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80024f0:	4b0b      	ldr	r3, [pc, #44]	; (8002520 <HAL_RCC_OscConfig+0x4f4>)
 80024f2:	685b      	ldr	r3, [r3, #4]
 80024f4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	6a1b      	ldr	r3, [r3, #32]
 8002500:	429a      	cmp	r2, r3
 8002502:	d106      	bne.n	8002512 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800250e:	429a      	cmp	r2, r3
 8002510:	d001      	beq.n	8002516 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002512:	2301      	movs	r3, #1
 8002514:	e000      	b.n	8002518 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8002516:	2300      	movs	r3, #0
}
 8002518:	4618      	mov	r0, r3
 800251a:	3718      	adds	r7, #24
 800251c:	46bd      	mov	sp, r7
 800251e:	bd80      	pop	{r7, pc}
 8002520:	40021000 	.word	0x40021000
 8002524:	40007000 	.word	0x40007000
 8002528:	42420060 	.word	0x42420060

0800252c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800252c:	b580      	push	{r7, lr}
 800252e:	b084      	sub	sp, #16
 8002530:	af00      	add	r7, sp, #0
 8002532:	6078      	str	r0, [r7, #4]
 8002534:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	2b00      	cmp	r3, #0
 800253a:	d101      	bne.n	8002540 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800253c:	2301      	movs	r3, #1
 800253e:	e0d0      	b.n	80026e2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002540:	4b6a      	ldr	r3, [pc, #424]	; (80026ec <HAL_RCC_ClockConfig+0x1c0>)
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f003 0307 	and.w	r3, r3, #7
 8002548:	683a      	ldr	r2, [r7, #0]
 800254a:	429a      	cmp	r2, r3
 800254c:	d910      	bls.n	8002570 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800254e:	4b67      	ldr	r3, [pc, #412]	; (80026ec <HAL_RCC_ClockConfig+0x1c0>)
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f023 0207 	bic.w	r2, r3, #7
 8002556:	4965      	ldr	r1, [pc, #404]	; (80026ec <HAL_RCC_ClockConfig+0x1c0>)
 8002558:	683b      	ldr	r3, [r7, #0]
 800255a:	4313      	orrs	r3, r2
 800255c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800255e:	4b63      	ldr	r3, [pc, #396]	; (80026ec <HAL_RCC_ClockConfig+0x1c0>)
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f003 0307 	and.w	r3, r3, #7
 8002566:	683a      	ldr	r2, [r7, #0]
 8002568:	429a      	cmp	r2, r3
 800256a:	d001      	beq.n	8002570 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800256c:	2301      	movs	r3, #1
 800256e:	e0b8      	b.n	80026e2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f003 0302 	and.w	r3, r3, #2
 8002578:	2b00      	cmp	r3, #0
 800257a:	d020      	beq.n	80025be <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f003 0304 	and.w	r3, r3, #4
 8002584:	2b00      	cmp	r3, #0
 8002586:	d005      	beq.n	8002594 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002588:	4b59      	ldr	r3, [pc, #356]	; (80026f0 <HAL_RCC_ClockConfig+0x1c4>)
 800258a:	685b      	ldr	r3, [r3, #4]
 800258c:	4a58      	ldr	r2, [pc, #352]	; (80026f0 <HAL_RCC_ClockConfig+0x1c4>)
 800258e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002592:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f003 0308 	and.w	r3, r3, #8
 800259c:	2b00      	cmp	r3, #0
 800259e:	d005      	beq.n	80025ac <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80025a0:	4b53      	ldr	r3, [pc, #332]	; (80026f0 <HAL_RCC_ClockConfig+0x1c4>)
 80025a2:	685b      	ldr	r3, [r3, #4]
 80025a4:	4a52      	ldr	r2, [pc, #328]	; (80026f0 <HAL_RCC_ClockConfig+0x1c4>)
 80025a6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80025aa:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80025ac:	4b50      	ldr	r3, [pc, #320]	; (80026f0 <HAL_RCC_ClockConfig+0x1c4>)
 80025ae:	685b      	ldr	r3, [r3, #4]
 80025b0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	689b      	ldr	r3, [r3, #8]
 80025b8:	494d      	ldr	r1, [pc, #308]	; (80026f0 <HAL_RCC_ClockConfig+0x1c4>)
 80025ba:	4313      	orrs	r3, r2
 80025bc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f003 0301 	and.w	r3, r3, #1
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d040      	beq.n	800264c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	685b      	ldr	r3, [r3, #4]
 80025ce:	2b01      	cmp	r3, #1
 80025d0:	d107      	bne.n	80025e2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025d2:	4b47      	ldr	r3, [pc, #284]	; (80026f0 <HAL_RCC_ClockConfig+0x1c4>)
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d115      	bne.n	800260a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80025de:	2301      	movs	r3, #1
 80025e0:	e07f      	b.n	80026e2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	685b      	ldr	r3, [r3, #4]
 80025e6:	2b02      	cmp	r3, #2
 80025e8:	d107      	bne.n	80025fa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80025ea:	4b41      	ldr	r3, [pc, #260]	; (80026f0 <HAL_RCC_ClockConfig+0x1c4>)
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d109      	bne.n	800260a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80025f6:	2301      	movs	r3, #1
 80025f8:	e073      	b.n	80026e2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025fa:	4b3d      	ldr	r3, [pc, #244]	; (80026f0 <HAL_RCC_ClockConfig+0x1c4>)
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f003 0302 	and.w	r3, r3, #2
 8002602:	2b00      	cmp	r3, #0
 8002604:	d101      	bne.n	800260a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002606:	2301      	movs	r3, #1
 8002608:	e06b      	b.n	80026e2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800260a:	4b39      	ldr	r3, [pc, #228]	; (80026f0 <HAL_RCC_ClockConfig+0x1c4>)
 800260c:	685b      	ldr	r3, [r3, #4]
 800260e:	f023 0203 	bic.w	r2, r3, #3
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	685b      	ldr	r3, [r3, #4]
 8002616:	4936      	ldr	r1, [pc, #216]	; (80026f0 <HAL_RCC_ClockConfig+0x1c4>)
 8002618:	4313      	orrs	r3, r2
 800261a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800261c:	f7fe f96c 	bl	80008f8 <HAL_GetTick>
 8002620:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002622:	e00a      	b.n	800263a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002624:	f7fe f968 	bl	80008f8 <HAL_GetTick>
 8002628:	4602      	mov	r2, r0
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	1ad3      	subs	r3, r2, r3
 800262e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002632:	4293      	cmp	r3, r2
 8002634:	d901      	bls.n	800263a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002636:	2303      	movs	r3, #3
 8002638:	e053      	b.n	80026e2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800263a:	4b2d      	ldr	r3, [pc, #180]	; (80026f0 <HAL_RCC_ClockConfig+0x1c4>)
 800263c:	685b      	ldr	r3, [r3, #4]
 800263e:	f003 020c 	and.w	r2, r3, #12
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	685b      	ldr	r3, [r3, #4]
 8002646:	009b      	lsls	r3, r3, #2
 8002648:	429a      	cmp	r2, r3
 800264a:	d1eb      	bne.n	8002624 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800264c:	4b27      	ldr	r3, [pc, #156]	; (80026ec <HAL_RCC_ClockConfig+0x1c0>)
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f003 0307 	and.w	r3, r3, #7
 8002654:	683a      	ldr	r2, [r7, #0]
 8002656:	429a      	cmp	r2, r3
 8002658:	d210      	bcs.n	800267c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800265a:	4b24      	ldr	r3, [pc, #144]	; (80026ec <HAL_RCC_ClockConfig+0x1c0>)
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f023 0207 	bic.w	r2, r3, #7
 8002662:	4922      	ldr	r1, [pc, #136]	; (80026ec <HAL_RCC_ClockConfig+0x1c0>)
 8002664:	683b      	ldr	r3, [r7, #0]
 8002666:	4313      	orrs	r3, r2
 8002668:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800266a:	4b20      	ldr	r3, [pc, #128]	; (80026ec <HAL_RCC_ClockConfig+0x1c0>)
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f003 0307 	and.w	r3, r3, #7
 8002672:	683a      	ldr	r2, [r7, #0]
 8002674:	429a      	cmp	r2, r3
 8002676:	d001      	beq.n	800267c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002678:	2301      	movs	r3, #1
 800267a:	e032      	b.n	80026e2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f003 0304 	and.w	r3, r3, #4
 8002684:	2b00      	cmp	r3, #0
 8002686:	d008      	beq.n	800269a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002688:	4b19      	ldr	r3, [pc, #100]	; (80026f0 <HAL_RCC_ClockConfig+0x1c4>)
 800268a:	685b      	ldr	r3, [r3, #4]
 800268c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	68db      	ldr	r3, [r3, #12]
 8002694:	4916      	ldr	r1, [pc, #88]	; (80026f0 <HAL_RCC_ClockConfig+0x1c4>)
 8002696:	4313      	orrs	r3, r2
 8002698:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f003 0308 	and.w	r3, r3, #8
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d009      	beq.n	80026ba <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80026a6:	4b12      	ldr	r3, [pc, #72]	; (80026f0 <HAL_RCC_ClockConfig+0x1c4>)
 80026a8:	685b      	ldr	r3, [r3, #4]
 80026aa:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	691b      	ldr	r3, [r3, #16]
 80026b2:	00db      	lsls	r3, r3, #3
 80026b4:	490e      	ldr	r1, [pc, #56]	; (80026f0 <HAL_RCC_ClockConfig+0x1c4>)
 80026b6:	4313      	orrs	r3, r2
 80026b8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80026ba:	f000 f821 	bl	8002700 <HAL_RCC_GetSysClockFreq>
 80026be:	4601      	mov	r1, r0
 80026c0:	4b0b      	ldr	r3, [pc, #44]	; (80026f0 <HAL_RCC_ClockConfig+0x1c4>)
 80026c2:	685b      	ldr	r3, [r3, #4]
 80026c4:	091b      	lsrs	r3, r3, #4
 80026c6:	f003 030f 	and.w	r3, r3, #15
 80026ca:	4a0a      	ldr	r2, [pc, #40]	; (80026f4 <HAL_RCC_ClockConfig+0x1c8>)
 80026cc:	5cd3      	ldrb	r3, [r2, r3]
 80026ce:	fa21 f303 	lsr.w	r3, r1, r3
 80026d2:	4a09      	ldr	r2, [pc, #36]	; (80026f8 <HAL_RCC_ClockConfig+0x1cc>)
 80026d4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80026d6:	4b09      	ldr	r3, [pc, #36]	; (80026fc <HAL_RCC_ClockConfig+0x1d0>)
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	4618      	mov	r0, r3
 80026dc:	f7fe f8ca 	bl	8000874 <HAL_InitTick>

  return HAL_OK;
 80026e0:	2300      	movs	r3, #0
}
 80026e2:	4618      	mov	r0, r3
 80026e4:	3710      	adds	r7, #16
 80026e6:	46bd      	mov	sp, r7
 80026e8:	bd80      	pop	{r7, pc}
 80026ea:	bf00      	nop
 80026ec:	40022000 	.word	0x40022000
 80026f0:	40021000 	.word	0x40021000
 80026f4:	08005c44 	.word	0x08005c44
 80026f8:	2000000c 	.word	0x2000000c
 80026fc:	20000010 	.word	0x20000010

08002700 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002700:	b490      	push	{r4, r7}
 8002702:	b08a      	sub	sp, #40	; 0x28
 8002704:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002706:	4b2a      	ldr	r3, [pc, #168]	; (80027b0 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002708:	1d3c      	adds	r4, r7, #4
 800270a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800270c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002710:	4b28      	ldr	r3, [pc, #160]	; (80027b4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002712:	881b      	ldrh	r3, [r3, #0]
 8002714:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002716:	2300      	movs	r3, #0
 8002718:	61fb      	str	r3, [r7, #28]
 800271a:	2300      	movs	r3, #0
 800271c:	61bb      	str	r3, [r7, #24]
 800271e:	2300      	movs	r3, #0
 8002720:	627b      	str	r3, [r7, #36]	; 0x24
 8002722:	2300      	movs	r3, #0
 8002724:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002726:	2300      	movs	r3, #0
 8002728:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800272a:	4b23      	ldr	r3, [pc, #140]	; (80027b8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800272c:	685b      	ldr	r3, [r3, #4]
 800272e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002730:	69fb      	ldr	r3, [r7, #28]
 8002732:	f003 030c 	and.w	r3, r3, #12
 8002736:	2b04      	cmp	r3, #4
 8002738:	d002      	beq.n	8002740 <HAL_RCC_GetSysClockFreq+0x40>
 800273a:	2b08      	cmp	r3, #8
 800273c:	d003      	beq.n	8002746 <HAL_RCC_GetSysClockFreq+0x46>
 800273e:	e02d      	b.n	800279c <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002740:	4b1e      	ldr	r3, [pc, #120]	; (80027bc <HAL_RCC_GetSysClockFreq+0xbc>)
 8002742:	623b      	str	r3, [r7, #32]
      break;
 8002744:	e02d      	b.n	80027a2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002746:	69fb      	ldr	r3, [r7, #28]
 8002748:	0c9b      	lsrs	r3, r3, #18
 800274a:	f003 030f 	and.w	r3, r3, #15
 800274e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002752:	4413      	add	r3, r2
 8002754:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002758:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800275a:	69fb      	ldr	r3, [r7, #28]
 800275c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002760:	2b00      	cmp	r3, #0
 8002762:	d013      	beq.n	800278c <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002764:	4b14      	ldr	r3, [pc, #80]	; (80027b8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002766:	685b      	ldr	r3, [r3, #4]
 8002768:	0c5b      	lsrs	r3, r3, #17
 800276a:	f003 0301 	and.w	r3, r3, #1
 800276e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002772:	4413      	add	r3, r2
 8002774:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002778:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800277a:	697b      	ldr	r3, [r7, #20]
 800277c:	4a0f      	ldr	r2, [pc, #60]	; (80027bc <HAL_RCC_GetSysClockFreq+0xbc>)
 800277e:	fb02 f203 	mul.w	r2, r2, r3
 8002782:	69bb      	ldr	r3, [r7, #24]
 8002784:	fbb2 f3f3 	udiv	r3, r2, r3
 8002788:	627b      	str	r3, [r7, #36]	; 0x24
 800278a:	e004      	b.n	8002796 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800278c:	697b      	ldr	r3, [r7, #20]
 800278e:	4a0c      	ldr	r2, [pc, #48]	; (80027c0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002790:	fb02 f303 	mul.w	r3, r2, r3
 8002794:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002796:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002798:	623b      	str	r3, [r7, #32]
      break;
 800279a:	e002      	b.n	80027a2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800279c:	4b07      	ldr	r3, [pc, #28]	; (80027bc <HAL_RCC_GetSysClockFreq+0xbc>)
 800279e:	623b      	str	r3, [r7, #32]
      break;
 80027a0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80027a2:	6a3b      	ldr	r3, [r7, #32]
}
 80027a4:	4618      	mov	r0, r3
 80027a6:	3728      	adds	r7, #40	; 0x28
 80027a8:	46bd      	mov	sp, r7
 80027aa:	bc90      	pop	{r4, r7}
 80027ac:	4770      	bx	lr
 80027ae:	bf00      	nop
 80027b0:	08005be8 	.word	0x08005be8
 80027b4:	08005bf8 	.word	0x08005bf8
 80027b8:	40021000 	.word	0x40021000
 80027bc:	007a1200 	.word	0x007a1200
 80027c0:	003d0900 	.word	0x003d0900

080027c4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80027c4:	b480      	push	{r7}
 80027c6:	b085      	sub	sp, #20
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80027cc:	4b0a      	ldr	r3, [pc, #40]	; (80027f8 <RCC_Delay+0x34>)
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	4a0a      	ldr	r2, [pc, #40]	; (80027fc <RCC_Delay+0x38>)
 80027d2:	fba2 2303 	umull	r2, r3, r2, r3
 80027d6:	0a5b      	lsrs	r3, r3, #9
 80027d8:	687a      	ldr	r2, [r7, #4]
 80027da:	fb02 f303 	mul.w	r3, r2, r3
 80027de:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80027e0:	bf00      	nop
  }
  while (Delay --);
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	1e5a      	subs	r2, r3, #1
 80027e6:	60fa      	str	r2, [r7, #12]
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d1f9      	bne.n	80027e0 <RCC_Delay+0x1c>
}
 80027ec:	bf00      	nop
 80027ee:	3714      	adds	r7, #20
 80027f0:	46bd      	mov	sp, r7
 80027f2:	bc80      	pop	{r7}
 80027f4:	4770      	bx	lr
 80027f6:	bf00      	nop
 80027f8:	2000000c 	.word	0x2000000c
 80027fc:	10624dd3 	.word	0x10624dd3

08002800 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002800:	b580      	push	{r7, lr}
 8002802:	b086      	sub	sp, #24
 8002804:	af00      	add	r7, sp, #0
 8002806:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002808:	2300      	movs	r3, #0
 800280a:	613b      	str	r3, [r7, #16]
 800280c:	2300      	movs	r3, #0
 800280e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f003 0301 	and.w	r3, r3, #1
 8002818:	2b00      	cmp	r3, #0
 800281a:	d07d      	beq.n	8002918 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 800281c:	2300      	movs	r3, #0
 800281e:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002820:	4b4f      	ldr	r3, [pc, #316]	; (8002960 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002822:	69db      	ldr	r3, [r3, #28]
 8002824:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002828:	2b00      	cmp	r3, #0
 800282a:	d10d      	bne.n	8002848 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800282c:	4b4c      	ldr	r3, [pc, #304]	; (8002960 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800282e:	69db      	ldr	r3, [r3, #28]
 8002830:	4a4b      	ldr	r2, [pc, #300]	; (8002960 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002832:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002836:	61d3      	str	r3, [r2, #28]
 8002838:	4b49      	ldr	r3, [pc, #292]	; (8002960 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800283a:	69db      	ldr	r3, [r3, #28]
 800283c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002840:	60bb      	str	r3, [r7, #8]
 8002842:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002844:	2301      	movs	r3, #1
 8002846:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002848:	4b46      	ldr	r3, [pc, #280]	; (8002964 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002850:	2b00      	cmp	r3, #0
 8002852:	d118      	bne.n	8002886 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002854:	4b43      	ldr	r3, [pc, #268]	; (8002964 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	4a42      	ldr	r2, [pc, #264]	; (8002964 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800285a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800285e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002860:	f7fe f84a 	bl	80008f8 <HAL_GetTick>
 8002864:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002866:	e008      	b.n	800287a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002868:	f7fe f846 	bl	80008f8 <HAL_GetTick>
 800286c:	4602      	mov	r2, r0
 800286e:	693b      	ldr	r3, [r7, #16]
 8002870:	1ad3      	subs	r3, r2, r3
 8002872:	2b64      	cmp	r3, #100	; 0x64
 8002874:	d901      	bls.n	800287a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8002876:	2303      	movs	r3, #3
 8002878:	e06d      	b.n	8002956 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800287a:	4b3a      	ldr	r3, [pc, #232]	; (8002964 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002882:	2b00      	cmp	r3, #0
 8002884:	d0f0      	beq.n	8002868 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002886:	4b36      	ldr	r3, [pc, #216]	; (8002960 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002888:	6a1b      	ldr	r3, [r3, #32]
 800288a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800288e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	2b00      	cmp	r3, #0
 8002894:	d02e      	beq.n	80028f4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	685b      	ldr	r3, [r3, #4]
 800289a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800289e:	68fa      	ldr	r2, [r7, #12]
 80028a0:	429a      	cmp	r2, r3
 80028a2:	d027      	beq.n	80028f4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80028a4:	4b2e      	ldr	r3, [pc, #184]	; (8002960 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80028a6:	6a1b      	ldr	r3, [r3, #32]
 80028a8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80028ac:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80028ae:	4b2e      	ldr	r3, [pc, #184]	; (8002968 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80028b0:	2201      	movs	r2, #1
 80028b2:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80028b4:	4b2c      	ldr	r3, [pc, #176]	; (8002968 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80028b6:	2200      	movs	r2, #0
 80028b8:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80028ba:	4a29      	ldr	r2, [pc, #164]	; (8002960 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	f003 0301 	and.w	r3, r3, #1
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d014      	beq.n	80028f4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028ca:	f7fe f815 	bl	80008f8 <HAL_GetTick>
 80028ce:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028d0:	e00a      	b.n	80028e8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80028d2:	f7fe f811 	bl	80008f8 <HAL_GetTick>
 80028d6:	4602      	mov	r2, r0
 80028d8:	693b      	ldr	r3, [r7, #16]
 80028da:	1ad3      	subs	r3, r2, r3
 80028dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80028e0:	4293      	cmp	r3, r2
 80028e2:	d901      	bls.n	80028e8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80028e4:	2303      	movs	r3, #3
 80028e6:	e036      	b.n	8002956 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028e8:	4b1d      	ldr	r3, [pc, #116]	; (8002960 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80028ea:	6a1b      	ldr	r3, [r3, #32]
 80028ec:	f003 0302 	and.w	r3, r3, #2
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d0ee      	beq.n	80028d2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80028f4:	4b1a      	ldr	r3, [pc, #104]	; (8002960 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80028f6:	6a1b      	ldr	r3, [r3, #32]
 80028f8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	685b      	ldr	r3, [r3, #4]
 8002900:	4917      	ldr	r1, [pc, #92]	; (8002960 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002902:	4313      	orrs	r3, r2
 8002904:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002906:	7dfb      	ldrb	r3, [r7, #23]
 8002908:	2b01      	cmp	r3, #1
 800290a:	d105      	bne.n	8002918 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800290c:	4b14      	ldr	r3, [pc, #80]	; (8002960 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800290e:	69db      	ldr	r3, [r3, #28]
 8002910:	4a13      	ldr	r2, [pc, #76]	; (8002960 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002912:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002916:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f003 0302 	and.w	r3, r3, #2
 8002920:	2b00      	cmp	r3, #0
 8002922:	d008      	beq.n	8002936 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002924:	4b0e      	ldr	r3, [pc, #56]	; (8002960 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002926:	685b      	ldr	r3, [r3, #4]
 8002928:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	689b      	ldr	r3, [r3, #8]
 8002930:	490b      	ldr	r1, [pc, #44]	; (8002960 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002932:	4313      	orrs	r3, r2
 8002934:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f003 0310 	and.w	r3, r3, #16
 800293e:	2b00      	cmp	r3, #0
 8002940:	d008      	beq.n	8002954 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002942:	4b07      	ldr	r3, [pc, #28]	; (8002960 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002944:	685b      	ldr	r3, [r3, #4]
 8002946:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	68db      	ldr	r3, [r3, #12]
 800294e:	4904      	ldr	r1, [pc, #16]	; (8002960 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002950:	4313      	orrs	r3, r2
 8002952:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002954:	2300      	movs	r3, #0
}
 8002956:	4618      	mov	r0, r3
 8002958:	3718      	adds	r7, #24
 800295a:	46bd      	mov	sp, r7
 800295c:	bd80      	pop	{r7, pc}
 800295e:	bf00      	nop
 8002960:	40021000 	.word	0x40021000
 8002964:	40007000 	.word	0x40007000
 8002968:	42420440 	.word	0x42420440

0800296c <USB_CoreInit>:
  * @param  cfg : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800296c:	b084      	sub	sp, #16
 800296e:	b480      	push	{r7}
 8002970:	b083      	sub	sp, #12
 8002972:	af00      	add	r7, sp, #0
 8002974:	6078      	str	r0, [r7, #4]
 8002976:	f107 0014 	add.w	r0, r7, #20
 800297a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800297e:	2300      	movs	r3, #0
}
 8002980:	4618      	mov	r0, r3
 8002982:	370c      	adds	r7, #12
 8002984:	46bd      	mov	sp, r7
 8002986:	bc80      	pop	{r7}
 8002988:	b004      	add	sp, #16
 800298a:	4770      	bx	lr

0800298c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 800298c:	b480      	push	{r7}
 800298e:	b085      	sub	sp, #20
 8002990:	af00      	add	r7, sp, #0
 8002992:	6078      	str	r0, [r7, #4]
  uint16_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8002994:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8002998:	81fb      	strh	r3, [r7, #14]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR |= winterruptmask;
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80029a0:	b29a      	uxth	r2, r3
 80029a2:	89fb      	ldrh	r3, [r7, #14]
 80029a4:	4313      	orrs	r3, r2
 80029a6:	b29a      	uxth	r2, r3
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80029ae:	2300      	movs	r3, #0
}
 80029b0:	4618      	mov	r0, r3
 80029b2:	3714      	adds	r7, #20
 80029b4:	46bd      	mov	sp, r7
 80029b6:	bc80      	pop	{r7}
 80029b8:	4770      	bx	lr

080029ba <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80029ba:	b480      	push	{r7}
 80029bc:	b085      	sub	sp, #20
 80029be:	af00      	add	r7, sp, #0
 80029c0:	6078      	str	r0, [r7, #4]
  uint16_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80029c2:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 80029c6:	81fb      	strh	r3, [r7, #14]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= ~winterruptmask;
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80029ce:	b29b      	uxth	r3, r3
 80029d0:	b21a      	sxth	r2, r3
 80029d2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80029d6:	43db      	mvns	r3, r3
 80029d8:	b21b      	sxth	r3, r3
 80029da:	4013      	ands	r3, r2
 80029dc:	b21b      	sxth	r3, r3
 80029de:	b29a      	uxth	r2, r3
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80029e6:	2300      	movs	r3, #0
}
 80029e8:	4618      	mov	r0, r3
 80029ea:	3714      	adds	r7, #20
 80029ec:	46bd      	mov	sp, r7
 80029ee:	bc80      	pop	{r7}
 80029f0:	4770      	bx	lr

080029f2 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE: Peripheral mode mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 80029f2:	b480      	push	{r7}
 80029f4:	b083      	sub	sp, #12
 80029f6:	af00      	add	r7, sp, #0
 80029f8:	6078      	str	r0, [r7, #4]
 80029fa:	460b      	mov	r3, r1
 80029fc:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80029fe:	2300      	movs	r3, #0
}
 8002a00:	4618      	mov	r0, r3
 8002a02:	370c      	adds	r7, #12
 8002a04:	46bd      	mov	sp, r7
 8002a06:	bc80      	pop	{r7}
 8002a08:	4770      	bx	lr

08002a0a <USB_DevInit>:
  * @param  cfg  : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8002a0a:	b084      	sub	sp, #16
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	b082      	sub	sp, #8
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	6078      	str	r0, [r7, #4]
 8002a14:	f107 0014 	add.w	r0, r7, #20
 8002a18:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /*CNTR_FRES = 1*/
  USBx->CNTR = USB_CNTR_FRES;
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	2201      	movs	r2, #1
 8002a20:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*CNTR_FRES = 0*/
  USBx->CNTR = 0;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	2200      	movs	r2, #0
 8002a28:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*Clear pending interrupts*/
  USBx->ISTR = 0;
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	2200      	movs	r2, #0
 8002a30:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	2200      	movs	r2, #0
 8002a38:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  /* Enable USB Device Interrupt mask */
  (void)USB_EnableGlobalInt(USBx);
 8002a3c:	6878      	ldr	r0, [r7, #4]
 8002a3e:	f7ff ffa5 	bl	800298c <USB_EnableGlobalInt>

  return HAL_OK;
 8002a42:	2300      	movs	r3, #0
}
 8002a44:	4618      	mov	r0, r3
 8002a46:	3708      	adds	r7, #8
 8002a48:	46bd      	mov	sp, r7
 8002a4a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002a4e:	b004      	add	sp, #16
 8002a50:	4770      	bx	lr
	...

08002a54 <USB_ActivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8002a54:	b490      	push	{r4, r7}
 8002a56:	b084      	sub	sp, #16
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	6078      	str	r0, [r7, #4]
 8002a5c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8002a5e:	2300      	movs	r3, #0
 8002a60:	73fb      	strb	r3, [r7, #15]
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8002a62:	687a      	ldr	r2, [r7, #4]
 8002a64:	683b      	ldr	r3, [r7, #0]
 8002a66:	781b      	ldrb	r3, [r3, #0]
 8002a68:	009b      	lsls	r3, r3, #2
 8002a6a:	4413      	add	r3, r2
 8002a6c:	881b      	ldrh	r3, [r3, #0]
 8002a6e:	b29b      	uxth	r3, r3
 8002a70:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8002a74:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a78:	81bb      	strh	r3, [r7, #12]

  /* initialize Endpoint */
  switch (ep->type)
 8002a7a:	683b      	ldr	r3, [r7, #0]
 8002a7c:	78db      	ldrb	r3, [r3, #3]
 8002a7e:	2b03      	cmp	r3, #3
 8002a80:	d819      	bhi.n	8002ab6 <USB_ActivateEndpoint+0x62>
 8002a82:	a201      	add	r2, pc, #4	; (adr r2, 8002a88 <USB_ActivateEndpoint+0x34>)
 8002a84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a88:	08002a99 	.word	0x08002a99
 8002a8c:	08002aad 	.word	0x08002aad
 8002a90:	08002abd 	.word	0x08002abd
 8002a94:	08002aa3 	.word	0x08002aa3
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8002a98:	89bb      	ldrh	r3, [r7, #12]
 8002a9a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002a9e:	81bb      	strh	r3, [r7, #12]
      break;
 8002aa0:	e00d      	b.n	8002abe <USB_ActivateEndpoint+0x6a>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8002aa2:	89bb      	ldrh	r3, [r7, #12]
 8002aa4:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8002aa8:	81bb      	strh	r3, [r7, #12]
      break;
 8002aaa:	e008      	b.n	8002abe <USB_ActivateEndpoint+0x6a>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8002aac:	89bb      	ldrh	r3, [r7, #12]
 8002aae:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002ab2:	81bb      	strh	r3, [r7, #12]
      break;
 8002ab4:	e003      	b.n	8002abe <USB_ActivateEndpoint+0x6a>

    default:
      ret = HAL_ERROR;
 8002ab6:	2301      	movs	r3, #1
 8002ab8:	73fb      	strb	r3, [r7, #15]
      break;
 8002aba:	e000      	b.n	8002abe <USB_ActivateEndpoint+0x6a>
      break;
 8002abc:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX);
 8002abe:	687a      	ldr	r2, [r7, #4]
 8002ac0:	683b      	ldr	r3, [r7, #0]
 8002ac2:	781b      	ldrb	r3, [r3, #0]
 8002ac4:	009b      	lsls	r3, r3, #2
 8002ac6:	441a      	add	r2, r3
 8002ac8:	89bb      	ldrh	r3, [r7, #12]
 8002aca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002ace:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002ad2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002ad6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002ada:	b29b      	uxth	r3, r3
 8002adc:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8002ade:	687a      	ldr	r2, [r7, #4]
 8002ae0:	683b      	ldr	r3, [r7, #0]
 8002ae2:	781b      	ldrb	r3, [r3, #0]
 8002ae4:	009b      	lsls	r3, r3, #2
 8002ae6:	4413      	add	r3, r2
 8002ae8:	881b      	ldrh	r3, [r3, #0]
 8002aea:	b29b      	uxth	r3, r3
 8002aec:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002af0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002af4:	b29a      	uxth	r2, r3
 8002af6:	683b      	ldr	r3, [r7, #0]
 8002af8:	781b      	ldrb	r3, [r3, #0]
 8002afa:	b29b      	uxth	r3, r3
 8002afc:	4313      	orrs	r3, r2
 8002afe:	b29c      	uxth	r4, r3
 8002b00:	687a      	ldr	r2, [r7, #4]
 8002b02:	683b      	ldr	r3, [r7, #0]
 8002b04:	781b      	ldrb	r3, [r3, #0]
 8002b06:	009b      	lsls	r3, r3, #2
 8002b08:	441a      	add	r2, r3
 8002b0a:	4b8a      	ldr	r3, [pc, #552]	; (8002d34 <USB_ActivateEndpoint+0x2e0>)
 8002b0c:	4323      	orrs	r3, r4
 8002b0e:	b29b      	uxth	r3, r3
 8002b10:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8002b12:	683b      	ldr	r3, [r7, #0]
 8002b14:	7b1b      	ldrb	r3, [r3, #12]
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	f040 8112 	bne.w	8002d40 <USB_ActivateEndpoint+0x2ec>
  {
    if (ep->is_in != 0U)
 8002b1c:	683b      	ldr	r3, [r7, #0]
 8002b1e:	785b      	ldrb	r3, [r3, #1]
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d067      	beq.n	8002bf4 <USB_ActivateEndpoint+0x1a0>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8002b24:	687c      	ldr	r4, [r7, #4]
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002b2c:	b29b      	uxth	r3, r3
 8002b2e:	441c      	add	r4, r3
 8002b30:	683b      	ldr	r3, [r7, #0]
 8002b32:	781b      	ldrb	r3, [r3, #0]
 8002b34:	011b      	lsls	r3, r3, #4
 8002b36:	4423      	add	r3, r4
 8002b38:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002b3c:	461c      	mov	r4, r3
 8002b3e:	683b      	ldr	r3, [r7, #0]
 8002b40:	88db      	ldrh	r3, [r3, #6]
 8002b42:	085b      	lsrs	r3, r3, #1
 8002b44:	b29b      	uxth	r3, r3
 8002b46:	005b      	lsls	r3, r3, #1
 8002b48:	b29b      	uxth	r3, r3
 8002b4a:	8023      	strh	r3, [r4, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8002b4c:	687a      	ldr	r2, [r7, #4]
 8002b4e:	683b      	ldr	r3, [r7, #0]
 8002b50:	781b      	ldrb	r3, [r3, #0]
 8002b52:	009b      	lsls	r3, r3, #2
 8002b54:	4413      	add	r3, r2
 8002b56:	881b      	ldrh	r3, [r3, #0]
 8002b58:	b29c      	uxth	r4, r3
 8002b5a:	4623      	mov	r3, r4
 8002b5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d014      	beq.n	8002b8e <USB_ActivateEndpoint+0x13a>
 8002b64:	687a      	ldr	r2, [r7, #4]
 8002b66:	683b      	ldr	r3, [r7, #0]
 8002b68:	781b      	ldrb	r3, [r3, #0]
 8002b6a:	009b      	lsls	r3, r3, #2
 8002b6c:	4413      	add	r3, r2
 8002b6e:	881b      	ldrh	r3, [r3, #0]
 8002b70:	b29b      	uxth	r3, r3
 8002b72:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002b76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b7a:	b29c      	uxth	r4, r3
 8002b7c:	687a      	ldr	r2, [r7, #4]
 8002b7e:	683b      	ldr	r3, [r7, #0]
 8002b80:	781b      	ldrb	r3, [r3, #0]
 8002b82:	009b      	lsls	r3, r3, #2
 8002b84:	441a      	add	r2, r3
 8002b86:	4b6c      	ldr	r3, [pc, #432]	; (8002d38 <USB_ActivateEndpoint+0x2e4>)
 8002b88:	4323      	orrs	r3, r4
 8002b8a:	b29b      	uxth	r3, r3
 8002b8c:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8002b8e:	683b      	ldr	r3, [r7, #0]
 8002b90:	78db      	ldrb	r3, [r3, #3]
 8002b92:	2b01      	cmp	r3, #1
 8002b94:	d018      	beq.n	8002bc8 <USB_ActivateEndpoint+0x174>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8002b96:	687a      	ldr	r2, [r7, #4]
 8002b98:	683b      	ldr	r3, [r7, #0]
 8002b9a:	781b      	ldrb	r3, [r3, #0]
 8002b9c:	009b      	lsls	r3, r3, #2
 8002b9e:	4413      	add	r3, r2
 8002ba0:	881b      	ldrh	r3, [r3, #0]
 8002ba2:	b29b      	uxth	r3, r3
 8002ba4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002ba8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002bac:	b29c      	uxth	r4, r3
 8002bae:	f084 0320 	eor.w	r3, r4, #32
 8002bb2:	b29c      	uxth	r4, r3
 8002bb4:	687a      	ldr	r2, [r7, #4]
 8002bb6:	683b      	ldr	r3, [r7, #0]
 8002bb8:	781b      	ldrb	r3, [r3, #0]
 8002bba:	009b      	lsls	r3, r3, #2
 8002bbc:	441a      	add	r2, r3
 8002bbe:	4b5d      	ldr	r3, [pc, #372]	; (8002d34 <USB_ActivateEndpoint+0x2e0>)
 8002bc0:	4323      	orrs	r3, r4
 8002bc2:	b29b      	uxth	r3, r3
 8002bc4:	8013      	strh	r3, [r2, #0]
 8002bc6:	e22b      	b.n	8003020 <USB_ActivateEndpoint+0x5cc>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8002bc8:	687a      	ldr	r2, [r7, #4]
 8002bca:	683b      	ldr	r3, [r7, #0]
 8002bcc:	781b      	ldrb	r3, [r3, #0]
 8002bce:	009b      	lsls	r3, r3, #2
 8002bd0:	4413      	add	r3, r2
 8002bd2:	881b      	ldrh	r3, [r3, #0]
 8002bd4:	b29b      	uxth	r3, r3
 8002bd6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002bda:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002bde:	b29c      	uxth	r4, r3
 8002be0:	687a      	ldr	r2, [r7, #4]
 8002be2:	683b      	ldr	r3, [r7, #0]
 8002be4:	781b      	ldrb	r3, [r3, #0]
 8002be6:	009b      	lsls	r3, r3, #2
 8002be8:	441a      	add	r2, r3
 8002bea:	4b52      	ldr	r3, [pc, #328]	; (8002d34 <USB_ActivateEndpoint+0x2e0>)
 8002bec:	4323      	orrs	r3, r4
 8002bee:	b29b      	uxth	r3, r3
 8002bf0:	8013      	strh	r3, [r2, #0]
 8002bf2:	e215      	b.n	8003020 <USB_ActivateEndpoint+0x5cc>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8002bf4:	687c      	ldr	r4, [r7, #4]
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002bfc:	b29b      	uxth	r3, r3
 8002bfe:	441c      	add	r4, r3
 8002c00:	683b      	ldr	r3, [r7, #0]
 8002c02:	781b      	ldrb	r3, [r3, #0]
 8002c04:	011b      	lsls	r3, r3, #4
 8002c06:	4423      	add	r3, r4
 8002c08:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8002c0c:	461c      	mov	r4, r3
 8002c0e:	683b      	ldr	r3, [r7, #0]
 8002c10:	88db      	ldrh	r3, [r3, #6]
 8002c12:	085b      	lsrs	r3, r3, #1
 8002c14:	b29b      	uxth	r3, r3
 8002c16:	005b      	lsls	r3, r3, #1
 8002c18:	b29b      	uxth	r3, r3
 8002c1a:	8023      	strh	r3, [r4, #0]
      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8002c1c:	687c      	ldr	r4, [r7, #4]
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002c24:	b29b      	uxth	r3, r3
 8002c26:	441c      	add	r4, r3
 8002c28:	683b      	ldr	r3, [r7, #0]
 8002c2a:	781b      	ldrb	r3, [r3, #0]
 8002c2c:	011b      	lsls	r3, r3, #4
 8002c2e:	4423      	add	r3, r4
 8002c30:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002c34:	461c      	mov	r4, r3
 8002c36:	683b      	ldr	r3, [r7, #0]
 8002c38:	691b      	ldr	r3, [r3, #16]
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d10e      	bne.n	8002c5c <USB_ActivateEndpoint+0x208>
 8002c3e:	8823      	ldrh	r3, [r4, #0]
 8002c40:	b29b      	uxth	r3, r3
 8002c42:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002c46:	b29b      	uxth	r3, r3
 8002c48:	8023      	strh	r3, [r4, #0]
 8002c4a:	8823      	ldrh	r3, [r4, #0]
 8002c4c:	b29b      	uxth	r3, r3
 8002c4e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002c52:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002c56:	b29b      	uxth	r3, r3
 8002c58:	8023      	strh	r3, [r4, #0]
 8002c5a:	e02d      	b.n	8002cb8 <USB_ActivateEndpoint+0x264>
 8002c5c:	683b      	ldr	r3, [r7, #0]
 8002c5e:	691b      	ldr	r3, [r3, #16]
 8002c60:	2b3e      	cmp	r3, #62	; 0x3e
 8002c62:	d812      	bhi.n	8002c8a <USB_ActivateEndpoint+0x236>
 8002c64:	683b      	ldr	r3, [r7, #0]
 8002c66:	691b      	ldr	r3, [r3, #16]
 8002c68:	085b      	lsrs	r3, r3, #1
 8002c6a:	60bb      	str	r3, [r7, #8]
 8002c6c:	683b      	ldr	r3, [r7, #0]
 8002c6e:	691b      	ldr	r3, [r3, #16]
 8002c70:	f003 0301 	and.w	r3, r3, #1
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d002      	beq.n	8002c7e <USB_ActivateEndpoint+0x22a>
 8002c78:	68bb      	ldr	r3, [r7, #8]
 8002c7a:	3301      	adds	r3, #1
 8002c7c:	60bb      	str	r3, [r7, #8]
 8002c7e:	68bb      	ldr	r3, [r7, #8]
 8002c80:	b29b      	uxth	r3, r3
 8002c82:	029b      	lsls	r3, r3, #10
 8002c84:	b29b      	uxth	r3, r3
 8002c86:	8023      	strh	r3, [r4, #0]
 8002c88:	e016      	b.n	8002cb8 <USB_ActivateEndpoint+0x264>
 8002c8a:	683b      	ldr	r3, [r7, #0]
 8002c8c:	691b      	ldr	r3, [r3, #16]
 8002c8e:	095b      	lsrs	r3, r3, #5
 8002c90:	60bb      	str	r3, [r7, #8]
 8002c92:	683b      	ldr	r3, [r7, #0]
 8002c94:	691b      	ldr	r3, [r3, #16]
 8002c96:	f003 031f 	and.w	r3, r3, #31
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d102      	bne.n	8002ca4 <USB_ActivateEndpoint+0x250>
 8002c9e:	68bb      	ldr	r3, [r7, #8]
 8002ca0:	3b01      	subs	r3, #1
 8002ca2:	60bb      	str	r3, [r7, #8]
 8002ca4:	68bb      	ldr	r3, [r7, #8]
 8002ca6:	b29b      	uxth	r3, r3
 8002ca8:	029b      	lsls	r3, r3, #10
 8002caa:	b29b      	uxth	r3, r3
 8002cac:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002cb0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002cb4:	b29b      	uxth	r3, r3
 8002cb6:	8023      	strh	r3, [r4, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8002cb8:	687a      	ldr	r2, [r7, #4]
 8002cba:	683b      	ldr	r3, [r7, #0]
 8002cbc:	781b      	ldrb	r3, [r3, #0]
 8002cbe:	009b      	lsls	r3, r3, #2
 8002cc0:	4413      	add	r3, r2
 8002cc2:	881b      	ldrh	r3, [r3, #0]
 8002cc4:	b29c      	uxth	r4, r3
 8002cc6:	4623      	mov	r3, r4
 8002cc8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d014      	beq.n	8002cfa <USB_ActivateEndpoint+0x2a6>
 8002cd0:	687a      	ldr	r2, [r7, #4]
 8002cd2:	683b      	ldr	r3, [r7, #0]
 8002cd4:	781b      	ldrb	r3, [r3, #0]
 8002cd6:	009b      	lsls	r3, r3, #2
 8002cd8:	4413      	add	r3, r2
 8002cda:	881b      	ldrh	r3, [r3, #0]
 8002cdc:	b29b      	uxth	r3, r3
 8002cde:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002ce2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ce6:	b29c      	uxth	r4, r3
 8002ce8:	687a      	ldr	r2, [r7, #4]
 8002cea:	683b      	ldr	r3, [r7, #0]
 8002cec:	781b      	ldrb	r3, [r3, #0]
 8002cee:	009b      	lsls	r3, r3, #2
 8002cf0:	441a      	add	r2, r3
 8002cf2:	4b12      	ldr	r3, [pc, #72]	; (8002d3c <USB_ActivateEndpoint+0x2e8>)
 8002cf4:	4323      	orrs	r3, r4
 8002cf6:	b29b      	uxth	r3, r3
 8002cf8:	8013      	strh	r3, [r2, #0]
      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8002cfa:	687a      	ldr	r2, [r7, #4]
 8002cfc:	683b      	ldr	r3, [r7, #0]
 8002cfe:	781b      	ldrb	r3, [r3, #0]
 8002d00:	009b      	lsls	r3, r3, #2
 8002d02:	4413      	add	r3, r2
 8002d04:	881b      	ldrh	r3, [r3, #0]
 8002d06:	b29b      	uxth	r3, r3
 8002d08:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002d0c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d10:	b29c      	uxth	r4, r3
 8002d12:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8002d16:	b29c      	uxth	r4, r3
 8002d18:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8002d1c:	b29c      	uxth	r4, r3
 8002d1e:	687a      	ldr	r2, [r7, #4]
 8002d20:	683b      	ldr	r3, [r7, #0]
 8002d22:	781b      	ldrb	r3, [r3, #0]
 8002d24:	009b      	lsls	r3, r3, #2
 8002d26:	441a      	add	r2, r3
 8002d28:	4b02      	ldr	r3, [pc, #8]	; (8002d34 <USB_ActivateEndpoint+0x2e0>)
 8002d2a:	4323      	orrs	r3, r4
 8002d2c:	b29b      	uxth	r3, r3
 8002d2e:	8013      	strh	r3, [r2, #0]
 8002d30:	e176      	b.n	8003020 <USB_ActivateEndpoint+0x5cc>
 8002d32:	bf00      	nop
 8002d34:	ffff8080 	.word	0xffff8080
 8002d38:	ffff80c0 	.word	0xffff80c0
 8002d3c:	ffffc080 	.word	0xffffc080
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8002d40:	687a      	ldr	r2, [r7, #4]
 8002d42:	683b      	ldr	r3, [r7, #0]
 8002d44:	781b      	ldrb	r3, [r3, #0]
 8002d46:	009b      	lsls	r3, r3, #2
 8002d48:	4413      	add	r3, r2
 8002d4a:	881b      	ldrh	r3, [r3, #0]
 8002d4c:	b29b      	uxth	r3, r3
 8002d4e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002d52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d56:	b29c      	uxth	r4, r3
 8002d58:	687a      	ldr	r2, [r7, #4]
 8002d5a:	683b      	ldr	r3, [r7, #0]
 8002d5c:	781b      	ldrb	r3, [r3, #0]
 8002d5e:	009b      	lsls	r3, r3, #2
 8002d60:	441a      	add	r2, r3
 8002d62:	4b96      	ldr	r3, [pc, #600]	; (8002fbc <USB_ActivateEndpoint+0x568>)
 8002d64:	4323      	orrs	r3, r4
 8002d66:	b29b      	uxth	r3, r3
 8002d68:	8013      	strh	r3, [r2, #0]
    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8002d6a:	687c      	ldr	r4, [r7, #4]
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002d72:	b29b      	uxth	r3, r3
 8002d74:	441c      	add	r4, r3
 8002d76:	683b      	ldr	r3, [r7, #0]
 8002d78:	781b      	ldrb	r3, [r3, #0]
 8002d7a:	011b      	lsls	r3, r3, #4
 8002d7c:	4423      	add	r3, r4
 8002d7e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002d82:	461c      	mov	r4, r3
 8002d84:	683b      	ldr	r3, [r7, #0]
 8002d86:	891b      	ldrh	r3, [r3, #8]
 8002d88:	085b      	lsrs	r3, r3, #1
 8002d8a:	b29b      	uxth	r3, r3
 8002d8c:	005b      	lsls	r3, r3, #1
 8002d8e:	b29b      	uxth	r3, r3
 8002d90:	8023      	strh	r3, [r4, #0]
 8002d92:	687c      	ldr	r4, [r7, #4]
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002d9a:	b29b      	uxth	r3, r3
 8002d9c:	441c      	add	r4, r3
 8002d9e:	683b      	ldr	r3, [r7, #0]
 8002da0:	781b      	ldrb	r3, [r3, #0]
 8002da2:	011b      	lsls	r3, r3, #4
 8002da4:	4423      	add	r3, r4
 8002da6:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8002daa:	461c      	mov	r4, r3
 8002dac:	683b      	ldr	r3, [r7, #0]
 8002dae:	895b      	ldrh	r3, [r3, #10]
 8002db0:	085b      	lsrs	r3, r3, #1
 8002db2:	b29b      	uxth	r3, r3
 8002db4:	005b      	lsls	r3, r3, #1
 8002db6:	b29b      	uxth	r3, r3
 8002db8:	8023      	strh	r3, [r4, #0]

    if (ep->is_in == 0U)
 8002dba:	683b      	ldr	r3, [r7, #0]
 8002dbc:	785b      	ldrb	r3, [r3, #1]
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	f040 8088 	bne.w	8002ed4 <USB_ActivateEndpoint+0x480>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8002dc4:	687a      	ldr	r2, [r7, #4]
 8002dc6:	683b      	ldr	r3, [r7, #0]
 8002dc8:	781b      	ldrb	r3, [r3, #0]
 8002dca:	009b      	lsls	r3, r3, #2
 8002dcc:	4413      	add	r3, r2
 8002dce:	881b      	ldrh	r3, [r3, #0]
 8002dd0:	b29c      	uxth	r4, r3
 8002dd2:	4623      	mov	r3, r4
 8002dd4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d014      	beq.n	8002e06 <USB_ActivateEndpoint+0x3b2>
 8002ddc:	687a      	ldr	r2, [r7, #4]
 8002dde:	683b      	ldr	r3, [r7, #0]
 8002de0:	781b      	ldrb	r3, [r3, #0]
 8002de2:	009b      	lsls	r3, r3, #2
 8002de4:	4413      	add	r3, r2
 8002de6:	881b      	ldrh	r3, [r3, #0]
 8002de8:	b29b      	uxth	r3, r3
 8002dea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002dee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002df2:	b29c      	uxth	r4, r3
 8002df4:	687a      	ldr	r2, [r7, #4]
 8002df6:	683b      	ldr	r3, [r7, #0]
 8002df8:	781b      	ldrb	r3, [r3, #0]
 8002dfa:	009b      	lsls	r3, r3, #2
 8002dfc:	441a      	add	r2, r3
 8002dfe:	4b70      	ldr	r3, [pc, #448]	; (8002fc0 <USB_ActivateEndpoint+0x56c>)
 8002e00:	4323      	orrs	r3, r4
 8002e02:	b29b      	uxth	r3, r3
 8002e04:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8002e06:	687a      	ldr	r2, [r7, #4]
 8002e08:	683b      	ldr	r3, [r7, #0]
 8002e0a:	781b      	ldrb	r3, [r3, #0]
 8002e0c:	009b      	lsls	r3, r3, #2
 8002e0e:	4413      	add	r3, r2
 8002e10:	881b      	ldrh	r3, [r3, #0]
 8002e12:	b29c      	uxth	r4, r3
 8002e14:	4623      	mov	r3, r4
 8002e16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d014      	beq.n	8002e48 <USB_ActivateEndpoint+0x3f4>
 8002e1e:	687a      	ldr	r2, [r7, #4]
 8002e20:	683b      	ldr	r3, [r7, #0]
 8002e22:	781b      	ldrb	r3, [r3, #0]
 8002e24:	009b      	lsls	r3, r3, #2
 8002e26:	4413      	add	r3, r2
 8002e28:	881b      	ldrh	r3, [r3, #0]
 8002e2a:	b29b      	uxth	r3, r3
 8002e2c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002e30:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e34:	b29c      	uxth	r4, r3
 8002e36:	687a      	ldr	r2, [r7, #4]
 8002e38:	683b      	ldr	r3, [r7, #0]
 8002e3a:	781b      	ldrb	r3, [r3, #0]
 8002e3c:	009b      	lsls	r3, r3, #2
 8002e3e:	441a      	add	r2, r3
 8002e40:	4b60      	ldr	r3, [pc, #384]	; (8002fc4 <USB_ActivateEndpoint+0x570>)
 8002e42:	4323      	orrs	r3, r4
 8002e44:	b29b      	uxth	r3, r3
 8002e46:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out */
      PCD_TX_DTOG(USBx, ep->num);
 8002e48:	687a      	ldr	r2, [r7, #4]
 8002e4a:	683b      	ldr	r3, [r7, #0]
 8002e4c:	781b      	ldrb	r3, [r3, #0]
 8002e4e:	009b      	lsls	r3, r3, #2
 8002e50:	4413      	add	r3, r2
 8002e52:	881b      	ldrh	r3, [r3, #0]
 8002e54:	b29b      	uxth	r3, r3
 8002e56:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002e5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e5e:	b29c      	uxth	r4, r3
 8002e60:	687a      	ldr	r2, [r7, #4]
 8002e62:	683b      	ldr	r3, [r7, #0]
 8002e64:	781b      	ldrb	r3, [r3, #0]
 8002e66:	009b      	lsls	r3, r3, #2
 8002e68:	441a      	add	r2, r3
 8002e6a:	4b56      	ldr	r3, [pc, #344]	; (8002fc4 <USB_ActivateEndpoint+0x570>)
 8002e6c:	4323      	orrs	r3, r4
 8002e6e:	b29b      	uxth	r3, r3
 8002e70:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8002e72:	687a      	ldr	r2, [r7, #4]
 8002e74:	683b      	ldr	r3, [r7, #0]
 8002e76:	781b      	ldrb	r3, [r3, #0]
 8002e78:	009b      	lsls	r3, r3, #2
 8002e7a:	4413      	add	r3, r2
 8002e7c:	881b      	ldrh	r3, [r3, #0]
 8002e7e:	b29b      	uxth	r3, r3
 8002e80:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002e84:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e88:	b29c      	uxth	r4, r3
 8002e8a:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8002e8e:	b29c      	uxth	r4, r3
 8002e90:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8002e94:	b29c      	uxth	r4, r3
 8002e96:	687a      	ldr	r2, [r7, #4]
 8002e98:	683b      	ldr	r3, [r7, #0]
 8002e9a:	781b      	ldrb	r3, [r3, #0]
 8002e9c:	009b      	lsls	r3, r3, #2
 8002e9e:	441a      	add	r2, r3
 8002ea0:	4b49      	ldr	r3, [pc, #292]	; (8002fc8 <USB_ActivateEndpoint+0x574>)
 8002ea2:	4323      	orrs	r3, r4
 8002ea4:	b29b      	uxth	r3, r3
 8002ea6:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8002ea8:	687a      	ldr	r2, [r7, #4]
 8002eaa:	683b      	ldr	r3, [r7, #0]
 8002eac:	781b      	ldrb	r3, [r3, #0]
 8002eae:	009b      	lsls	r3, r3, #2
 8002eb0:	4413      	add	r3, r2
 8002eb2:	881b      	ldrh	r3, [r3, #0]
 8002eb4:	b29b      	uxth	r3, r3
 8002eb6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002eba:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002ebe:	b29c      	uxth	r4, r3
 8002ec0:	687a      	ldr	r2, [r7, #4]
 8002ec2:	683b      	ldr	r3, [r7, #0]
 8002ec4:	781b      	ldrb	r3, [r3, #0]
 8002ec6:	009b      	lsls	r3, r3, #2
 8002ec8:	441a      	add	r2, r3
 8002eca:	4b3f      	ldr	r3, [pc, #252]	; (8002fc8 <USB_ActivateEndpoint+0x574>)
 8002ecc:	4323      	orrs	r3, r4
 8002ece:	b29b      	uxth	r3, r3
 8002ed0:	8013      	strh	r3, [r2, #0]
 8002ed2:	e0a5      	b.n	8003020 <USB_ActivateEndpoint+0x5cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8002ed4:	687a      	ldr	r2, [r7, #4]
 8002ed6:	683b      	ldr	r3, [r7, #0]
 8002ed8:	781b      	ldrb	r3, [r3, #0]
 8002eda:	009b      	lsls	r3, r3, #2
 8002edc:	4413      	add	r3, r2
 8002ede:	881b      	ldrh	r3, [r3, #0]
 8002ee0:	b29c      	uxth	r4, r3
 8002ee2:	4623      	mov	r3, r4
 8002ee4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d014      	beq.n	8002f16 <USB_ActivateEndpoint+0x4c2>
 8002eec:	687a      	ldr	r2, [r7, #4]
 8002eee:	683b      	ldr	r3, [r7, #0]
 8002ef0:	781b      	ldrb	r3, [r3, #0]
 8002ef2:	009b      	lsls	r3, r3, #2
 8002ef4:	4413      	add	r3, r2
 8002ef6:	881b      	ldrh	r3, [r3, #0]
 8002ef8:	b29b      	uxth	r3, r3
 8002efa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002efe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f02:	b29c      	uxth	r4, r3
 8002f04:	687a      	ldr	r2, [r7, #4]
 8002f06:	683b      	ldr	r3, [r7, #0]
 8002f08:	781b      	ldrb	r3, [r3, #0]
 8002f0a:	009b      	lsls	r3, r3, #2
 8002f0c:	441a      	add	r2, r3
 8002f0e:	4b2c      	ldr	r3, [pc, #176]	; (8002fc0 <USB_ActivateEndpoint+0x56c>)
 8002f10:	4323      	orrs	r3, r4
 8002f12:	b29b      	uxth	r3, r3
 8002f14:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8002f16:	687a      	ldr	r2, [r7, #4]
 8002f18:	683b      	ldr	r3, [r7, #0]
 8002f1a:	781b      	ldrb	r3, [r3, #0]
 8002f1c:	009b      	lsls	r3, r3, #2
 8002f1e:	4413      	add	r3, r2
 8002f20:	881b      	ldrh	r3, [r3, #0]
 8002f22:	b29c      	uxth	r4, r3
 8002f24:	4623      	mov	r3, r4
 8002f26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d014      	beq.n	8002f58 <USB_ActivateEndpoint+0x504>
 8002f2e:	687a      	ldr	r2, [r7, #4]
 8002f30:	683b      	ldr	r3, [r7, #0]
 8002f32:	781b      	ldrb	r3, [r3, #0]
 8002f34:	009b      	lsls	r3, r3, #2
 8002f36:	4413      	add	r3, r2
 8002f38:	881b      	ldrh	r3, [r3, #0]
 8002f3a:	b29b      	uxth	r3, r3
 8002f3c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002f40:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f44:	b29c      	uxth	r4, r3
 8002f46:	687a      	ldr	r2, [r7, #4]
 8002f48:	683b      	ldr	r3, [r7, #0]
 8002f4a:	781b      	ldrb	r3, [r3, #0]
 8002f4c:	009b      	lsls	r3, r3, #2
 8002f4e:	441a      	add	r2, r3
 8002f50:	4b1c      	ldr	r3, [pc, #112]	; (8002fc4 <USB_ActivateEndpoint+0x570>)
 8002f52:	4323      	orrs	r3, r4
 8002f54:	b29b      	uxth	r3, r3
 8002f56:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8002f58:	687a      	ldr	r2, [r7, #4]
 8002f5a:	683b      	ldr	r3, [r7, #0]
 8002f5c:	781b      	ldrb	r3, [r3, #0]
 8002f5e:	009b      	lsls	r3, r3, #2
 8002f60:	4413      	add	r3, r2
 8002f62:	881b      	ldrh	r3, [r3, #0]
 8002f64:	b29b      	uxth	r3, r3
 8002f66:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002f6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f6e:	b29c      	uxth	r4, r3
 8002f70:	687a      	ldr	r2, [r7, #4]
 8002f72:	683b      	ldr	r3, [r7, #0]
 8002f74:	781b      	ldrb	r3, [r3, #0]
 8002f76:	009b      	lsls	r3, r3, #2
 8002f78:	441a      	add	r2, r3
 8002f7a:	4b11      	ldr	r3, [pc, #68]	; (8002fc0 <USB_ActivateEndpoint+0x56c>)
 8002f7c:	4323      	orrs	r3, r4
 8002f7e:	b29b      	uxth	r3, r3
 8002f80:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8002f82:	683b      	ldr	r3, [r7, #0]
 8002f84:	78db      	ldrb	r3, [r3, #3]
 8002f86:	2b01      	cmp	r3, #1
 8002f88:	d020      	beq.n	8002fcc <USB_ActivateEndpoint+0x578>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8002f8a:	687a      	ldr	r2, [r7, #4]
 8002f8c:	683b      	ldr	r3, [r7, #0]
 8002f8e:	781b      	ldrb	r3, [r3, #0]
 8002f90:	009b      	lsls	r3, r3, #2
 8002f92:	4413      	add	r3, r2
 8002f94:	881b      	ldrh	r3, [r3, #0]
 8002f96:	b29b      	uxth	r3, r3
 8002f98:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002f9c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002fa0:	b29c      	uxth	r4, r3
 8002fa2:	f084 0320 	eor.w	r3, r4, #32
 8002fa6:	b29c      	uxth	r4, r3
 8002fa8:	687a      	ldr	r2, [r7, #4]
 8002faa:	683b      	ldr	r3, [r7, #0]
 8002fac:	781b      	ldrb	r3, [r3, #0]
 8002fae:	009b      	lsls	r3, r3, #2
 8002fb0:	441a      	add	r2, r3
 8002fb2:	4b05      	ldr	r3, [pc, #20]	; (8002fc8 <USB_ActivateEndpoint+0x574>)
 8002fb4:	4323      	orrs	r3, r4
 8002fb6:	b29b      	uxth	r3, r3
 8002fb8:	8013      	strh	r3, [r2, #0]
 8002fba:	e01c      	b.n	8002ff6 <USB_ActivateEndpoint+0x5a2>
 8002fbc:	ffff8180 	.word	0xffff8180
 8002fc0:	ffffc080 	.word	0xffffc080
 8002fc4:	ffff80c0 	.word	0xffff80c0
 8002fc8:	ffff8080 	.word	0xffff8080
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8002fcc:	687a      	ldr	r2, [r7, #4]
 8002fce:	683b      	ldr	r3, [r7, #0]
 8002fd0:	781b      	ldrb	r3, [r3, #0]
 8002fd2:	009b      	lsls	r3, r3, #2
 8002fd4:	4413      	add	r3, r2
 8002fd6:	881b      	ldrh	r3, [r3, #0]
 8002fd8:	b29b      	uxth	r3, r3
 8002fda:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002fde:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002fe2:	b29c      	uxth	r4, r3
 8002fe4:	687a      	ldr	r2, [r7, #4]
 8002fe6:	683b      	ldr	r3, [r7, #0]
 8002fe8:	781b      	ldrb	r3, [r3, #0]
 8002fea:	009b      	lsls	r3, r3, #2
 8002fec:	441a      	add	r2, r3
 8002fee:	4b0f      	ldr	r3, [pc, #60]	; (800302c <USB_ActivateEndpoint+0x5d8>)
 8002ff0:	4323      	orrs	r3, r4
 8002ff2:	b29b      	uxth	r3, r3
 8002ff4:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8002ff6:	687a      	ldr	r2, [r7, #4]
 8002ff8:	683b      	ldr	r3, [r7, #0]
 8002ffa:	781b      	ldrb	r3, [r3, #0]
 8002ffc:	009b      	lsls	r3, r3, #2
 8002ffe:	4413      	add	r3, r2
 8003000:	881b      	ldrh	r3, [r3, #0]
 8003002:	b29b      	uxth	r3, r3
 8003004:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003008:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800300c:	b29c      	uxth	r4, r3
 800300e:	687a      	ldr	r2, [r7, #4]
 8003010:	683b      	ldr	r3, [r7, #0]
 8003012:	781b      	ldrb	r3, [r3, #0]
 8003014:	009b      	lsls	r3, r3, #2
 8003016:	441a      	add	r2, r3
 8003018:	4b04      	ldr	r3, [pc, #16]	; (800302c <USB_ActivateEndpoint+0x5d8>)
 800301a:	4323      	orrs	r3, r4
 800301c:	b29b      	uxth	r3, r3
 800301e:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 8003020:	7bfb      	ldrb	r3, [r7, #15]
}
 8003022:	4618      	mov	r0, r3
 8003024:	3710      	adds	r7, #16
 8003026:	46bd      	mov	sp, r7
 8003028:	bc90      	pop	{r4, r7}
 800302a:	4770      	bx	lr
 800302c:	ffff8080 	.word	0xffff8080

08003030 <USB_DeactivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8003030:	b490      	push	{r4, r7}
 8003032:	b082      	sub	sp, #8
 8003034:	af00      	add	r7, sp, #0
 8003036:	6078      	str	r0, [r7, #4]
 8003038:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800303a:	683b      	ldr	r3, [r7, #0]
 800303c:	7b1b      	ldrb	r3, [r3, #12]
 800303e:	2b00      	cmp	r3, #0
 8003040:	d171      	bne.n	8003126 <USB_DeactivateEndpoint+0xf6>
  {
    if (ep->is_in != 0U)
 8003042:	683b      	ldr	r3, [r7, #0]
 8003044:	785b      	ldrb	r3, [r3, #1]
 8003046:	2b00      	cmp	r3, #0
 8003048:	d036      	beq.n	80030b8 <USB_DeactivateEndpoint+0x88>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800304a:	687a      	ldr	r2, [r7, #4]
 800304c:	683b      	ldr	r3, [r7, #0]
 800304e:	781b      	ldrb	r3, [r3, #0]
 8003050:	009b      	lsls	r3, r3, #2
 8003052:	4413      	add	r3, r2
 8003054:	881b      	ldrh	r3, [r3, #0]
 8003056:	b29c      	uxth	r4, r3
 8003058:	4623      	mov	r3, r4
 800305a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800305e:	2b00      	cmp	r3, #0
 8003060:	d014      	beq.n	800308c <USB_DeactivateEndpoint+0x5c>
 8003062:	687a      	ldr	r2, [r7, #4]
 8003064:	683b      	ldr	r3, [r7, #0]
 8003066:	781b      	ldrb	r3, [r3, #0]
 8003068:	009b      	lsls	r3, r3, #2
 800306a:	4413      	add	r3, r2
 800306c:	881b      	ldrh	r3, [r3, #0]
 800306e:	b29b      	uxth	r3, r3
 8003070:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003074:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003078:	b29c      	uxth	r4, r3
 800307a:	687a      	ldr	r2, [r7, #4]
 800307c:	683b      	ldr	r3, [r7, #0]
 800307e:	781b      	ldrb	r3, [r3, #0]
 8003080:	009b      	lsls	r3, r3, #2
 8003082:	441a      	add	r2, r3
 8003084:	4b6b      	ldr	r3, [pc, #428]	; (8003234 <USB_DeactivateEndpoint+0x204>)
 8003086:	4323      	orrs	r3, r4
 8003088:	b29b      	uxth	r3, r3
 800308a:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800308c:	687a      	ldr	r2, [r7, #4]
 800308e:	683b      	ldr	r3, [r7, #0]
 8003090:	781b      	ldrb	r3, [r3, #0]
 8003092:	009b      	lsls	r3, r3, #2
 8003094:	4413      	add	r3, r2
 8003096:	881b      	ldrh	r3, [r3, #0]
 8003098:	b29b      	uxth	r3, r3
 800309a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800309e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80030a2:	b29c      	uxth	r4, r3
 80030a4:	687a      	ldr	r2, [r7, #4]
 80030a6:	683b      	ldr	r3, [r7, #0]
 80030a8:	781b      	ldrb	r3, [r3, #0]
 80030aa:	009b      	lsls	r3, r3, #2
 80030ac:	441a      	add	r2, r3
 80030ae:	4b62      	ldr	r3, [pc, #392]	; (8003238 <USB_DeactivateEndpoint+0x208>)
 80030b0:	4323      	orrs	r3, r4
 80030b2:	b29b      	uxth	r3, r3
 80030b4:	8013      	strh	r3, [r2, #0]
 80030b6:	e144      	b.n	8003342 <USB_DeactivateEndpoint+0x312>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80030b8:	687a      	ldr	r2, [r7, #4]
 80030ba:	683b      	ldr	r3, [r7, #0]
 80030bc:	781b      	ldrb	r3, [r3, #0]
 80030be:	009b      	lsls	r3, r3, #2
 80030c0:	4413      	add	r3, r2
 80030c2:	881b      	ldrh	r3, [r3, #0]
 80030c4:	b29c      	uxth	r4, r3
 80030c6:	4623      	mov	r3, r4
 80030c8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d014      	beq.n	80030fa <USB_DeactivateEndpoint+0xca>
 80030d0:	687a      	ldr	r2, [r7, #4]
 80030d2:	683b      	ldr	r3, [r7, #0]
 80030d4:	781b      	ldrb	r3, [r3, #0]
 80030d6:	009b      	lsls	r3, r3, #2
 80030d8:	4413      	add	r3, r2
 80030da:	881b      	ldrh	r3, [r3, #0]
 80030dc:	b29b      	uxth	r3, r3
 80030de:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80030e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80030e6:	b29c      	uxth	r4, r3
 80030e8:	687a      	ldr	r2, [r7, #4]
 80030ea:	683b      	ldr	r3, [r7, #0]
 80030ec:	781b      	ldrb	r3, [r3, #0]
 80030ee:	009b      	lsls	r3, r3, #2
 80030f0:	441a      	add	r2, r3
 80030f2:	4b52      	ldr	r3, [pc, #328]	; (800323c <USB_DeactivateEndpoint+0x20c>)
 80030f4:	4323      	orrs	r3, r4
 80030f6:	b29b      	uxth	r3, r3
 80030f8:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80030fa:	687a      	ldr	r2, [r7, #4]
 80030fc:	683b      	ldr	r3, [r7, #0]
 80030fe:	781b      	ldrb	r3, [r3, #0]
 8003100:	009b      	lsls	r3, r3, #2
 8003102:	4413      	add	r3, r2
 8003104:	881b      	ldrh	r3, [r3, #0]
 8003106:	b29b      	uxth	r3, r3
 8003108:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800310c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003110:	b29c      	uxth	r4, r3
 8003112:	687a      	ldr	r2, [r7, #4]
 8003114:	683b      	ldr	r3, [r7, #0]
 8003116:	781b      	ldrb	r3, [r3, #0]
 8003118:	009b      	lsls	r3, r3, #2
 800311a:	441a      	add	r2, r3
 800311c:	4b46      	ldr	r3, [pc, #280]	; (8003238 <USB_DeactivateEndpoint+0x208>)
 800311e:	4323      	orrs	r3, r4
 8003120:	b29b      	uxth	r3, r3
 8003122:	8013      	strh	r3, [r2, #0]
 8003124:	e10d      	b.n	8003342 <USB_DeactivateEndpoint+0x312>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8003126:	683b      	ldr	r3, [r7, #0]
 8003128:	785b      	ldrb	r3, [r3, #1]
 800312a:	2b00      	cmp	r3, #0
 800312c:	f040 8088 	bne.w	8003240 <USB_DeactivateEndpoint+0x210>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003130:	687a      	ldr	r2, [r7, #4]
 8003132:	683b      	ldr	r3, [r7, #0]
 8003134:	781b      	ldrb	r3, [r3, #0]
 8003136:	009b      	lsls	r3, r3, #2
 8003138:	4413      	add	r3, r2
 800313a:	881b      	ldrh	r3, [r3, #0]
 800313c:	b29c      	uxth	r4, r3
 800313e:	4623      	mov	r3, r4
 8003140:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003144:	2b00      	cmp	r3, #0
 8003146:	d014      	beq.n	8003172 <USB_DeactivateEndpoint+0x142>
 8003148:	687a      	ldr	r2, [r7, #4]
 800314a:	683b      	ldr	r3, [r7, #0]
 800314c:	781b      	ldrb	r3, [r3, #0]
 800314e:	009b      	lsls	r3, r3, #2
 8003150:	4413      	add	r3, r2
 8003152:	881b      	ldrh	r3, [r3, #0]
 8003154:	b29b      	uxth	r3, r3
 8003156:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800315a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800315e:	b29c      	uxth	r4, r3
 8003160:	687a      	ldr	r2, [r7, #4]
 8003162:	683b      	ldr	r3, [r7, #0]
 8003164:	781b      	ldrb	r3, [r3, #0]
 8003166:	009b      	lsls	r3, r3, #2
 8003168:	441a      	add	r2, r3
 800316a:	4b34      	ldr	r3, [pc, #208]	; (800323c <USB_DeactivateEndpoint+0x20c>)
 800316c:	4323      	orrs	r3, r4
 800316e:	b29b      	uxth	r3, r3
 8003170:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003172:	687a      	ldr	r2, [r7, #4]
 8003174:	683b      	ldr	r3, [r7, #0]
 8003176:	781b      	ldrb	r3, [r3, #0]
 8003178:	009b      	lsls	r3, r3, #2
 800317a:	4413      	add	r3, r2
 800317c:	881b      	ldrh	r3, [r3, #0]
 800317e:	b29c      	uxth	r4, r3
 8003180:	4623      	mov	r3, r4
 8003182:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003186:	2b00      	cmp	r3, #0
 8003188:	d014      	beq.n	80031b4 <USB_DeactivateEndpoint+0x184>
 800318a:	687a      	ldr	r2, [r7, #4]
 800318c:	683b      	ldr	r3, [r7, #0]
 800318e:	781b      	ldrb	r3, [r3, #0]
 8003190:	009b      	lsls	r3, r3, #2
 8003192:	4413      	add	r3, r2
 8003194:	881b      	ldrh	r3, [r3, #0]
 8003196:	b29b      	uxth	r3, r3
 8003198:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800319c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80031a0:	b29c      	uxth	r4, r3
 80031a2:	687a      	ldr	r2, [r7, #4]
 80031a4:	683b      	ldr	r3, [r7, #0]
 80031a6:	781b      	ldrb	r3, [r3, #0]
 80031a8:	009b      	lsls	r3, r3, #2
 80031aa:	441a      	add	r2, r3
 80031ac:	4b21      	ldr	r3, [pc, #132]	; (8003234 <USB_DeactivateEndpoint+0x204>)
 80031ae:	4323      	orrs	r3, r4
 80031b0:	b29b      	uxth	r3, r3
 80031b2:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 80031b4:	687a      	ldr	r2, [r7, #4]
 80031b6:	683b      	ldr	r3, [r7, #0]
 80031b8:	781b      	ldrb	r3, [r3, #0]
 80031ba:	009b      	lsls	r3, r3, #2
 80031bc:	4413      	add	r3, r2
 80031be:	881b      	ldrh	r3, [r3, #0]
 80031c0:	b29b      	uxth	r3, r3
 80031c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80031c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80031ca:	b29c      	uxth	r4, r3
 80031cc:	687a      	ldr	r2, [r7, #4]
 80031ce:	683b      	ldr	r3, [r7, #0]
 80031d0:	781b      	ldrb	r3, [r3, #0]
 80031d2:	009b      	lsls	r3, r3, #2
 80031d4:	441a      	add	r2, r3
 80031d6:	4b17      	ldr	r3, [pc, #92]	; (8003234 <USB_DeactivateEndpoint+0x204>)
 80031d8:	4323      	orrs	r3, r4
 80031da:	b29b      	uxth	r3, r3
 80031dc:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80031de:	687a      	ldr	r2, [r7, #4]
 80031e0:	683b      	ldr	r3, [r7, #0]
 80031e2:	781b      	ldrb	r3, [r3, #0]
 80031e4:	009b      	lsls	r3, r3, #2
 80031e6:	4413      	add	r3, r2
 80031e8:	881b      	ldrh	r3, [r3, #0]
 80031ea:	b29b      	uxth	r3, r3
 80031ec:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80031f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80031f4:	b29c      	uxth	r4, r3
 80031f6:	687a      	ldr	r2, [r7, #4]
 80031f8:	683b      	ldr	r3, [r7, #0]
 80031fa:	781b      	ldrb	r3, [r3, #0]
 80031fc:	009b      	lsls	r3, r3, #2
 80031fe:	441a      	add	r2, r3
 8003200:	4b0d      	ldr	r3, [pc, #52]	; (8003238 <USB_DeactivateEndpoint+0x208>)
 8003202:	4323      	orrs	r3, r4
 8003204:	b29b      	uxth	r3, r3
 8003206:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003208:	687a      	ldr	r2, [r7, #4]
 800320a:	683b      	ldr	r3, [r7, #0]
 800320c:	781b      	ldrb	r3, [r3, #0]
 800320e:	009b      	lsls	r3, r3, #2
 8003210:	4413      	add	r3, r2
 8003212:	881b      	ldrh	r3, [r3, #0]
 8003214:	b29b      	uxth	r3, r3
 8003216:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800321a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800321e:	b29c      	uxth	r4, r3
 8003220:	687a      	ldr	r2, [r7, #4]
 8003222:	683b      	ldr	r3, [r7, #0]
 8003224:	781b      	ldrb	r3, [r3, #0]
 8003226:	009b      	lsls	r3, r3, #2
 8003228:	441a      	add	r2, r3
 800322a:	4b03      	ldr	r3, [pc, #12]	; (8003238 <USB_DeactivateEndpoint+0x208>)
 800322c:	4323      	orrs	r3, r4
 800322e:	b29b      	uxth	r3, r3
 8003230:	8013      	strh	r3, [r2, #0]
 8003232:	e086      	b.n	8003342 <USB_DeactivateEndpoint+0x312>
 8003234:	ffff80c0 	.word	0xffff80c0
 8003238:	ffff8080 	.word	0xffff8080
 800323c:	ffffc080 	.word	0xffffc080
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003240:	687a      	ldr	r2, [r7, #4]
 8003242:	683b      	ldr	r3, [r7, #0]
 8003244:	781b      	ldrb	r3, [r3, #0]
 8003246:	009b      	lsls	r3, r3, #2
 8003248:	4413      	add	r3, r2
 800324a:	881b      	ldrh	r3, [r3, #0]
 800324c:	b29c      	uxth	r4, r3
 800324e:	4623      	mov	r3, r4
 8003250:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003254:	2b00      	cmp	r3, #0
 8003256:	d014      	beq.n	8003282 <USB_DeactivateEndpoint+0x252>
 8003258:	687a      	ldr	r2, [r7, #4]
 800325a:	683b      	ldr	r3, [r7, #0]
 800325c:	781b      	ldrb	r3, [r3, #0]
 800325e:	009b      	lsls	r3, r3, #2
 8003260:	4413      	add	r3, r2
 8003262:	881b      	ldrh	r3, [r3, #0]
 8003264:	b29b      	uxth	r3, r3
 8003266:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800326a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800326e:	b29c      	uxth	r4, r3
 8003270:	687a      	ldr	r2, [r7, #4]
 8003272:	683b      	ldr	r3, [r7, #0]
 8003274:	781b      	ldrb	r3, [r3, #0]
 8003276:	009b      	lsls	r3, r3, #2
 8003278:	441a      	add	r2, r3
 800327a:	4b35      	ldr	r3, [pc, #212]	; (8003350 <USB_DeactivateEndpoint+0x320>)
 800327c:	4323      	orrs	r3, r4
 800327e:	b29b      	uxth	r3, r3
 8003280:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003282:	687a      	ldr	r2, [r7, #4]
 8003284:	683b      	ldr	r3, [r7, #0]
 8003286:	781b      	ldrb	r3, [r3, #0]
 8003288:	009b      	lsls	r3, r3, #2
 800328a:	4413      	add	r3, r2
 800328c:	881b      	ldrh	r3, [r3, #0]
 800328e:	b29c      	uxth	r4, r3
 8003290:	4623      	mov	r3, r4
 8003292:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003296:	2b00      	cmp	r3, #0
 8003298:	d014      	beq.n	80032c4 <USB_DeactivateEndpoint+0x294>
 800329a:	687a      	ldr	r2, [r7, #4]
 800329c:	683b      	ldr	r3, [r7, #0]
 800329e:	781b      	ldrb	r3, [r3, #0]
 80032a0:	009b      	lsls	r3, r3, #2
 80032a2:	4413      	add	r3, r2
 80032a4:	881b      	ldrh	r3, [r3, #0]
 80032a6:	b29b      	uxth	r3, r3
 80032a8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80032ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80032b0:	b29c      	uxth	r4, r3
 80032b2:	687a      	ldr	r2, [r7, #4]
 80032b4:	683b      	ldr	r3, [r7, #0]
 80032b6:	781b      	ldrb	r3, [r3, #0]
 80032b8:	009b      	lsls	r3, r3, #2
 80032ba:	441a      	add	r2, r3
 80032bc:	4b25      	ldr	r3, [pc, #148]	; (8003354 <USB_DeactivateEndpoint+0x324>)
 80032be:	4323      	orrs	r3, r4
 80032c0:	b29b      	uxth	r3, r3
 80032c2:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 80032c4:	687a      	ldr	r2, [r7, #4]
 80032c6:	683b      	ldr	r3, [r7, #0]
 80032c8:	781b      	ldrb	r3, [r3, #0]
 80032ca:	009b      	lsls	r3, r3, #2
 80032cc:	4413      	add	r3, r2
 80032ce:	881b      	ldrh	r3, [r3, #0]
 80032d0:	b29b      	uxth	r3, r3
 80032d2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80032d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80032da:	b29c      	uxth	r4, r3
 80032dc:	687a      	ldr	r2, [r7, #4]
 80032de:	683b      	ldr	r3, [r7, #0]
 80032e0:	781b      	ldrb	r3, [r3, #0]
 80032e2:	009b      	lsls	r3, r3, #2
 80032e4:	441a      	add	r2, r3
 80032e6:	4b1a      	ldr	r3, [pc, #104]	; (8003350 <USB_DeactivateEndpoint+0x320>)
 80032e8:	4323      	orrs	r3, r4
 80032ea:	b29b      	uxth	r3, r3
 80032ec:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80032ee:	687a      	ldr	r2, [r7, #4]
 80032f0:	683b      	ldr	r3, [r7, #0]
 80032f2:	781b      	ldrb	r3, [r3, #0]
 80032f4:	009b      	lsls	r3, r3, #2
 80032f6:	4413      	add	r3, r2
 80032f8:	881b      	ldrh	r3, [r3, #0]
 80032fa:	b29b      	uxth	r3, r3
 80032fc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003300:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003304:	b29c      	uxth	r4, r3
 8003306:	687a      	ldr	r2, [r7, #4]
 8003308:	683b      	ldr	r3, [r7, #0]
 800330a:	781b      	ldrb	r3, [r3, #0]
 800330c:	009b      	lsls	r3, r3, #2
 800330e:	441a      	add	r2, r3
 8003310:	4b11      	ldr	r3, [pc, #68]	; (8003358 <USB_DeactivateEndpoint+0x328>)
 8003312:	4323      	orrs	r3, r4
 8003314:	b29b      	uxth	r3, r3
 8003316:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003318:	687a      	ldr	r2, [r7, #4]
 800331a:	683b      	ldr	r3, [r7, #0]
 800331c:	781b      	ldrb	r3, [r3, #0]
 800331e:	009b      	lsls	r3, r3, #2
 8003320:	4413      	add	r3, r2
 8003322:	881b      	ldrh	r3, [r3, #0]
 8003324:	b29b      	uxth	r3, r3
 8003326:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800332a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800332e:	b29c      	uxth	r4, r3
 8003330:	687a      	ldr	r2, [r7, #4]
 8003332:	683b      	ldr	r3, [r7, #0]
 8003334:	781b      	ldrb	r3, [r3, #0]
 8003336:	009b      	lsls	r3, r3, #2
 8003338:	441a      	add	r2, r3
 800333a:	4b07      	ldr	r3, [pc, #28]	; (8003358 <USB_DeactivateEndpoint+0x328>)
 800333c:	4323      	orrs	r3, r4
 800333e:	b29b      	uxth	r3, r3
 8003340:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8003342:	2300      	movs	r3, #0
}
 8003344:	4618      	mov	r0, r3
 8003346:	3708      	adds	r7, #8
 8003348:	46bd      	mov	sp, r7
 800334a:	bc90      	pop	{r4, r7}
 800334c:	4770      	bx	lr
 800334e:	bf00      	nop
 8003350:	ffffc080 	.word	0xffffc080
 8003354:	ffff80c0 	.word	0xffff80c0
 8003358:	ffff8080 	.word	0xffff8080

0800335c <USB_EPStartXfer>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800335c:	b590      	push	{r4, r7, lr}
 800335e:	b08d      	sub	sp, #52	; 0x34
 8003360:	af00      	add	r7, sp, #0
 8003362:	6078      	str	r0, [r7, #4]
 8003364:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint32_t len;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8003366:	683b      	ldr	r3, [r7, #0]
 8003368:	785b      	ldrb	r3, [r3, #1]
 800336a:	2b01      	cmp	r3, #1
 800336c:	f040 8160 	bne.w	8003630 <USB_EPStartXfer+0x2d4>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8003370:	683b      	ldr	r3, [r7, #0]
 8003372:	699a      	ldr	r2, [r3, #24]
 8003374:	683b      	ldr	r3, [r7, #0]
 8003376:	691b      	ldr	r3, [r3, #16]
 8003378:	429a      	cmp	r2, r3
 800337a:	d909      	bls.n	8003390 <USB_EPStartXfer+0x34>
    {
      len = ep->maxpacket;
 800337c:	683b      	ldr	r3, [r7, #0]
 800337e:	691b      	ldr	r3, [r3, #16]
 8003380:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len -= len;
 8003382:	683b      	ldr	r3, [r7, #0]
 8003384:	699a      	ldr	r2, [r3, #24]
 8003386:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003388:	1ad2      	subs	r2, r2, r3
 800338a:	683b      	ldr	r3, [r7, #0]
 800338c:	619a      	str	r2, [r3, #24]
 800338e:	e005      	b.n	800339c <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 8003390:	683b      	ldr	r3, [r7, #0]
 8003392:	699b      	ldr	r3, [r3, #24]
 8003394:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len = 0U;
 8003396:	683b      	ldr	r3, [r7, #0]
 8003398:	2200      	movs	r2, #0
 800339a:	619a      	str	r2, [r3, #24]
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800339c:	683b      	ldr	r3, [r7, #0]
 800339e:	7b1b      	ldrb	r3, [r3, #12]
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d119      	bne.n	80033d8 <USB_EPStartXfer+0x7c>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80033a4:	683b      	ldr	r3, [r7, #0]
 80033a6:	6959      	ldr	r1, [r3, #20]
 80033a8:	683b      	ldr	r3, [r7, #0]
 80033aa:	88da      	ldrh	r2, [r3, #6]
 80033ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033ae:	b29b      	uxth	r3, r3
 80033b0:	6878      	ldr	r0, [r7, #4]
 80033b2:	f000 fba2 	bl	8003afa <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80033b6:	687c      	ldr	r4, [r7, #4]
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80033be:	b29b      	uxth	r3, r3
 80033c0:	441c      	add	r4, r3
 80033c2:	683b      	ldr	r3, [r7, #0]
 80033c4:	781b      	ldrb	r3, [r3, #0]
 80033c6:	011b      	lsls	r3, r3, #4
 80033c8:	4423      	add	r3, r4
 80033ca:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80033ce:	461c      	mov	r4, r3
 80033d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033d2:	b29b      	uxth	r3, r3
 80033d4:	8023      	strh	r3, [r4, #0]
 80033d6:	e10f      	b.n	80035f8 <USB_EPStartXfer+0x29c>
    }
    else
    {
      /* Write the data to the USB endpoint */
      if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80033d8:	687a      	ldr	r2, [r7, #4]
 80033da:	683b      	ldr	r3, [r7, #0]
 80033dc:	781b      	ldrb	r3, [r3, #0]
 80033de:	009b      	lsls	r3, r3, #2
 80033e0:	4413      	add	r3, r2
 80033e2:	881b      	ldrh	r3, [r3, #0]
 80033e4:	b29b      	uxth	r3, r3
 80033e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d065      	beq.n	80034ba <USB_EPStartXfer+0x15e>
      {
        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80033ee:	687c      	ldr	r4, [r7, #4]
 80033f0:	683b      	ldr	r3, [r7, #0]
 80033f2:	785b      	ldrb	r3, [r3, #1]
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d148      	bne.n	800348a <USB_EPStartXfer+0x12e>
 80033f8:	687c      	ldr	r4, [r7, #4]
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003400:	b29b      	uxth	r3, r3
 8003402:	441c      	add	r4, r3
 8003404:	683b      	ldr	r3, [r7, #0]
 8003406:	781b      	ldrb	r3, [r3, #0]
 8003408:	011b      	lsls	r3, r3, #4
 800340a:	4423      	add	r3, r4
 800340c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003410:	461c      	mov	r4, r3
 8003412:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003414:	2b00      	cmp	r3, #0
 8003416:	d10e      	bne.n	8003436 <USB_EPStartXfer+0xda>
 8003418:	8823      	ldrh	r3, [r4, #0]
 800341a:	b29b      	uxth	r3, r3
 800341c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003420:	b29b      	uxth	r3, r3
 8003422:	8023      	strh	r3, [r4, #0]
 8003424:	8823      	ldrh	r3, [r4, #0]
 8003426:	b29b      	uxth	r3, r3
 8003428:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800342c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003430:	b29b      	uxth	r3, r3
 8003432:	8023      	strh	r3, [r4, #0]
 8003434:	e03d      	b.n	80034b2 <USB_EPStartXfer+0x156>
 8003436:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003438:	2b3e      	cmp	r3, #62	; 0x3e
 800343a:	d810      	bhi.n	800345e <USB_EPStartXfer+0x102>
 800343c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800343e:	085b      	lsrs	r3, r3, #1
 8003440:	627b      	str	r3, [r7, #36]	; 0x24
 8003442:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003444:	f003 0301 	and.w	r3, r3, #1
 8003448:	2b00      	cmp	r3, #0
 800344a:	d002      	beq.n	8003452 <USB_EPStartXfer+0xf6>
 800344c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800344e:	3301      	adds	r3, #1
 8003450:	627b      	str	r3, [r7, #36]	; 0x24
 8003452:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003454:	b29b      	uxth	r3, r3
 8003456:	029b      	lsls	r3, r3, #10
 8003458:	b29b      	uxth	r3, r3
 800345a:	8023      	strh	r3, [r4, #0]
 800345c:	e029      	b.n	80034b2 <USB_EPStartXfer+0x156>
 800345e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003460:	095b      	lsrs	r3, r3, #5
 8003462:	627b      	str	r3, [r7, #36]	; 0x24
 8003464:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003466:	f003 031f 	and.w	r3, r3, #31
 800346a:	2b00      	cmp	r3, #0
 800346c:	d102      	bne.n	8003474 <USB_EPStartXfer+0x118>
 800346e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003470:	3b01      	subs	r3, #1
 8003472:	627b      	str	r3, [r7, #36]	; 0x24
 8003474:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003476:	b29b      	uxth	r3, r3
 8003478:	029b      	lsls	r3, r3, #10
 800347a:	b29b      	uxth	r3, r3
 800347c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003480:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003484:	b29b      	uxth	r3, r3
 8003486:	8023      	strh	r3, [r4, #0]
 8003488:	e013      	b.n	80034b2 <USB_EPStartXfer+0x156>
 800348a:	683b      	ldr	r3, [r7, #0]
 800348c:	785b      	ldrb	r3, [r3, #1]
 800348e:	2b01      	cmp	r3, #1
 8003490:	d10f      	bne.n	80034b2 <USB_EPStartXfer+0x156>
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003498:	b29b      	uxth	r3, r3
 800349a:	441c      	add	r4, r3
 800349c:	683b      	ldr	r3, [r7, #0]
 800349e:	781b      	ldrb	r3, [r3, #0]
 80034a0:	011b      	lsls	r3, r3, #4
 80034a2:	4423      	add	r3, r4
 80034a4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80034a8:	60fb      	str	r3, [r7, #12]
 80034aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034ac:	b29a      	uxth	r2, r3
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	801a      	strh	r2, [r3, #0]
        pmabuffer = ep->pmaaddr1;
 80034b2:	683b      	ldr	r3, [r7, #0]
 80034b4:	895b      	ldrh	r3, [r3, #10]
 80034b6:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80034b8:	e063      	b.n	8003582 <USB_EPStartXfer+0x226>
      }
      else
      {
        /* Set the Double buffer counter for pmabuffer0 */
        PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80034ba:	683b      	ldr	r3, [r7, #0]
 80034bc:	785b      	ldrb	r3, [r3, #1]
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d148      	bne.n	8003554 <USB_EPStartXfer+0x1f8>
 80034c2:	687c      	ldr	r4, [r7, #4]
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80034ca:	b29b      	uxth	r3, r3
 80034cc:	441c      	add	r4, r3
 80034ce:	683b      	ldr	r3, [r7, #0]
 80034d0:	781b      	ldrb	r3, [r3, #0]
 80034d2:	011b      	lsls	r3, r3, #4
 80034d4:	4423      	add	r3, r4
 80034d6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80034da:	461c      	mov	r4, r3
 80034dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d10e      	bne.n	8003500 <USB_EPStartXfer+0x1a4>
 80034e2:	8823      	ldrh	r3, [r4, #0]
 80034e4:	b29b      	uxth	r3, r3
 80034e6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80034ea:	b29b      	uxth	r3, r3
 80034ec:	8023      	strh	r3, [r4, #0]
 80034ee:	8823      	ldrh	r3, [r4, #0]
 80034f0:	b29b      	uxth	r3, r3
 80034f2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80034f6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80034fa:	b29b      	uxth	r3, r3
 80034fc:	8023      	strh	r3, [r4, #0]
 80034fe:	e03d      	b.n	800357c <USB_EPStartXfer+0x220>
 8003500:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003502:	2b3e      	cmp	r3, #62	; 0x3e
 8003504:	d810      	bhi.n	8003528 <USB_EPStartXfer+0x1cc>
 8003506:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003508:	085b      	lsrs	r3, r3, #1
 800350a:	623b      	str	r3, [r7, #32]
 800350c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800350e:	f003 0301 	and.w	r3, r3, #1
 8003512:	2b00      	cmp	r3, #0
 8003514:	d002      	beq.n	800351c <USB_EPStartXfer+0x1c0>
 8003516:	6a3b      	ldr	r3, [r7, #32]
 8003518:	3301      	adds	r3, #1
 800351a:	623b      	str	r3, [r7, #32]
 800351c:	6a3b      	ldr	r3, [r7, #32]
 800351e:	b29b      	uxth	r3, r3
 8003520:	029b      	lsls	r3, r3, #10
 8003522:	b29b      	uxth	r3, r3
 8003524:	8023      	strh	r3, [r4, #0]
 8003526:	e029      	b.n	800357c <USB_EPStartXfer+0x220>
 8003528:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800352a:	095b      	lsrs	r3, r3, #5
 800352c:	623b      	str	r3, [r7, #32]
 800352e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003530:	f003 031f 	and.w	r3, r3, #31
 8003534:	2b00      	cmp	r3, #0
 8003536:	d102      	bne.n	800353e <USB_EPStartXfer+0x1e2>
 8003538:	6a3b      	ldr	r3, [r7, #32]
 800353a:	3b01      	subs	r3, #1
 800353c:	623b      	str	r3, [r7, #32]
 800353e:	6a3b      	ldr	r3, [r7, #32]
 8003540:	b29b      	uxth	r3, r3
 8003542:	029b      	lsls	r3, r3, #10
 8003544:	b29b      	uxth	r3, r3
 8003546:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800354a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800354e:	b29b      	uxth	r3, r3
 8003550:	8023      	strh	r3, [r4, #0]
 8003552:	e013      	b.n	800357c <USB_EPStartXfer+0x220>
 8003554:	683b      	ldr	r3, [r7, #0]
 8003556:	785b      	ldrb	r3, [r3, #1]
 8003558:	2b01      	cmp	r3, #1
 800355a:	d10f      	bne.n	800357c <USB_EPStartXfer+0x220>
 800355c:	687c      	ldr	r4, [r7, #4]
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003564:	b29b      	uxth	r3, r3
 8003566:	441c      	add	r4, r3
 8003568:	683b      	ldr	r3, [r7, #0]
 800356a:	781b      	ldrb	r3, [r3, #0]
 800356c:	011b      	lsls	r3, r3, #4
 800356e:	4423      	add	r3, r4
 8003570:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003574:	461c      	mov	r4, r3
 8003576:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003578:	b29b      	uxth	r3, r3
 800357a:	8023      	strh	r3, [r4, #0]
        pmabuffer = ep->pmaaddr0;
 800357c:	683b      	ldr	r3, [r7, #0]
 800357e:	891b      	ldrh	r3, [r3, #8]
 8003580:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }
      USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8003582:	683b      	ldr	r3, [r7, #0]
 8003584:	6959      	ldr	r1, [r3, #20]
 8003586:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003588:	b29b      	uxth	r3, r3
 800358a:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800358c:	6878      	ldr	r0, [r7, #4]
 800358e:	f000 fab4 	bl	8003afa <USB_WritePMA>
      PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 8003592:	683b      	ldr	r3, [r7, #0]
 8003594:	785b      	ldrb	r3, [r3, #1]
 8003596:	2b00      	cmp	r3, #0
 8003598:	d115      	bne.n	80035c6 <USB_EPStartXfer+0x26a>
 800359a:	687a      	ldr	r2, [r7, #4]
 800359c:	683b      	ldr	r3, [r7, #0]
 800359e:	781b      	ldrb	r3, [r3, #0]
 80035a0:	009b      	lsls	r3, r3, #2
 80035a2:	4413      	add	r3, r2
 80035a4:	881b      	ldrh	r3, [r3, #0]
 80035a6:	b29b      	uxth	r3, r3
 80035a8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80035ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80035b0:	b29c      	uxth	r4, r3
 80035b2:	687a      	ldr	r2, [r7, #4]
 80035b4:	683b      	ldr	r3, [r7, #0]
 80035b6:	781b      	ldrb	r3, [r3, #0]
 80035b8:	009b      	lsls	r3, r3, #2
 80035ba:	441a      	add	r2, r3
 80035bc:	4b9a      	ldr	r3, [pc, #616]	; (8003828 <USB_EPStartXfer+0x4cc>)
 80035be:	4323      	orrs	r3, r4
 80035c0:	b29b      	uxth	r3, r3
 80035c2:	8013      	strh	r3, [r2, #0]
 80035c4:	e018      	b.n	80035f8 <USB_EPStartXfer+0x29c>
 80035c6:	683b      	ldr	r3, [r7, #0]
 80035c8:	785b      	ldrb	r3, [r3, #1]
 80035ca:	2b01      	cmp	r3, #1
 80035cc:	d114      	bne.n	80035f8 <USB_EPStartXfer+0x29c>
 80035ce:	687a      	ldr	r2, [r7, #4]
 80035d0:	683b      	ldr	r3, [r7, #0]
 80035d2:	781b      	ldrb	r3, [r3, #0]
 80035d4:	009b      	lsls	r3, r3, #2
 80035d6:	4413      	add	r3, r2
 80035d8:	881b      	ldrh	r3, [r3, #0]
 80035da:	b29b      	uxth	r3, r3
 80035dc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80035e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80035e4:	b29c      	uxth	r4, r3
 80035e6:	687a      	ldr	r2, [r7, #4]
 80035e8:	683b      	ldr	r3, [r7, #0]
 80035ea:	781b      	ldrb	r3, [r3, #0]
 80035ec:	009b      	lsls	r3, r3, #2
 80035ee:	441a      	add	r2, r3
 80035f0:	4b8e      	ldr	r3, [pc, #568]	; (800382c <USB_EPStartXfer+0x4d0>)
 80035f2:	4323      	orrs	r3, r4
 80035f4:	b29b      	uxth	r3, r3
 80035f6:	8013      	strh	r3, [r2, #0]
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 80035f8:	687a      	ldr	r2, [r7, #4]
 80035fa:	683b      	ldr	r3, [r7, #0]
 80035fc:	781b      	ldrb	r3, [r3, #0]
 80035fe:	009b      	lsls	r3, r3, #2
 8003600:	4413      	add	r3, r2
 8003602:	881b      	ldrh	r3, [r3, #0]
 8003604:	b29b      	uxth	r3, r3
 8003606:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800360a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800360e:	b29c      	uxth	r4, r3
 8003610:	f084 0310 	eor.w	r3, r4, #16
 8003614:	b29c      	uxth	r4, r3
 8003616:	f084 0320 	eor.w	r3, r4, #32
 800361a:	b29c      	uxth	r4, r3
 800361c:	687a      	ldr	r2, [r7, #4]
 800361e:	683b      	ldr	r3, [r7, #0]
 8003620:	781b      	ldrb	r3, [r3, #0]
 8003622:	009b      	lsls	r3, r3, #2
 8003624:	441a      	add	r2, r3
 8003626:	4b82      	ldr	r3, [pc, #520]	; (8003830 <USB_EPStartXfer+0x4d4>)
 8003628:	4323      	orrs	r3, r4
 800362a:	b29b      	uxth	r3, r3
 800362c:	8013      	strh	r3, [r2, #0]
 800362e:	e146      	b.n	80038be <USB_EPStartXfer+0x562>
  }
  else /* OUT endpoint */
  {
    /* Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8003630:	683b      	ldr	r3, [r7, #0]
 8003632:	699a      	ldr	r2, [r3, #24]
 8003634:	683b      	ldr	r3, [r7, #0]
 8003636:	691b      	ldr	r3, [r3, #16]
 8003638:	429a      	cmp	r2, r3
 800363a:	d909      	bls.n	8003650 <USB_EPStartXfer+0x2f4>
    {
      len = ep->maxpacket;
 800363c:	683b      	ldr	r3, [r7, #0]
 800363e:	691b      	ldr	r3, [r3, #16]
 8003640:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len -= len;
 8003642:	683b      	ldr	r3, [r7, #0]
 8003644:	699a      	ldr	r2, [r3, #24]
 8003646:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003648:	1ad2      	subs	r2, r2, r3
 800364a:	683b      	ldr	r3, [r7, #0]
 800364c:	619a      	str	r2, [r3, #24]
 800364e:	e005      	b.n	800365c <USB_EPStartXfer+0x300>
    }
    else
    {
      len = ep->xfer_len;
 8003650:	683b      	ldr	r3, [r7, #0]
 8003652:	699b      	ldr	r3, [r3, #24]
 8003654:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len = 0U;
 8003656:	683b      	ldr	r3, [r7, #0]
 8003658:	2200      	movs	r2, #0
 800365a:	619a      	str	r2, [r3, #24]
    }

    /* configure and validate Rx endpoint */
    if (ep->doublebuffer == 0U)
 800365c:	683b      	ldr	r3, [r7, #0]
 800365e:	7b1b      	ldrb	r3, [r3, #12]
 8003660:	2b00      	cmp	r3, #0
 8003662:	d148      	bne.n	80036f6 <USB_EPStartXfer+0x39a>
    {
      /*Set RX buffer count*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8003664:	687c      	ldr	r4, [r7, #4]
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800366c:	b29b      	uxth	r3, r3
 800366e:	441c      	add	r4, r3
 8003670:	683b      	ldr	r3, [r7, #0]
 8003672:	781b      	ldrb	r3, [r3, #0]
 8003674:	011b      	lsls	r3, r3, #4
 8003676:	4423      	add	r3, r4
 8003678:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800367c:	461c      	mov	r4, r3
 800367e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003680:	2b00      	cmp	r3, #0
 8003682:	d10e      	bne.n	80036a2 <USB_EPStartXfer+0x346>
 8003684:	8823      	ldrh	r3, [r4, #0]
 8003686:	b29b      	uxth	r3, r3
 8003688:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800368c:	b29b      	uxth	r3, r3
 800368e:	8023      	strh	r3, [r4, #0]
 8003690:	8823      	ldrh	r3, [r4, #0]
 8003692:	b29b      	uxth	r3, r3
 8003694:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003698:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800369c:	b29b      	uxth	r3, r3
 800369e:	8023      	strh	r3, [r4, #0]
 80036a0:	e0f2      	b.n	8003888 <USB_EPStartXfer+0x52c>
 80036a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036a4:	2b3e      	cmp	r3, #62	; 0x3e
 80036a6:	d810      	bhi.n	80036ca <USB_EPStartXfer+0x36e>
 80036a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036aa:	085b      	lsrs	r3, r3, #1
 80036ac:	61fb      	str	r3, [r7, #28]
 80036ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036b0:	f003 0301 	and.w	r3, r3, #1
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d002      	beq.n	80036be <USB_EPStartXfer+0x362>
 80036b8:	69fb      	ldr	r3, [r7, #28]
 80036ba:	3301      	adds	r3, #1
 80036bc:	61fb      	str	r3, [r7, #28]
 80036be:	69fb      	ldr	r3, [r7, #28]
 80036c0:	b29b      	uxth	r3, r3
 80036c2:	029b      	lsls	r3, r3, #10
 80036c4:	b29b      	uxth	r3, r3
 80036c6:	8023      	strh	r3, [r4, #0]
 80036c8:	e0de      	b.n	8003888 <USB_EPStartXfer+0x52c>
 80036ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036cc:	095b      	lsrs	r3, r3, #5
 80036ce:	61fb      	str	r3, [r7, #28]
 80036d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036d2:	f003 031f 	and.w	r3, r3, #31
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d102      	bne.n	80036e0 <USB_EPStartXfer+0x384>
 80036da:	69fb      	ldr	r3, [r7, #28]
 80036dc:	3b01      	subs	r3, #1
 80036de:	61fb      	str	r3, [r7, #28]
 80036e0:	69fb      	ldr	r3, [r7, #28]
 80036e2:	b29b      	uxth	r3, r3
 80036e4:	029b      	lsls	r3, r3, #10
 80036e6:	b29b      	uxth	r3, r3
 80036e8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80036ec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80036f0:	b29b      	uxth	r3, r3
 80036f2:	8023      	strh	r3, [r4, #0]
 80036f4:	e0c8      	b.n	8003888 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /*Set the Double buffer counter*/
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 80036f6:	683b      	ldr	r3, [r7, #0]
 80036f8:	785b      	ldrb	r3, [r3, #1]
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d148      	bne.n	8003790 <USB_EPStartXfer+0x434>
 80036fe:	687c      	ldr	r4, [r7, #4]
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003706:	b29b      	uxth	r3, r3
 8003708:	441c      	add	r4, r3
 800370a:	683b      	ldr	r3, [r7, #0]
 800370c:	781b      	ldrb	r3, [r3, #0]
 800370e:	011b      	lsls	r3, r3, #4
 8003710:	4423      	add	r3, r4
 8003712:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003716:	461c      	mov	r4, r3
 8003718:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800371a:	2b00      	cmp	r3, #0
 800371c:	d10e      	bne.n	800373c <USB_EPStartXfer+0x3e0>
 800371e:	8823      	ldrh	r3, [r4, #0]
 8003720:	b29b      	uxth	r3, r3
 8003722:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003726:	b29b      	uxth	r3, r3
 8003728:	8023      	strh	r3, [r4, #0]
 800372a:	8823      	ldrh	r3, [r4, #0]
 800372c:	b29b      	uxth	r3, r3
 800372e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003732:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003736:	b29b      	uxth	r3, r3
 8003738:	8023      	strh	r3, [r4, #0]
 800373a:	e03d      	b.n	80037b8 <USB_EPStartXfer+0x45c>
 800373c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800373e:	2b3e      	cmp	r3, #62	; 0x3e
 8003740:	d810      	bhi.n	8003764 <USB_EPStartXfer+0x408>
 8003742:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003744:	085b      	lsrs	r3, r3, #1
 8003746:	61bb      	str	r3, [r7, #24]
 8003748:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800374a:	f003 0301 	and.w	r3, r3, #1
 800374e:	2b00      	cmp	r3, #0
 8003750:	d002      	beq.n	8003758 <USB_EPStartXfer+0x3fc>
 8003752:	69bb      	ldr	r3, [r7, #24]
 8003754:	3301      	adds	r3, #1
 8003756:	61bb      	str	r3, [r7, #24]
 8003758:	69bb      	ldr	r3, [r7, #24]
 800375a:	b29b      	uxth	r3, r3
 800375c:	029b      	lsls	r3, r3, #10
 800375e:	b29b      	uxth	r3, r3
 8003760:	8023      	strh	r3, [r4, #0]
 8003762:	e029      	b.n	80037b8 <USB_EPStartXfer+0x45c>
 8003764:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003766:	095b      	lsrs	r3, r3, #5
 8003768:	61bb      	str	r3, [r7, #24]
 800376a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800376c:	f003 031f 	and.w	r3, r3, #31
 8003770:	2b00      	cmp	r3, #0
 8003772:	d102      	bne.n	800377a <USB_EPStartXfer+0x41e>
 8003774:	69bb      	ldr	r3, [r7, #24]
 8003776:	3b01      	subs	r3, #1
 8003778:	61bb      	str	r3, [r7, #24]
 800377a:	69bb      	ldr	r3, [r7, #24]
 800377c:	b29b      	uxth	r3, r3
 800377e:	029b      	lsls	r3, r3, #10
 8003780:	b29b      	uxth	r3, r3
 8003782:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003786:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800378a:	b29b      	uxth	r3, r3
 800378c:	8023      	strh	r3, [r4, #0]
 800378e:	e013      	b.n	80037b8 <USB_EPStartXfer+0x45c>
 8003790:	683b      	ldr	r3, [r7, #0]
 8003792:	785b      	ldrb	r3, [r3, #1]
 8003794:	2b01      	cmp	r3, #1
 8003796:	d10f      	bne.n	80037b8 <USB_EPStartXfer+0x45c>
 8003798:	687c      	ldr	r4, [r7, #4]
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80037a0:	b29b      	uxth	r3, r3
 80037a2:	441c      	add	r4, r3
 80037a4:	683b      	ldr	r3, [r7, #0]
 80037a6:	781b      	ldrb	r3, [r3, #0]
 80037a8:	011b      	lsls	r3, r3, #4
 80037aa:	4423      	add	r3, r4
 80037ac:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80037b0:	461c      	mov	r4, r3
 80037b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037b4:	b29b      	uxth	r3, r3
 80037b6:	8023      	strh	r3, [r4, #0]
 80037b8:	687c      	ldr	r4, [r7, #4]
 80037ba:	683b      	ldr	r3, [r7, #0]
 80037bc:	785b      	ldrb	r3, [r3, #1]
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d14e      	bne.n	8003860 <USB_EPStartXfer+0x504>
 80037c2:	687c      	ldr	r4, [r7, #4]
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80037ca:	b29b      	uxth	r3, r3
 80037cc:	441c      	add	r4, r3
 80037ce:	683b      	ldr	r3, [r7, #0]
 80037d0:	781b      	ldrb	r3, [r3, #0]
 80037d2:	011b      	lsls	r3, r3, #4
 80037d4:	4423      	add	r3, r4
 80037d6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80037da:	461c      	mov	r4, r3
 80037dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d10e      	bne.n	8003800 <USB_EPStartXfer+0x4a4>
 80037e2:	8823      	ldrh	r3, [r4, #0]
 80037e4:	b29b      	uxth	r3, r3
 80037e6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80037ea:	b29b      	uxth	r3, r3
 80037ec:	8023      	strh	r3, [r4, #0]
 80037ee:	8823      	ldrh	r3, [r4, #0]
 80037f0:	b29b      	uxth	r3, r3
 80037f2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80037f6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80037fa:	b29b      	uxth	r3, r3
 80037fc:	8023      	strh	r3, [r4, #0]
 80037fe:	e043      	b.n	8003888 <USB_EPStartXfer+0x52c>
 8003800:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003802:	2b3e      	cmp	r3, #62	; 0x3e
 8003804:	d816      	bhi.n	8003834 <USB_EPStartXfer+0x4d8>
 8003806:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003808:	085b      	lsrs	r3, r3, #1
 800380a:	617b      	str	r3, [r7, #20]
 800380c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800380e:	f003 0301 	and.w	r3, r3, #1
 8003812:	2b00      	cmp	r3, #0
 8003814:	d002      	beq.n	800381c <USB_EPStartXfer+0x4c0>
 8003816:	697b      	ldr	r3, [r7, #20]
 8003818:	3301      	adds	r3, #1
 800381a:	617b      	str	r3, [r7, #20]
 800381c:	697b      	ldr	r3, [r7, #20]
 800381e:	b29b      	uxth	r3, r3
 8003820:	029b      	lsls	r3, r3, #10
 8003822:	b29b      	uxth	r3, r3
 8003824:	8023      	strh	r3, [r4, #0]
 8003826:	e02f      	b.n	8003888 <USB_EPStartXfer+0x52c>
 8003828:	ffff80c0 	.word	0xffff80c0
 800382c:	ffffc080 	.word	0xffffc080
 8003830:	ffff8080 	.word	0xffff8080
 8003834:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003836:	095b      	lsrs	r3, r3, #5
 8003838:	617b      	str	r3, [r7, #20]
 800383a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800383c:	f003 031f 	and.w	r3, r3, #31
 8003840:	2b00      	cmp	r3, #0
 8003842:	d102      	bne.n	800384a <USB_EPStartXfer+0x4ee>
 8003844:	697b      	ldr	r3, [r7, #20]
 8003846:	3b01      	subs	r3, #1
 8003848:	617b      	str	r3, [r7, #20]
 800384a:	697b      	ldr	r3, [r7, #20]
 800384c:	b29b      	uxth	r3, r3
 800384e:	029b      	lsls	r3, r3, #10
 8003850:	b29b      	uxth	r3, r3
 8003852:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003856:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800385a:	b29b      	uxth	r3, r3
 800385c:	8023      	strh	r3, [r4, #0]
 800385e:	e013      	b.n	8003888 <USB_EPStartXfer+0x52c>
 8003860:	683b      	ldr	r3, [r7, #0]
 8003862:	785b      	ldrb	r3, [r3, #1]
 8003864:	2b01      	cmp	r3, #1
 8003866:	d10f      	bne.n	8003888 <USB_EPStartXfer+0x52c>
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800386e:	b29b      	uxth	r3, r3
 8003870:	441c      	add	r4, r3
 8003872:	683b      	ldr	r3, [r7, #0]
 8003874:	781b      	ldrb	r3, [r3, #0]
 8003876:	011b      	lsls	r3, r3, #4
 8003878:	4423      	add	r3, r4
 800387a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800387e:	613b      	str	r3, [r7, #16]
 8003880:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003882:	b29a      	uxth	r2, r3
 8003884:	693b      	ldr	r3, [r7, #16]
 8003886:	801a      	strh	r2, [r3, #0]
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8003888:	687a      	ldr	r2, [r7, #4]
 800388a:	683b      	ldr	r3, [r7, #0]
 800388c:	781b      	ldrb	r3, [r3, #0]
 800388e:	009b      	lsls	r3, r3, #2
 8003890:	4413      	add	r3, r2
 8003892:	881b      	ldrh	r3, [r3, #0]
 8003894:	b29b      	uxth	r3, r3
 8003896:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800389a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800389e:	b29c      	uxth	r4, r3
 80038a0:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 80038a4:	b29c      	uxth	r4, r3
 80038a6:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 80038aa:	b29c      	uxth	r4, r3
 80038ac:	687a      	ldr	r2, [r7, #4]
 80038ae:	683b      	ldr	r3, [r7, #0]
 80038b0:	781b      	ldrb	r3, [r3, #0]
 80038b2:	009b      	lsls	r3, r3, #2
 80038b4:	441a      	add	r2, r3
 80038b6:	4b04      	ldr	r3, [pc, #16]	; (80038c8 <USB_EPStartXfer+0x56c>)
 80038b8:	4323      	orrs	r3, r4
 80038ba:	b29b      	uxth	r3, r3
 80038bc:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80038be:	2300      	movs	r3, #0
}
 80038c0:	4618      	mov	r0, r3
 80038c2:	3734      	adds	r7, #52	; 0x34
 80038c4:	46bd      	mov	sp, r7
 80038c6:	bd90      	pop	{r4, r7, pc}
 80038c8:	ffff8080 	.word	0xffff8080

080038cc <USB_EPSetStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80038cc:	b490      	push	{r4, r7}
 80038ce:	b082      	sub	sp, #8
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	6078      	str	r0, [r7, #4]
 80038d4:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 80038d6:	683b      	ldr	r3, [r7, #0]
 80038d8:	785b      	ldrb	r3, [r3, #1]
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d018      	beq.n	8003910 <USB_EPSetStall+0x44>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 80038de:	687a      	ldr	r2, [r7, #4]
 80038e0:	683b      	ldr	r3, [r7, #0]
 80038e2:	781b      	ldrb	r3, [r3, #0]
 80038e4:	009b      	lsls	r3, r3, #2
 80038e6:	4413      	add	r3, r2
 80038e8:	881b      	ldrh	r3, [r3, #0]
 80038ea:	b29b      	uxth	r3, r3
 80038ec:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80038f0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80038f4:	b29c      	uxth	r4, r3
 80038f6:	f084 0310 	eor.w	r3, r4, #16
 80038fa:	b29c      	uxth	r4, r3
 80038fc:	687a      	ldr	r2, [r7, #4]
 80038fe:	683b      	ldr	r3, [r7, #0]
 8003900:	781b      	ldrb	r3, [r3, #0]
 8003902:	009b      	lsls	r3, r3, #2
 8003904:	441a      	add	r2, r3
 8003906:	4b11      	ldr	r3, [pc, #68]	; (800394c <USB_EPSetStall+0x80>)
 8003908:	4323      	orrs	r3, r4
 800390a:	b29b      	uxth	r3, r3
 800390c:	8013      	strh	r3, [r2, #0]
 800390e:	e017      	b.n	8003940 <USB_EPSetStall+0x74>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8003910:	687a      	ldr	r2, [r7, #4]
 8003912:	683b      	ldr	r3, [r7, #0]
 8003914:	781b      	ldrb	r3, [r3, #0]
 8003916:	009b      	lsls	r3, r3, #2
 8003918:	4413      	add	r3, r2
 800391a:	881b      	ldrh	r3, [r3, #0]
 800391c:	b29b      	uxth	r3, r3
 800391e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003922:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003926:	b29c      	uxth	r4, r3
 8003928:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 800392c:	b29c      	uxth	r4, r3
 800392e:	687a      	ldr	r2, [r7, #4]
 8003930:	683b      	ldr	r3, [r7, #0]
 8003932:	781b      	ldrb	r3, [r3, #0]
 8003934:	009b      	lsls	r3, r3, #2
 8003936:	441a      	add	r2, r3
 8003938:	4b04      	ldr	r3, [pc, #16]	; (800394c <USB_EPSetStall+0x80>)
 800393a:	4323      	orrs	r3, r4
 800393c:	b29b      	uxth	r3, r3
 800393e:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8003940:	2300      	movs	r3, #0
}
 8003942:	4618      	mov	r0, r3
 8003944:	3708      	adds	r7, #8
 8003946:	46bd      	mov	sp, r7
 8003948:	bc90      	pop	{r4, r7}
 800394a:	4770      	bx	lr
 800394c:	ffff8080 	.word	0xffff8080

08003950 <USB_EPClearStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8003950:	b490      	push	{r4, r7}
 8003952:	b082      	sub	sp, #8
 8003954:	af00      	add	r7, sp, #0
 8003956:	6078      	str	r0, [r7, #4]
 8003958:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800395a:	683b      	ldr	r3, [r7, #0]
 800395c:	7b1b      	ldrb	r3, [r3, #12]
 800395e:	2b00      	cmp	r3, #0
 8003960:	d17d      	bne.n	8003a5e <USB_EPClearStall+0x10e>
  {
    if (ep->is_in != 0U)
 8003962:	683b      	ldr	r3, [r7, #0]
 8003964:	785b      	ldrb	r3, [r3, #1]
 8003966:	2b00      	cmp	r3, #0
 8003968:	d03d      	beq.n	80039e6 <USB_EPClearStall+0x96>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800396a:	687a      	ldr	r2, [r7, #4]
 800396c:	683b      	ldr	r3, [r7, #0]
 800396e:	781b      	ldrb	r3, [r3, #0]
 8003970:	009b      	lsls	r3, r3, #2
 8003972:	4413      	add	r3, r2
 8003974:	881b      	ldrh	r3, [r3, #0]
 8003976:	b29c      	uxth	r4, r3
 8003978:	4623      	mov	r3, r4
 800397a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800397e:	2b00      	cmp	r3, #0
 8003980:	d014      	beq.n	80039ac <USB_EPClearStall+0x5c>
 8003982:	687a      	ldr	r2, [r7, #4]
 8003984:	683b      	ldr	r3, [r7, #0]
 8003986:	781b      	ldrb	r3, [r3, #0]
 8003988:	009b      	lsls	r3, r3, #2
 800398a:	4413      	add	r3, r2
 800398c:	881b      	ldrh	r3, [r3, #0]
 800398e:	b29b      	uxth	r3, r3
 8003990:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003994:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003998:	b29c      	uxth	r4, r3
 800399a:	687a      	ldr	r2, [r7, #4]
 800399c:	683b      	ldr	r3, [r7, #0]
 800399e:	781b      	ldrb	r3, [r3, #0]
 80039a0:	009b      	lsls	r3, r3, #2
 80039a2:	441a      	add	r2, r3
 80039a4:	4b31      	ldr	r3, [pc, #196]	; (8003a6c <USB_EPClearStall+0x11c>)
 80039a6:	4323      	orrs	r3, r4
 80039a8:	b29b      	uxth	r3, r3
 80039aa:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80039ac:	683b      	ldr	r3, [r7, #0]
 80039ae:	78db      	ldrb	r3, [r3, #3]
 80039b0:	2b01      	cmp	r3, #1
 80039b2:	d054      	beq.n	8003a5e <USB_EPClearStall+0x10e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80039b4:	687a      	ldr	r2, [r7, #4]
 80039b6:	683b      	ldr	r3, [r7, #0]
 80039b8:	781b      	ldrb	r3, [r3, #0]
 80039ba:	009b      	lsls	r3, r3, #2
 80039bc:	4413      	add	r3, r2
 80039be:	881b      	ldrh	r3, [r3, #0]
 80039c0:	b29b      	uxth	r3, r3
 80039c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80039c6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80039ca:	b29c      	uxth	r4, r3
 80039cc:	f084 0320 	eor.w	r3, r4, #32
 80039d0:	b29c      	uxth	r4, r3
 80039d2:	687a      	ldr	r2, [r7, #4]
 80039d4:	683b      	ldr	r3, [r7, #0]
 80039d6:	781b      	ldrb	r3, [r3, #0]
 80039d8:	009b      	lsls	r3, r3, #2
 80039da:	441a      	add	r2, r3
 80039dc:	4b24      	ldr	r3, [pc, #144]	; (8003a70 <USB_EPClearStall+0x120>)
 80039de:	4323      	orrs	r3, r4
 80039e0:	b29b      	uxth	r3, r3
 80039e2:	8013      	strh	r3, [r2, #0]
 80039e4:	e03b      	b.n	8003a5e <USB_EPClearStall+0x10e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80039e6:	687a      	ldr	r2, [r7, #4]
 80039e8:	683b      	ldr	r3, [r7, #0]
 80039ea:	781b      	ldrb	r3, [r3, #0]
 80039ec:	009b      	lsls	r3, r3, #2
 80039ee:	4413      	add	r3, r2
 80039f0:	881b      	ldrh	r3, [r3, #0]
 80039f2:	b29c      	uxth	r4, r3
 80039f4:	4623      	mov	r3, r4
 80039f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d014      	beq.n	8003a28 <USB_EPClearStall+0xd8>
 80039fe:	687a      	ldr	r2, [r7, #4]
 8003a00:	683b      	ldr	r3, [r7, #0]
 8003a02:	781b      	ldrb	r3, [r3, #0]
 8003a04:	009b      	lsls	r3, r3, #2
 8003a06:	4413      	add	r3, r2
 8003a08:	881b      	ldrh	r3, [r3, #0]
 8003a0a:	b29b      	uxth	r3, r3
 8003a0c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003a10:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a14:	b29c      	uxth	r4, r3
 8003a16:	687a      	ldr	r2, [r7, #4]
 8003a18:	683b      	ldr	r3, [r7, #0]
 8003a1a:	781b      	ldrb	r3, [r3, #0]
 8003a1c:	009b      	lsls	r3, r3, #2
 8003a1e:	441a      	add	r2, r3
 8003a20:	4b14      	ldr	r3, [pc, #80]	; (8003a74 <USB_EPClearStall+0x124>)
 8003a22:	4323      	orrs	r3, r4
 8003a24:	b29b      	uxth	r3, r3
 8003a26:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8003a28:	687a      	ldr	r2, [r7, #4]
 8003a2a:	683b      	ldr	r3, [r7, #0]
 8003a2c:	781b      	ldrb	r3, [r3, #0]
 8003a2e:	009b      	lsls	r3, r3, #2
 8003a30:	4413      	add	r3, r2
 8003a32:	881b      	ldrh	r3, [r3, #0]
 8003a34:	b29b      	uxth	r3, r3
 8003a36:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003a3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a3e:	b29c      	uxth	r4, r3
 8003a40:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8003a44:	b29c      	uxth	r4, r3
 8003a46:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8003a4a:	b29c      	uxth	r4, r3
 8003a4c:	687a      	ldr	r2, [r7, #4]
 8003a4e:	683b      	ldr	r3, [r7, #0]
 8003a50:	781b      	ldrb	r3, [r3, #0]
 8003a52:	009b      	lsls	r3, r3, #2
 8003a54:	441a      	add	r2, r3
 8003a56:	4b06      	ldr	r3, [pc, #24]	; (8003a70 <USB_EPClearStall+0x120>)
 8003a58:	4323      	orrs	r3, r4
 8003a5a:	b29b      	uxth	r3, r3
 8003a5c:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8003a5e:	2300      	movs	r3, #0
}
 8003a60:	4618      	mov	r0, r3
 8003a62:	3708      	adds	r7, #8
 8003a64:	46bd      	mov	sp, r7
 8003a66:	bc90      	pop	{r4, r7}
 8003a68:	4770      	bx	lr
 8003a6a:	bf00      	nop
 8003a6c:	ffff80c0 	.word	0xffff80c0
 8003a70:	ffff8080 	.word	0xffff8080
 8003a74:	ffffc080 	.word	0xffffc080

08003a78 <USB_SetDevAddress>:
  * @param  address : new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8003a78:	b480      	push	{r7}
 8003a7a:	b083      	sub	sp, #12
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	6078      	str	r0, [r7, #4]
 8003a80:	460b      	mov	r3, r1
 8003a82:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8003a84:	78fb      	ldrb	r3, [r7, #3]
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d103      	bne.n	8003a92 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = USB_DADDR_EF;
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	2280      	movs	r2, #128	; 0x80
 8003a8e:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8003a92:	2300      	movs	r3, #0
}
 8003a94:	4618      	mov	r0, r3
 8003a96:	370c      	adds	r7, #12
 8003a98:	46bd      	mov	sp, r7
 8003a9a:	bc80      	pop	{r7}
 8003a9c:	4770      	bx	lr

08003a9e <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8003a9e:	b480      	push	{r7}
 8003aa0:	b083      	sub	sp, #12
 8003aa2:	af00      	add	r7, sp, #0
 8003aa4:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8003aa6:	2300      	movs	r3, #0
}
 8003aa8:	4618      	mov	r0, r3
 8003aaa:	370c      	adds	r7, #12
 8003aac:	46bd      	mov	sp, r7
 8003aae:	bc80      	pop	{r7}
 8003ab0:	4770      	bx	lr

08003ab2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8003ab2:	b480      	push	{r7}
 8003ab4:	b083      	sub	sp, #12
 8003ab6:	af00      	add	r7, sp, #0
 8003ab8:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8003aba:	2300      	movs	r3, #0
}
 8003abc:	4618      	mov	r0, r3
 8003abe:	370c      	adds	r7, #12
 8003ac0:	46bd      	mov	sp, r7
 8003ac2:	bc80      	pop	{r7}
 8003ac4:	4770      	bx	lr

08003ac6 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx : Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8003ac6:	b480      	push	{r7}
 8003ac8:	b085      	sub	sp, #20
 8003aca:	af00      	add	r7, sp, #0
 8003acc:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003ad4:	b29b      	uxth	r3, r3
 8003ad6:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8003ad8:	68fb      	ldr	r3, [r7, #12]
}
 8003ada:	4618      	mov	r0, r3
 8003adc:	3714      	adds	r7, #20
 8003ade:	46bd      	mov	sp, r7
 8003ae0:	bc80      	pop	{r7}
 8003ae2:	4770      	bx	lr

08003ae4 <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8003ae4:	b480      	push	{r7}
 8003ae6:	b083      	sub	sp, #12
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	6078      	str	r0, [r7, #4]
 8003aec:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8003aee:	2300      	movs	r3, #0
}
 8003af0:	4618      	mov	r0, r3
 8003af2:	370c      	adds	r7, #12
 8003af4:	46bd      	mov	sp, r7
 8003af6:	bc80      	pop	{r7}
 8003af8:	4770      	bx	lr

08003afa <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8003afa:	b480      	push	{r7}
 8003afc:	b08d      	sub	sp, #52	; 0x34
 8003afe:	af00      	add	r7, sp, #0
 8003b00:	60f8      	str	r0, [r7, #12]
 8003b02:	60b9      	str	r1, [r7, #8]
 8003b04:	4611      	mov	r1, r2
 8003b06:	461a      	mov	r2, r3
 8003b08:	460b      	mov	r3, r1
 8003b0a:	80fb      	strh	r3, [r7, #6]
 8003b0c:	4613      	mov	r3, r2
 8003b0e:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8003b10:	88bb      	ldrh	r3, [r7, #4]
 8003b12:	3301      	adds	r3, #1
 8003b14:	085b      	lsrs	r3, r3, #1
 8003b16:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8003b1c:	68bb      	ldr	r3, [r7, #8]
 8003b1e:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8003b20:	88fb      	ldrh	r3, [r7, #6]
 8003b22:	005a      	lsls	r2, r3, #1
 8003b24:	69fb      	ldr	r3, [r7, #28]
 8003b26:	4413      	add	r3, r2
 8003b28:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003b2c:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8003b2e:	6a3b      	ldr	r3, [r7, #32]
 8003b30:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003b32:	e01e      	b.n	8003b72 <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 8003b34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b36:	781b      	ldrb	r3, [r3, #0]
 8003b38:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8003b3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b3c:	3301      	adds	r3, #1
 8003b3e:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8003b40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b42:	781b      	ldrb	r3, [r3, #0]
 8003b44:	b29b      	uxth	r3, r3
 8003b46:	021b      	lsls	r3, r3, #8
 8003b48:	b29b      	uxth	r3, r3
 8003b4a:	461a      	mov	r2, r3
 8003b4c:	69bb      	ldr	r3, [r7, #24]
 8003b4e:	4313      	orrs	r3, r2
 8003b50:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8003b52:	697b      	ldr	r3, [r7, #20]
 8003b54:	b29a      	uxth	r2, r3
 8003b56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b58:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8003b5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b5c:	3302      	adds	r3, #2
 8003b5e:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 8003b60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b62:	3302      	adds	r3, #2
 8003b64:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 8003b66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b68:	3301      	adds	r3, #1
 8003b6a:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8003b6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b6e:	3b01      	subs	r3, #1
 8003b70:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003b72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d1dd      	bne.n	8003b34 <USB_WritePMA+0x3a>
  }
}
 8003b78:	bf00      	nop
 8003b7a:	3734      	adds	r7, #52	; 0x34
 8003b7c:	46bd      	mov	sp, r7
 8003b7e:	bc80      	pop	{r7}
 8003b80:	4770      	bx	lr

08003b82 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8003b82:	b480      	push	{r7}
 8003b84:	b08b      	sub	sp, #44	; 0x2c
 8003b86:	af00      	add	r7, sp, #0
 8003b88:	60f8      	str	r0, [r7, #12]
 8003b8a:	60b9      	str	r1, [r7, #8]
 8003b8c:	4611      	mov	r1, r2
 8003b8e:	461a      	mov	r2, r3
 8003b90:	460b      	mov	r3, r1
 8003b92:	80fb      	strh	r3, [r7, #6]
 8003b94:	4613      	mov	r3, r2
 8003b96:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8003b98:	88bb      	ldrh	r3, [r7, #4]
 8003b9a:	085b      	lsrs	r3, r3, #1
 8003b9c:	b29b      	uxth	r3, r3
 8003b9e:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8003ba4:	68bb      	ldr	r3, [r7, #8]
 8003ba6:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8003ba8:	88fb      	ldrh	r3, [r7, #6]
 8003baa:	005a      	lsls	r2, r3, #1
 8003bac:	697b      	ldr	r3, [r7, #20]
 8003bae:	4413      	add	r3, r2
 8003bb0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003bb4:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8003bb6:	69bb      	ldr	r3, [r7, #24]
 8003bb8:	627b      	str	r3, [r7, #36]	; 0x24
 8003bba:	e01b      	b.n	8003bf4 <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8003bbc:	6a3b      	ldr	r3, [r7, #32]
 8003bbe:	881b      	ldrh	r3, [r3, #0]
 8003bc0:	b29b      	uxth	r3, r3
 8003bc2:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8003bc4:	6a3b      	ldr	r3, [r7, #32]
 8003bc6:	3302      	adds	r3, #2
 8003bc8:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8003bca:	693b      	ldr	r3, [r7, #16]
 8003bcc:	b2da      	uxtb	r2, r3
 8003bce:	69fb      	ldr	r3, [r7, #28]
 8003bd0:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8003bd2:	69fb      	ldr	r3, [r7, #28]
 8003bd4:	3301      	adds	r3, #1
 8003bd6:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8003bd8:	693b      	ldr	r3, [r7, #16]
 8003bda:	0a1b      	lsrs	r3, r3, #8
 8003bdc:	b2da      	uxtb	r2, r3
 8003bde:	69fb      	ldr	r3, [r7, #28]
 8003be0:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8003be2:	69fb      	ldr	r3, [r7, #28]
 8003be4:	3301      	adds	r3, #1
 8003be6:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8003be8:	6a3b      	ldr	r3, [r7, #32]
 8003bea:	3302      	adds	r3, #2
 8003bec:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 8003bee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bf0:	3b01      	subs	r3, #1
 8003bf2:	627b      	str	r3, [r7, #36]	; 0x24
 8003bf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d1e0      	bne.n	8003bbc <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8003bfa:	88bb      	ldrh	r3, [r7, #4]
 8003bfc:	f003 0301 	and.w	r3, r3, #1
 8003c00:	b29b      	uxth	r3, r3
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d007      	beq.n	8003c16 <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 8003c06:	6a3b      	ldr	r3, [r7, #32]
 8003c08:	881b      	ldrh	r3, [r3, #0]
 8003c0a:	b29b      	uxth	r3, r3
 8003c0c:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8003c0e:	693b      	ldr	r3, [r7, #16]
 8003c10:	b2da      	uxtb	r2, r3
 8003c12:	69fb      	ldr	r3, [r7, #28]
 8003c14:	701a      	strb	r2, [r3, #0]
  }
}
 8003c16:	bf00      	nop
 8003c18:	372c      	adds	r7, #44	; 0x2c
 8003c1a:	46bd      	mov	sp, r7
 8003c1c:	bc80      	pop	{r7}
 8003c1e:	4770      	bx	lr

08003c20 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8003c20:	b580      	push	{r7, lr}
 8003c22:	b084      	sub	sp, #16
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	6078      	str	r0, [r7, #4]
 8003c28:	460b      	mov	r3, r1
 8003c2a:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8003c2c:	2300      	movs	r3, #0
 8003c2e:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	7c1b      	ldrb	r3, [r3, #16]
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d115      	bne.n	8003c64 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8003c38:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003c3c:	2202      	movs	r2, #2
 8003c3e:	2181      	movs	r1, #129	; 0x81
 8003c40:	6878      	ldr	r0, [r7, #4]
 8003c42:	f001 fe2c 	bl	800589e <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	2201      	movs	r2, #1
 8003c4a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8003c4c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003c50:	2202      	movs	r2, #2
 8003c52:	2101      	movs	r1, #1
 8003c54:	6878      	ldr	r0, [r7, #4]
 8003c56:	f001 fe22 	bl	800589e <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	2201      	movs	r2, #1
 8003c5e:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 8003c62:	e012      	b.n	8003c8a <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8003c64:	2340      	movs	r3, #64	; 0x40
 8003c66:	2202      	movs	r2, #2
 8003c68:	2181      	movs	r1, #129	; 0x81
 8003c6a:	6878      	ldr	r0, [r7, #4]
 8003c6c:	f001 fe17 	bl	800589e <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	2201      	movs	r2, #1
 8003c74:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8003c76:	2340      	movs	r3, #64	; 0x40
 8003c78:	2202      	movs	r2, #2
 8003c7a:	2101      	movs	r1, #1
 8003c7c:	6878      	ldr	r0, [r7, #4]
 8003c7e:	f001 fe0e 	bl	800589e <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	2201      	movs	r2, #1
 8003c86:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8003c8a:	2308      	movs	r3, #8
 8003c8c:	2203      	movs	r2, #3
 8003c8e:	2182      	movs	r1, #130	; 0x82
 8003c90:	6878      	ldr	r0, [r7, #4]
 8003c92:	f001 fe04 	bl	800589e <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	2201      	movs	r2, #1
 8003c9a:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8003c9c:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8003ca0:	f001 ff1e 	bl	8005ae0 <USBD_static_malloc>
 8003ca4:	4602      	mov	r2, r0
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d102      	bne.n	8003cbc <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8003cb6:	2301      	movs	r3, #1
 8003cb8:	73fb      	strb	r3, [r7, #15]
 8003cba:	e026      	b.n	8003d0a <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8003cc2:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8003cce:	68bb      	ldr	r3, [r7, #8]
 8003cd0:	2200      	movs	r2, #0
 8003cd2:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 8003cd6:	68bb      	ldr	r3, [r7, #8]
 8003cd8:	2200      	movs	r2, #0
 8003cda:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	7c1b      	ldrb	r3, [r3, #16]
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d109      	bne.n	8003cfa <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8003ce6:	68bb      	ldr	r3, [r7, #8]
 8003ce8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8003cec:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003cf0:	2101      	movs	r1, #1
 8003cf2:	6878      	ldr	r0, [r7, #4]
 8003cf4:	f001 febd 	bl	8005a72 <USBD_LL_PrepareReceive>
 8003cf8:	e007      	b.n	8003d0a <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8003cfa:	68bb      	ldr	r3, [r7, #8]
 8003cfc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8003d00:	2340      	movs	r3, #64	; 0x40
 8003d02:	2101      	movs	r1, #1
 8003d04:	6878      	ldr	r0, [r7, #4]
 8003d06:	f001 feb4 	bl	8005a72 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8003d0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d0c:	4618      	mov	r0, r3
 8003d0e:	3710      	adds	r7, #16
 8003d10:	46bd      	mov	sp, r7
 8003d12:	bd80      	pop	{r7, pc}

08003d14 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8003d14:	b580      	push	{r7, lr}
 8003d16:	b084      	sub	sp, #16
 8003d18:	af00      	add	r7, sp, #0
 8003d1a:	6078      	str	r0, [r7, #4]
 8003d1c:	460b      	mov	r3, r1
 8003d1e:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8003d20:	2300      	movs	r3, #0
 8003d22:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8003d24:	2181      	movs	r1, #129	; 0x81
 8003d26:	6878      	ldr	r0, [r7, #4]
 8003d28:	f001 fddf 	bl	80058ea <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	2200      	movs	r2, #0
 8003d30:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8003d32:	2101      	movs	r1, #1
 8003d34:	6878      	ldr	r0, [r7, #4]
 8003d36:	f001 fdd8 	bl	80058ea <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	2200      	movs	r2, #0
 8003d3e:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8003d42:	2182      	movs	r1, #130	; 0x82
 8003d44:	6878      	ldr	r0, [r7, #4]
 8003d46:	f001 fdd0 	bl	80058ea <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	2200      	movs	r2, #0
 8003d4e:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d00e      	beq.n	8003d78 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8003d60:	685b      	ldr	r3, [r3, #4]
 8003d62:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8003d6a:	4618      	mov	r0, r3
 8003d6c:	f001 fec4 	bl	8005af8 <USBD_static_free>
    pdev->pClassData = NULL;
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	2200      	movs	r2, #0
 8003d74:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 8003d78:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d7a:	4618      	mov	r0, r3
 8003d7c:	3710      	adds	r7, #16
 8003d7e:	46bd      	mov	sp, r7
 8003d80:	bd80      	pop	{r7, pc}

08003d82 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8003d82:	b580      	push	{r7, lr}
 8003d84:	b086      	sub	sp, #24
 8003d86:	af00      	add	r7, sp, #0
 8003d88:	6078      	str	r0, [r7, #4]
 8003d8a:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8003d92:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8003d94:	2300      	movs	r3, #0
 8003d96:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8003d98:	2300      	movs	r3, #0
 8003d9a:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8003d9c:	2300      	movs	r3, #0
 8003d9e:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8003da0:	683b      	ldr	r3, [r7, #0]
 8003da2:	781b      	ldrb	r3, [r3, #0]
 8003da4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d039      	beq.n	8003e20 <USBD_CDC_Setup+0x9e>
 8003dac:	2b20      	cmp	r3, #32
 8003dae:	d17c      	bne.n	8003eaa <USBD_CDC_Setup+0x128>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8003db0:	683b      	ldr	r3, [r7, #0]
 8003db2:	88db      	ldrh	r3, [r3, #6]
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d029      	beq.n	8003e0c <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 8003db8:	683b      	ldr	r3, [r7, #0]
 8003dba:	781b      	ldrb	r3, [r3, #0]
 8003dbc:	b25b      	sxtb	r3, r3
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	da11      	bge.n	8003de6 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8003dc8:	689b      	ldr	r3, [r3, #8]
 8003dca:	683a      	ldr	r2, [r7, #0]
 8003dcc:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8003dce:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8003dd0:	683a      	ldr	r2, [r7, #0]
 8003dd2:	88d2      	ldrh	r2, [r2, #6]
 8003dd4:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8003dd6:	6939      	ldr	r1, [r7, #16]
 8003dd8:	683b      	ldr	r3, [r7, #0]
 8003dda:	88db      	ldrh	r3, [r3, #6]
 8003ddc:	461a      	mov	r2, r3
 8003dde:	6878      	ldr	r0, [r7, #4]
 8003de0:	f001 f9c6 	bl	8005170 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8003de4:	e068      	b.n	8003eb8 <USBD_CDC_Setup+0x136>
          hcdc->CmdOpCode = req->bRequest;
 8003de6:	683b      	ldr	r3, [r7, #0]
 8003de8:	785a      	ldrb	r2, [r3, #1]
 8003dea:	693b      	ldr	r3, [r7, #16]
 8003dec:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8003df0:	683b      	ldr	r3, [r7, #0]
 8003df2:	88db      	ldrh	r3, [r3, #6]
 8003df4:	b2da      	uxtb	r2, r3
 8003df6:	693b      	ldr	r3, [r7, #16]
 8003df8:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8003dfc:	6939      	ldr	r1, [r7, #16]
 8003dfe:	683b      	ldr	r3, [r7, #0]
 8003e00:	88db      	ldrh	r3, [r3, #6]
 8003e02:	461a      	mov	r2, r3
 8003e04:	6878      	ldr	r0, [r7, #4]
 8003e06:	f001 f9e1 	bl	80051cc <USBD_CtlPrepareRx>
      break;
 8003e0a:	e055      	b.n	8003eb8 <USBD_CDC_Setup+0x136>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8003e12:	689b      	ldr	r3, [r3, #8]
 8003e14:	683a      	ldr	r2, [r7, #0]
 8003e16:	7850      	ldrb	r0, [r2, #1]
 8003e18:	2200      	movs	r2, #0
 8003e1a:	6839      	ldr	r1, [r7, #0]
 8003e1c:	4798      	blx	r3
      break;
 8003e1e:	e04b      	b.n	8003eb8 <USBD_CDC_Setup+0x136>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8003e20:	683b      	ldr	r3, [r7, #0]
 8003e22:	785b      	ldrb	r3, [r3, #1]
 8003e24:	2b0a      	cmp	r3, #10
 8003e26:	d017      	beq.n	8003e58 <USBD_CDC_Setup+0xd6>
 8003e28:	2b0b      	cmp	r3, #11
 8003e2a:	d029      	beq.n	8003e80 <USBD_CDC_Setup+0xfe>
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d133      	bne.n	8003e98 <USBD_CDC_Setup+0x116>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8003e36:	2b03      	cmp	r3, #3
 8003e38:	d107      	bne.n	8003e4a <USBD_CDC_Setup+0xc8>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8003e3a:	f107 030c 	add.w	r3, r7, #12
 8003e3e:	2202      	movs	r2, #2
 8003e40:	4619      	mov	r1, r3
 8003e42:	6878      	ldr	r0, [r7, #4]
 8003e44:	f001 f994 	bl	8005170 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8003e48:	e02e      	b.n	8003ea8 <USBD_CDC_Setup+0x126>
            USBD_CtlError(pdev, req);
 8003e4a:	6839      	ldr	r1, [r7, #0]
 8003e4c:	6878      	ldr	r0, [r7, #4]
 8003e4e:	f001 f925 	bl	800509c <USBD_CtlError>
            ret = USBD_FAIL;
 8003e52:	2302      	movs	r3, #2
 8003e54:	75fb      	strb	r3, [r7, #23]
          break;
 8003e56:	e027      	b.n	8003ea8 <USBD_CDC_Setup+0x126>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8003e5e:	2b03      	cmp	r3, #3
 8003e60:	d107      	bne.n	8003e72 <USBD_CDC_Setup+0xf0>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8003e62:	f107 030f 	add.w	r3, r7, #15
 8003e66:	2201      	movs	r2, #1
 8003e68:	4619      	mov	r1, r3
 8003e6a:	6878      	ldr	r0, [r7, #4]
 8003e6c:	f001 f980 	bl	8005170 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8003e70:	e01a      	b.n	8003ea8 <USBD_CDC_Setup+0x126>
            USBD_CtlError(pdev, req);
 8003e72:	6839      	ldr	r1, [r7, #0]
 8003e74:	6878      	ldr	r0, [r7, #4]
 8003e76:	f001 f911 	bl	800509c <USBD_CtlError>
            ret = USBD_FAIL;
 8003e7a:	2302      	movs	r3, #2
 8003e7c:	75fb      	strb	r3, [r7, #23]
          break;
 8003e7e:	e013      	b.n	8003ea8 <USBD_CDC_Setup+0x126>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8003e86:	2b03      	cmp	r3, #3
 8003e88:	d00d      	beq.n	8003ea6 <USBD_CDC_Setup+0x124>
          {
            USBD_CtlError(pdev, req);
 8003e8a:	6839      	ldr	r1, [r7, #0]
 8003e8c:	6878      	ldr	r0, [r7, #4]
 8003e8e:	f001 f905 	bl	800509c <USBD_CtlError>
            ret = USBD_FAIL;
 8003e92:	2302      	movs	r3, #2
 8003e94:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8003e96:	e006      	b.n	8003ea6 <USBD_CDC_Setup+0x124>

        default:
          USBD_CtlError(pdev, req);
 8003e98:	6839      	ldr	r1, [r7, #0]
 8003e9a:	6878      	ldr	r0, [r7, #4]
 8003e9c:	f001 f8fe 	bl	800509c <USBD_CtlError>
          ret = USBD_FAIL;
 8003ea0:	2302      	movs	r3, #2
 8003ea2:	75fb      	strb	r3, [r7, #23]
          break;
 8003ea4:	e000      	b.n	8003ea8 <USBD_CDC_Setup+0x126>
          break;
 8003ea6:	bf00      	nop
      }
      break;
 8003ea8:	e006      	b.n	8003eb8 <USBD_CDC_Setup+0x136>

    default:
      USBD_CtlError(pdev, req);
 8003eaa:	6839      	ldr	r1, [r7, #0]
 8003eac:	6878      	ldr	r0, [r7, #4]
 8003eae:	f001 f8f5 	bl	800509c <USBD_CtlError>
      ret = USBD_FAIL;
 8003eb2:	2302      	movs	r3, #2
 8003eb4:	75fb      	strb	r3, [r7, #23]
      break;
 8003eb6:	bf00      	nop
  }

  return ret;
 8003eb8:	7dfb      	ldrb	r3, [r7, #23]
}
 8003eba:	4618      	mov	r0, r3
 8003ebc:	3718      	adds	r7, #24
 8003ebe:	46bd      	mov	sp, r7
 8003ec0:	bd80      	pop	{r7, pc}

08003ec2 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8003ec2:	b580      	push	{r7, lr}
 8003ec4:	b084      	sub	sp, #16
 8003ec6:	af00      	add	r7, sp, #0
 8003ec8:	6078      	str	r0, [r7, #4]
 8003eca:	460b      	mov	r3, r1
 8003ecc:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8003ed4:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8003edc:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d037      	beq.n	8003f58 <USBD_CDC_DataIn+0x96>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8003ee8:	78fa      	ldrb	r2, [r7, #3]
 8003eea:	6879      	ldr	r1, [r7, #4]
 8003eec:	4613      	mov	r3, r2
 8003eee:	009b      	lsls	r3, r3, #2
 8003ef0:	4413      	add	r3, r2
 8003ef2:	009b      	lsls	r3, r3, #2
 8003ef4:	440b      	add	r3, r1
 8003ef6:	331c      	adds	r3, #28
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d026      	beq.n	8003f4c <USBD_CDC_DataIn+0x8a>
 8003efe:	78fa      	ldrb	r2, [r7, #3]
 8003f00:	6879      	ldr	r1, [r7, #4]
 8003f02:	4613      	mov	r3, r2
 8003f04:	009b      	lsls	r3, r3, #2
 8003f06:	4413      	add	r3, r2
 8003f08:	009b      	lsls	r3, r3, #2
 8003f0a:	440b      	add	r3, r1
 8003f0c:	331c      	adds	r3, #28
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	78fa      	ldrb	r2, [r7, #3]
 8003f12:	68b9      	ldr	r1, [r7, #8]
 8003f14:	0152      	lsls	r2, r2, #5
 8003f16:	440a      	add	r2, r1
 8003f18:	3238      	adds	r2, #56	; 0x38
 8003f1a:	6812      	ldr	r2, [r2, #0]
 8003f1c:	fbb3 f1f2 	udiv	r1, r3, r2
 8003f20:	fb02 f201 	mul.w	r2, r2, r1
 8003f24:	1a9b      	subs	r3, r3, r2
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d110      	bne.n	8003f4c <USBD_CDC_DataIn+0x8a>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8003f2a:	78fa      	ldrb	r2, [r7, #3]
 8003f2c:	6879      	ldr	r1, [r7, #4]
 8003f2e:	4613      	mov	r3, r2
 8003f30:	009b      	lsls	r3, r3, #2
 8003f32:	4413      	add	r3, r2
 8003f34:	009b      	lsls	r3, r3, #2
 8003f36:	440b      	add	r3, r1
 8003f38:	331c      	adds	r3, #28
 8003f3a:	2200      	movs	r2, #0
 8003f3c:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8003f3e:	78f9      	ldrb	r1, [r7, #3]
 8003f40:	2300      	movs	r3, #0
 8003f42:	2200      	movs	r2, #0
 8003f44:	6878      	ldr	r0, [r7, #4]
 8003f46:	f001 fd71 	bl	8005a2c <USBD_LL_Transmit>
 8003f4a:	e003      	b.n	8003f54 <USBD_CDC_DataIn+0x92>
    }
    else
    {
      hcdc->TxState = 0U;
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	2200      	movs	r2, #0
 8003f50:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 8003f54:	2300      	movs	r3, #0
 8003f56:	e000      	b.n	8003f5a <USBD_CDC_DataIn+0x98>
  }
  else
  {
    return USBD_FAIL;
 8003f58:	2302      	movs	r3, #2
  }
}
 8003f5a:	4618      	mov	r0, r3
 8003f5c:	3710      	adds	r7, #16
 8003f5e:	46bd      	mov	sp, r7
 8003f60:	bd80      	pop	{r7, pc}

08003f62 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8003f62:	b580      	push	{r7, lr}
 8003f64:	b084      	sub	sp, #16
 8003f66:	af00      	add	r7, sp, #0
 8003f68:	6078      	str	r0, [r7, #4]
 8003f6a:	460b      	mov	r3, r1
 8003f6c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8003f74:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8003f76:	78fb      	ldrb	r3, [r7, #3]
 8003f78:	4619      	mov	r1, r3
 8003f7a:	6878      	ldr	r0, [r7, #4]
 8003f7c:	f001 fd9c 	bl	8005ab8 <USBD_LL_GetRxDataSize>
 8003f80:	4602      	mov	r2, r0
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d00d      	beq.n	8003fae <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8003f98:	68db      	ldr	r3, [r3, #12]
 8003f9a:	68fa      	ldr	r2, [r7, #12]
 8003f9c:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8003fa0:	68fa      	ldr	r2, [r7, #12]
 8003fa2:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8003fa6:	4611      	mov	r1, r2
 8003fa8:	4798      	blx	r3

    return USBD_OK;
 8003faa:	2300      	movs	r3, #0
 8003fac:	e000      	b.n	8003fb0 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8003fae:	2302      	movs	r3, #2
  }
}
 8003fb0:	4618      	mov	r0, r3
 8003fb2:	3710      	adds	r7, #16
 8003fb4:	46bd      	mov	sp, r7
 8003fb6:	bd80      	pop	{r7, pc}

08003fb8 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8003fb8:	b580      	push	{r7, lr}
 8003fba:	b084      	sub	sp, #16
 8003fbc:	af00      	add	r7, sp, #0
 8003fbe:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8003fc6:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d015      	beq.n	8003ffe <USBD_CDC_EP0_RxReady+0x46>
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8003fd8:	2bff      	cmp	r3, #255	; 0xff
 8003fda:	d010      	beq.n	8003ffe <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8003fe2:	689b      	ldr	r3, [r3, #8]
 8003fe4:	68fa      	ldr	r2, [r7, #12]
 8003fe6:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8003fea:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8003fec:	68fa      	ldr	r2, [r7, #12]
 8003fee:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8003ff2:	b292      	uxth	r2, r2
 8003ff4:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	22ff      	movs	r2, #255	; 0xff
 8003ffa:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 8003ffe:	2300      	movs	r3, #0
}
 8004000:	4618      	mov	r0, r3
 8004002:	3710      	adds	r7, #16
 8004004:	46bd      	mov	sp, r7
 8004006:	bd80      	pop	{r7, pc}

08004008 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8004008:	b480      	push	{r7}
 800400a:	b083      	sub	sp, #12
 800400c:	af00      	add	r7, sp, #0
 800400e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	2243      	movs	r2, #67	; 0x43
 8004014:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8004016:	4b03      	ldr	r3, [pc, #12]	; (8004024 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8004018:	4618      	mov	r0, r3
 800401a:	370c      	adds	r7, #12
 800401c:	46bd      	mov	sp, r7
 800401e:	bc80      	pop	{r7}
 8004020:	4770      	bx	lr
 8004022:	bf00      	nop
 8004024:	200000a0 	.word	0x200000a0

08004028 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8004028:	b480      	push	{r7}
 800402a:	b083      	sub	sp, #12
 800402c:	af00      	add	r7, sp, #0
 800402e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	2243      	movs	r2, #67	; 0x43
 8004034:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8004036:	4b03      	ldr	r3, [pc, #12]	; (8004044 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8004038:	4618      	mov	r0, r3
 800403a:	370c      	adds	r7, #12
 800403c:	46bd      	mov	sp, r7
 800403e:	bc80      	pop	{r7}
 8004040:	4770      	bx	lr
 8004042:	bf00      	nop
 8004044:	2000005c 	.word	0x2000005c

08004048 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8004048:	b480      	push	{r7}
 800404a:	b083      	sub	sp, #12
 800404c:	af00      	add	r7, sp, #0
 800404e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	2243      	movs	r2, #67	; 0x43
 8004054:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8004056:	4b03      	ldr	r3, [pc, #12]	; (8004064 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8004058:	4618      	mov	r0, r3
 800405a:	370c      	adds	r7, #12
 800405c:	46bd      	mov	sp, r7
 800405e:	bc80      	pop	{r7}
 8004060:	4770      	bx	lr
 8004062:	bf00      	nop
 8004064:	200000e4 	.word	0x200000e4

08004068 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8004068:	b480      	push	{r7}
 800406a:	b083      	sub	sp, #12
 800406c:	af00      	add	r7, sp, #0
 800406e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	220a      	movs	r2, #10
 8004074:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8004076:	4b03      	ldr	r3, [pc, #12]	; (8004084 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8004078:	4618      	mov	r0, r3
 800407a:	370c      	adds	r7, #12
 800407c:	46bd      	mov	sp, r7
 800407e:	bc80      	pop	{r7}
 8004080:	4770      	bx	lr
 8004082:	bf00      	nop
 8004084:	20000018 	.word	0x20000018

08004088 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8004088:	b480      	push	{r7}
 800408a:	b085      	sub	sp, #20
 800408c:	af00      	add	r7, sp, #0
 800408e:	6078      	str	r0, [r7, #4]
 8004090:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8004092:	2302      	movs	r3, #2
 8004094:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 8004096:	683b      	ldr	r3, [r7, #0]
 8004098:	2b00      	cmp	r3, #0
 800409a:	d005      	beq.n	80040a8 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	683a      	ldr	r2, [r7, #0]
 80040a0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 80040a4:	2300      	movs	r3, #0
 80040a6:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80040a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80040aa:	4618      	mov	r0, r3
 80040ac:	3714      	adds	r7, #20
 80040ae:	46bd      	mov	sp, r7
 80040b0:	bc80      	pop	{r7}
 80040b2:	4770      	bx	lr

080040b4 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 80040b4:	b480      	push	{r7}
 80040b6:	b087      	sub	sp, #28
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	60f8      	str	r0, [r7, #12]
 80040bc:	60b9      	str	r1, [r7, #8]
 80040be:	4613      	mov	r3, r2
 80040c0:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80040c8:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 80040ca:	697b      	ldr	r3, [r7, #20]
 80040cc:	68ba      	ldr	r2, [r7, #8]
 80040ce:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80040d2:	88fa      	ldrh	r2, [r7, #6]
 80040d4:	697b      	ldr	r3, [r7, #20]
 80040d6:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 80040da:	2300      	movs	r3, #0
}
 80040dc:	4618      	mov	r0, r3
 80040de:	371c      	adds	r7, #28
 80040e0:	46bd      	mov	sp, r7
 80040e2:	bc80      	pop	{r7}
 80040e4:	4770      	bx	lr

080040e6 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 80040e6:	b480      	push	{r7}
 80040e8:	b085      	sub	sp, #20
 80040ea:	af00      	add	r7, sp, #0
 80040ec:	6078      	str	r0, [r7, #4]
 80040ee:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80040f6:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	683a      	ldr	r2, [r7, #0]
 80040fc:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 8004100:	2300      	movs	r3, #0
}
 8004102:	4618      	mov	r0, r3
 8004104:	3714      	adds	r7, #20
 8004106:	46bd      	mov	sp, r7
 8004108:	bc80      	pop	{r7}
 800410a:	4770      	bx	lr

0800410c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800410c:	b580      	push	{r7, lr}
 800410e:	b084      	sub	sp, #16
 8004110:	af00      	add	r7, sp, #0
 8004112:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800411a:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004122:	2b00      	cmp	r3, #0
 8004124:	d017      	beq.n	8004156 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	7c1b      	ldrb	r3, [r3, #16]
 800412a:	2b00      	cmp	r3, #0
 800412c:	d109      	bne.n	8004142 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004134:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004138:	2101      	movs	r1, #1
 800413a:	6878      	ldr	r0, [r7, #4]
 800413c:	f001 fc99 	bl	8005a72 <USBD_LL_PrepareReceive>
 8004140:	e007      	b.n	8004152 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004148:	2340      	movs	r3, #64	; 0x40
 800414a:	2101      	movs	r1, #1
 800414c:	6878      	ldr	r0, [r7, #4]
 800414e:	f001 fc90 	bl	8005a72 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8004152:	2300      	movs	r3, #0
 8004154:	e000      	b.n	8004158 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8004156:	2302      	movs	r3, #2
  }
}
 8004158:	4618      	mov	r0, r3
 800415a:	3710      	adds	r7, #16
 800415c:	46bd      	mov	sp, r7
 800415e:	bd80      	pop	{r7, pc}

08004160 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8004160:	b580      	push	{r7, lr}
 8004162:	b084      	sub	sp, #16
 8004164:	af00      	add	r7, sp, #0
 8004166:	60f8      	str	r0, [r7, #12]
 8004168:	60b9      	str	r1, [r7, #8]
 800416a:	4613      	mov	r3, r2
 800416c:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	2b00      	cmp	r3, #0
 8004172:	d101      	bne.n	8004178 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8004174:	2302      	movs	r3, #2
 8004176:	e01a      	b.n	80041ae <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800417e:	2b00      	cmp	r3, #0
 8004180:	d003      	beq.n	800418a <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	2200      	movs	r2, #0
 8004186:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800418a:	68bb      	ldr	r3, [r7, #8]
 800418c:	2b00      	cmp	r3, #0
 800418e:	d003      	beq.n	8004198 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	68ba      	ldr	r2, [r7, #8]
 8004194:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	2201      	movs	r2, #1
 800419c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	79fa      	ldrb	r2, [r7, #7]
 80041a4:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 80041a6:	68f8      	ldr	r0, [r7, #12]
 80041a8:	f001 fb04 	bl	80057b4 <USBD_LL_Init>

  return USBD_OK;
 80041ac:	2300      	movs	r3, #0
}
 80041ae:	4618      	mov	r0, r3
 80041b0:	3710      	adds	r7, #16
 80041b2:	46bd      	mov	sp, r7
 80041b4:	bd80      	pop	{r7, pc}

080041b6 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80041b6:	b480      	push	{r7}
 80041b8:	b085      	sub	sp, #20
 80041ba:	af00      	add	r7, sp, #0
 80041bc:	6078      	str	r0, [r7, #4]
 80041be:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 80041c0:	2300      	movs	r3, #0
 80041c2:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 80041c4:	683b      	ldr	r3, [r7, #0]
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d006      	beq.n	80041d8 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	683a      	ldr	r2, [r7, #0]
 80041ce:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 80041d2:	2300      	movs	r3, #0
 80041d4:	73fb      	strb	r3, [r7, #15]
 80041d6:	e001      	b.n	80041dc <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 80041d8:	2302      	movs	r3, #2
 80041da:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80041dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80041de:	4618      	mov	r0, r3
 80041e0:	3714      	adds	r7, #20
 80041e2:	46bd      	mov	sp, r7
 80041e4:	bc80      	pop	{r7}
 80041e6:	4770      	bx	lr

080041e8 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 80041e8:	b580      	push	{r7, lr}
 80041ea:	b082      	sub	sp, #8
 80041ec:	af00      	add	r7, sp, #0
 80041ee:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 80041f0:	6878      	ldr	r0, [r7, #4]
 80041f2:	f001 fb39 	bl	8005868 <USBD_LL_Start>

  return USBD_OK;
 80041f6:	2300      	movs	r3, #0
}
 80041f8:	4618      	mov	r0, r3
 80041fa:	3708      	adds	r7, #8
 80041fc:	46bd      	mov	sp, r7
 80041fe:	bd80      	pop	{r7, pc}

08004200 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8004200:	b480      	push	{r7}
 8004202:	b083      	sub	sp, #12
 8004204:	af00      	add	r7, sp, #0
 8004206:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8004208:	2300      	movs	r3, #0
}
 800420a:	4618      	mov	r0, r3
 800420c:	370c      	adds	r7, #12
 800420e:	46bd      	mov	sp, r7
 8004210:	bc80      	pop	{r7}
 8004212:	4770      	bx	lr

08004214 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8004214:	b580      	push	{r7, lr}
 8004216:	b084      	sub	sp, #16
 8004218:	af00      	add	r7, sp, #0
 800421a:	6078      	str	r0, [r7, #4]
 800421c:	460b      	mov	r3, r1
 800421e:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8004220:	2302      	movs	r3, #2
 8004222:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800422a:	2b00      	cmp	r3, #0
 800422c:	d00c      	beq.n	8004248 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	78fa      	ldrb	r2, [r7, #3]
 8004238:	4611      	mov	r1, r2
 800423a:	6878      	ldr	r0, [r7, #4]
 800423c:	4798      	blx	r3
 800423e:	4603      	mov	r3, r0
 8004240:	2b00      	cmp	r3, #0
 8004242:	d101      	bne.n	8004248 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8004244:	2300      	movs	r3, #0
 8004246:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8004248:	7bfb      	ldrb	r3, [r7, #15]
}
 800424a:	4618      	mov	r0, r3
 800424c:	3710      	adds	r7, #16
 800424e:	46bd      	mov	sp, r7
 8004250:	bd80      	pop	{r7, pc}

08004252 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8004252:	b580      	push	{r7, lr}
 8004254:	b082      	sub	sp, #8
 8004256:	af00      	add	r7, sp, #0
 8004258:	6078      	str	r0, [r7, #4]
 800425a:	460b      	mov	r3, r1
 800425c:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004264:	685b      	ldr	r3, [r3, #4]
 8004266:	78fa      	ldrb	r2, [r7, #3]
 8004268:	4611      	mov	r1, r2
 800426a:	6878      	ldr	r0, [r7, #4]
 800426c:	4798      	blx	r3

  return USBD_OK;
 800426e:	2300      	movs	r3, #0
}
 8004270:	4618      	mov	r0, r3
 8004272:	3708      	adds	r7, #8
 8004274:	46bd      	mov	sp, r7
 8004276:	bd80      	pop	{r7, pc}

08004278 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8004278:	b580      	push	{r7, lr}
 800427a:	b082      	sub	sp, #8
 800427c:	af00      	add	r7, sp, #0
 800427e:	6078      	str	r0, [r7, #4]
 8004280:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8004288:	6839      	ldr	r1, [r7, #0]
 800428a:	4618      	mov	r0, r3
 800428c:	f000 feca 	bl	8005024 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	2201      	movs	r2, #1
 8004294:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800429e:	461a      	mov	r2, r3
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80042ac:	f003 031f 	and.w	r3, r3, #31
 80042b0:	2b01      	cmp	r3, #1
 80042b2:	d00c      	beq.n	80042ce <USBD_LL_SetupStage+0x56>
 80042b4:	2b01      	cmp	r3, #1
 80042b6:	d302      	bcc.n	80042be <USBD_LL_SetupStage+0x46>
 80042b8:	2b02      	cmp	r3, #2
 80042ba:	d010      	beq.n	80042de <USBD_LL_SetupStage+0x66>
 80042bc:	e017      	b.n	80042ee <USBD_LL_SetupStage+0x76>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80042c4:	4619      	mov	r1, r3
 80042c6:	6878      	ldr	r0, [r7, #4]
 80042c8:	f000 f9ca 	bl	8004660 <USBD_StdDevReq>
      break;
 80042cc:	e01a      	b.n	8004304 <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80042d4:	4619      	mov	r1, r3
 80042d6:	6878      	ldr	r0, [r7, #4]
 80042d8:	f000 fa2c 	bl	8004734 <USBD_StdItfReq>
      break;
 80042dc:	e012      	b.n	8004304 <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80042e4:	4619      	mov	r1, r3
 80042e6:	6878      	ldr	r0, [r7, #4]
 80042e8:	f000 fa6a 	bl	80047c0 <USBD_StdEPReq>
      break;
 80042ec:	e00a      	b.n	8004304 <USBD_LL_SetupStage+0x8c>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80042f4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80042f8:	b2db      	uxtb	r3, r3
 80042fa:	4619      	mov	r1, r3
 80042fc:	6878      	ldr	r0, [r7, #4]
 80042fe:	f001 fb13 	bl	8005928 <USBD_LL_StallEP>
      break;
 8004302:	bf00      	nop
  }

  return USBD_OK;
 8004304:	2300      	movs	r3, #0
}
 8004306:	4618      	mov	r0, r3
 8004308:	3708      	adds	r7, #8
 800430a:	46bd      	mov	sp, r7
 800430c:	bd80      	pop	{r7, pc}

0800430e <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800430e:	b580      	push	{r7, lr}
 8004310:	b086      	sub	sp, #24
 8004312:	af00      	add	r7, sp, #0
 8004314:	60f8      	str	r0, [r7, #12]
 8004316:	460b      	mov	r3, r1
 8004318:	607a      	str	r2, [r7, #4]
 800431a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800431c:	7afb      	ldrb	r3, [r7, #11]
 800431e:	2b00      	cmp	r3, #0
 8004320:	d14b      	bne.n	80043ba <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8004328:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8004330:	2b03      	cmp	r3, #3
 8004332:	d134      	bne.n	800439e <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8004334:	697b      	ldr	r3, [r7, #20]
 8004336:	68da      	ldr	r2, [r3, #12]
 8004338:	697b      	ldr	r3, [r7, #20]
 800433a:	691b      	ldr	r3, [r3, #16]
 800433c:	429a      	cmp	r2, r3
 800433e:	d919      	bls.n	8004374 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8004340:	697b      	ldr	r3, [r7, #20]
 8004342:	68da      	ldr	r2, [r3, #12]
 8004344:	697b      	ldr	r3, [r7, #20]
 8004346:	691b      	ldr	r3, [r3, #16]
 8004348:	1ad2      	subs	r2, r2, r3
 800434a:	697b      	ldr	r3, [r7, #20]
 800434c:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800434e:	697b      	ldr	r3, [r7, #20]
 8004350:	68da      	ldr	r2, [r3, #12]
 8004352:	697b      	ldr	r3, [r7, #20]
 8004354:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8004356:	429a      	cmp	r2, r3
 8004358:	d203      	bcs.n	8004362 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800435a:	697b      	ldr	r3, [r7, #20]
 800435c:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 800435e:	b29b      	uxth	r3, r3
 8004360:	e002      	b.n	8004368 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8004362:	697b      	ldr	r3, [r7, #20]
 8004364:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8004366:	b29b      	uxth	r3, r3
 8004368:	461a      	mov	r2, r3
 800436a:	6879      	ldr	r1, [r7, #4]
 800436c:	68f8      	ldr	r0, [r7, #12]
 800436e:	f000 ff4b 	bl	8005208 <USBD_CtlContinueRx>
 8004372:	e038      	b.n	80043e6 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800437a:	691b      	ldr	r3, [r3, #16]
 800437c:	2b00      	cmp	r3, #0
 800437e:	d00a      	beq.n	8004396 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8004386:	2b03      	cmp	r3, #3
 8004388:	d105      	bne.n	8004396 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004390:	691b      	ldr	r3, [r3, #16]
 8004392:	68f8      	ldr	r0, [r7, #12]
 8004394:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8004396:	68f8      	ldr	r0, [r7, #12]
 8004398:	f000 ff48 	bl	800522c <USBD_CtlSendStatus>
 800439c:	e023      	b.n	80043e6 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80043a4:	2b05      	cmp	r3, #5
 80043a6:	d11e      	bne.n	80043e6 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	2200      	movs	r2, #0
 80043ac:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 80043b0:	2100      	movs	r1, #0
 80043b2:	68f8      	ldr	r0, [r7, #12]
 80043b4:	f001 fab8 	bl	8005928 <USBD_LL_StallEP>
 80043b8:	e015      	b.n	80043e6 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80043c0:	699b      	ldr	r3, [r3, #24]
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d00d      	beq.n	80043e2 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 80043cc:	2b03      	cmp	r3, #3
 80043ce:	d108      	bne.n	80043e2 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80043d6:	699b      	ldr	r3, [r3, #24]
 80043d8:	7afa      	ldrb	r2, [r7, #11]
 80043da:	4611      	mov	r1, r2
 80043dc:	68f8      	ldr	r0, [r7, #12]
 80043de:	4798      	blx	r3
 80043e0:	e001      	b.n	80043e6 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80043e2:	2302      	movs	r3, #2
 80043e4:	e000      	b.n	80043e8 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 80043e6:	2300      	movs	r3, #0
}
 80043e8:	4618      	mov	r0, r3
 80043ea:	3718      	adds	r7, #24
 80043ec:	46bd      	mov	sp, r7
 80043ee:	bd80      	pop	{r7, pc}

080043f0 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80043f0:	b580      	push	{r7, lr}
 80043f2:	b086      	sub	sp, #24
 80043f4:	af00      	add	r7, sp, #0
 80043f6:	60f8      	str	r0, [r7, #12]
 80043f8:	460b      	mov	r3, r1
 80043fa:	607a      	str	r2, [r7, #4]
 80043fc:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80043fe:	7afb      	ldrb	r3, [r7, #11]
 8004400:	2b00      	cmp	r3, #0
 8004402:	d17f      	bne.n	8004504 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	3314      	adds	r3, #20
 8004408:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8004410:	2b02      	cmp	r3, #2
 8004412:	d15c      	bne.n	80044ce <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8004414:	697b      	ldr	r3, [r7, #20]
 8004416:	68da      	ldr	r2, [r3, #12]
 8004418:	697b      	ldr	r3, [r7, #20]
 800441a:	691b      	ldr	r3, [r3, #16]
 800441c:	429a      	cmp	r2, r3
 800441e:	d915      	bls.n	800444c <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8004420:	697b      	ldr	r3, [r7, #20]
 8004422:	68da      	ldr	r2, [r3, #12]
 8004424:	697b      	ldr	r3, [r7, #20]
 8004426:	691b      	ldr	r3, [r3, #16]
 8004428:	1ad2      	subs	r2, r2, r3
 800442a:	697b      	ldr	r3, [r7, #20]
 800442c:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 800442e:	697b      	ldr	r3, [r7, #20]
 8004430:	68db      	ldr	r3, [r3, #12]
 8004432:	b29b      	uxth	r3, r3
 8004434:	461a      	mov	r2, r3
 8004436:	6879      	ldr	r1, [r7, #4]
 8004438:	68f8      	ldr	r0, [r7, #12]
 800443a:	f000 feb5 	bl	80051a8 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800443e:	2300      	movs	r3, #0
 8004440:	2200      	movs	r2, #0
 8004442:	2100      	movs	r1, #0
 8004444:	68f8      	ldr	r0, [r7, #12]
 8004446:	f001 fb14 	bl	8005a72 <USBD_LL_PrepareReceive>
 800444a:	e04e      	b.n	80044ea <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800444c:	697b      	ldr	r3, [r7, #20]
 800444e:	689b      	ldr	r3, [r3, #8]
 8004450:	697a      	ldr	r2, [r7, #20]
 8004452:	6912      	ldr	r2, [r2, #16]
 8004454:	fbb3 f1f2 	udiv	r1, r3, r2
 8004458:	fb02 f201 	mul.w	r2, r2, r1
 800445c:	1a9b      	subs	r3, r3, r2
 800445e:	2b00      	cmp	r3, #0
 8004460:	d11c      	bne.n	800449c <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8004462:	697b      	ldr	r3, [r7, #20]
 8004464:	689a      	ldr	r2, [r3, #8]
 8004466:	697b      	ldr	r3, [r7, #20]
 8004468:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800446a:	429a      	cmp	r2, r3
 800446c:	d316      	bcc.n	800449c <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 800446e:	697b      	ldr	r3, [r7, #20]
 8004470:	689a      	ldr	r2, [r3, #8]
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8004478:	429a      	cmp	r2, r3
 800447a:	d20f      	bcs.n	800449c <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800447c:	2200      	movs	r2, #0
 800447e:	2100      	movs	r1, #0
 8004480:	68f8      	ldr	r0, [r7, #12]
 8004482:	f000 fe91 	bl	80051a8 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	2200      	movs	r2, #0
 800448a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800448e:	2300      	movs	r3, #0
 8004490:	2200      	movs	r2, #0
 8004492:	2100      	movs	r1, #0
 8004494:	68f8      	ldr	r0, [r7, #12]
 8004496:	f001 faec 	bl	8005a72 <USBD_LL_PrepareReceive>
 800449a:	e026      	b.n	80044ea <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80044a2:	68db      	ldr	r3, [r3, #12]
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d00a      	beq.n	80044be <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80044ae:	2b03      	cmp	r3, #3
 80044b0:	d105      	bne.n	80044be <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80044b8:	68db      	ldr	r3, [r3, #12]
 80044ba:	68f8      	ldr	r0, [r7, #12]
 80044bc:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 80044be:	2180      	movs	r1, #128	; 0x80
 80044c0:	68f8      	ldr	r0, [r7, #12]
 80044c2:	f001 fa31 	bl	8005928 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 80044c6:	68f8      	ldr	r0, [r7, #12]
 80044c8:	f000 fec3 	bl	8005252 <USBD_CtlReceiveStatus>
 80044cc:	e00d      	b.n	80044ea <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80044d4:	2b04      	cmp	r3, #4
 80044d6:	d004      	beq.n	80044e2 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d103      	bne.n	80044ea <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 80044e2:	2180      	movs	r1, #128	; 0x80
 80044e4:	68f8      	ldr	r0, [r7, #12]
 80044e6:	f001 fa1f 	bl	8005928 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80044f0:	2b01      	cmp	r3, #1
 80044f2:	d11d      	bne.n	8004530 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 80044f4:	68f8      	ldr	r0, [r7, #12]
 80044f6:	f7ff fe83 	bl	8004200 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	2200      	movs	r2, #0
 80044fe:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8004502:	e015      	b.n	8004530 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800450a:	695b      	ldr	r3, [r3, #20]
 800450c:	2b00      	cmp	r3, #0
 800450e:	d00d      	beq.n	800452c <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8004516:	2b03      	cmp	r3, #3
 8004518:	d108      	bne.n	800452c <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004520:	695b      	ldr	r3, [r3, #20]
 8004522:	7afa      	ldrb	r2, [r7, #11]
 8004524:	4611      	mov	r1, r2
 8004526:	68f8      	ldr	r0, [r7, #12]
 8004528:	4798      	blx	r3
 800452a:	e001      	b.n	8004530 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800452c:	2302      	movs	r3, #2
 800452e:	e000      	b.n	8004532 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8004530:	2300      	movs	r3, #0
}
 8004532:	4618      	mov	r0, r3
 8004534:	3718      	adds	r7, #24
 8004536:	46bd      	mov	sp, r7
 8004538:	bd80      	pop	{r7, pc}

0800453a <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800453a:	b580      	push	{r7, lr}
 800453c:	b082      	sub	sp, #8
 800453e:	af00      	add	r7, sp, #0
 8004540:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8004542:	2340      	movs	r3, #64	; 0x40
 8004544:	2200      	movs	r2, #0
 8004546:	2100      	movs	r1, #0
 8004548:	6878      	ldr	r0, [r7, #4]
 800454a:	f001 f9a8 	bl	800589e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	2201      	movs	r2, #1
 8004552:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	2240      	movs	r2, #64	; 0x40
 800455a:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800455e:	2340      	movs	r3, #64	; 0x40
 8004560:	2200      	movs	r2, #0
 8004562:	2180      	movs	r1, #128	; 0x80
 8004564:	6878      	ldr	r0, [r7, #4]
 8004566:	f001 f99a 	bl	800589e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	2201      	movs	r2, #1
 800456e:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	2240      	movs	r2, #64	; 0x40
 8004574:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	2201      	movs	r2, #1
 800457a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	2200      	movs	r2, #0
 8004582:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	2200      	movs	r2, #0
 800458a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	2200      	movs	r2, #0
 8004590:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800459a:	2b00      	cmp	r3, #0
 800459c:	d009      	beq.n	80045b2 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80045a4:	685b      	ldr	r3, [r3, #4]
 80045a6:	687a      	ldr	r2, [r7, #4]
 80045a8:	6852      	ldr	r2, [r2, #4]
 80045aa:	b2d2      	uxtb	r2, r2
 80045ac:	4611      	mov	r1, r2
 80045ae:	6878      	ldr	r0, [r7, #4]
 80045b0:	4798      	blx	r3
  }

  return USBD_OK;
 80045b2:	2300      	movs	r3, #0
}
 80045b4:	4618      	mov	r0, r3
 80045b6:	3708      	adds	r7, #8
 80045b8:	46bd      	mov	sp, r7
 80045ba:	bd80      	pop	{r7, pc}

080045bc <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80045bc:	b480      	push	{r7}
 80045be:	b083      	sub	sp, #12
 80045c0:	af00      	add	r7, sp, #0
 80045c2:	6078      	str	r0, [r7, #4]
 80045c4:	460b      	mov	r3, r1
 80045c6:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	78fa      	ldrb	r2, [r7, #3]
 80045cc:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80045ce:	2300      	movs	r3, #0
}
 80045d0:	4618      	mov	r0, r3
 80045d2:	370c      	adds	r7, #12
 80045d4:	46bd      	mov	sp, r7
 80045d6:	bc80      	pop	{r7}
 80045d8:	4770      	bx	lr

080045da <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80045da:	b480      	push	{r7}
 80045dc:	b083      	sub	sp, #12
 80045de:	af00      	add	r7, sp, #0
 80045e0:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	2204      	movs	r2, #4
 80045f2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80045f6:	2300      	movs	r3, #0
}
 80045f8:	4618      	mov	r0, r3
 80045fa:	370c      	adds	r7, #12
 80045fc:	46bd      	mov	sp, r7
 80045fe:	bc80      	pop	{r7}
 8004600:	4770      	bx	lr

08004602 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8004602:	b480      	push	{r7}
 8004604:	b083      	sub	sp, #12
 8004606:	af00      	add	r7, sp, #0
 8004608:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004610:	2b04      	cmp	r3, #4
 8004612:	d105      	bne.n	8004620 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8004620:	2300      	movs	r3, #0
}
 8004622:	4618      	mov	r0, r3
 8004624:	370c      	adds	r7, #12
 8004626:	46bd      	mov	sp, r7
 8004628:	bc80      	pop	{r7}
 800462a:	4770      	bx	lr

0800462c <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800462c:	b580      	push	{r7, lr}
 800462e:	b082      	sub	sp, #8
 8004630:	af00      	add	r7, sp, #0
 8004632:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800463a:	2b03      	cmp	r3, #3
 800463c:	d10b      	bne.n	8004656 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004644:	69db      	ldr	r3, [r3, #28]
 8004646:	2b00      	cmp	r3, #0
 8004648:	d005      	beq.n	8004656 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004650:	69db      	ldr	r3, [r3, #28]
 8004652:	6878      	ldr	r0, [r7, #4]
 8004654:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8004656:	2300      	movs	r3, #0
}
 8004658:	4618      	mov	r0, r3
 800465a:	3708      	adds	r7, #8
 800465c:	46bd      	mov	sp, r7
 800465e:	bd80      	pop	{r7, pc}

08004660 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8004660:	b580      	push	{r7, lr}
 8004662:	b084      	sub	sp, #16
 8004664:	af00      	add	r7, sp, #0
 8004666:	6078      	str	r0, [r7, #4]
 8004668:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800466a:	2300      	movs	r3, #0
 800466c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800466e:	683b      	ldr	r3, [r7, #0]
 8004670:	781b      	ldrb	r3, [r3, #0]
 8004672:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8004676:	2b20      	cmp	r3, #32
 8004678:	d004      	beq.n	8004684 <USBD_StdDevReq+0x24>
 800467a:	2b40      	cmp	r3, #64	; 0x40
 800467c:	d002      	beq.n	8004684 <USBD_StdDevReq+0x24>
 800467e:	2b00      	cmp	r3, #0
 8004680:	d008      	beq.n	8004694 <USBD_StdDevReq+0x34>
 8004682:	e04c      	b.n	800471e <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800468a:	689b      	ldr	r3, [r3, #8]
 800468c:	6839      	ldr	r1, [r7, #0]
 800468e:	6878      	ldr	r0, [r7, #4]
 8004690:	4798      	blx	r3
      break;
 8004692:	e049      	b.n	8004728 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8004694:	683b      	ldr	r3, [r7, #0]
 8004696:	785b      	ldrb	r3, [r3, #1]
 8004698:	2b09      	cmp	r3, #9
 800469a:	d83a      	bhi.n	8004712 <USBD_StdDevReq+0xb2>
 800469c:	a201      	add	r2, pc, #4	; (adr r2, 80046a4 <USBD_StdDevReq+0x44>)
 800469e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046a2:	bf00      	nop
 80046a4:	080046f5 	.word	0x080046f5
 80046a8:	08004709 	.word	0x08004709
 80046ac:	08004713 	.word	0x08004713
 80046b0:	080046ff 	.word	0x080046ff
 80046b4:	08004713 	.word	0x08004713
 80046b8:	080046d7 	.word	0x080046d7
 80046bc:	080046cd 	.word	0x080046cd
 80046c0:	08004713 	.word	0x08004713
 80046c4:	080046eb 	.word	0x080046eb
 80046c8:	080046e1 	.word	0x080046e1
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80046cc:	6839      	ldr	r1, [r7, #0]
 80046ce:	6878      	ldr	r0, [r7, #4]
 80046d0:	f000 f9d4 	bl	8004a7c <USBD_GetDescriptor>
          break;
 80046d4:	e022      	b.n	800471c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80046d6:	6839      	ldr	r1, [r7, #0]
 80046d8:	6878      	ldr	r0, [r7, #4]
 80046da:	f000 fb37 	bl	8004d4c <USBD_SetAddress>
          break;
 80046de:	e01d      	b.n	800471c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 80046e0:	6839      	ldr	r1, [r7, #0]
 80046e2:	6878      	ldr	r0, [r7, #4]
 80046e4:	f000 fb74 	bl	8004dd0 <USBD_SetConfig>
          break;
 80046e8:	e018      	b.n	800471c <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80046ea:	6839      	ldr	r1, [r7, #0]
 80046ec:	6878      	ldr	r0, [r7, #4]
 80046ee:	f000 fbfd 	bl	8004eec <USBD_GetConfig>
          break;
 80046f2:	e013      	b.n	800471c <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80046f4:	6839      	ldr	r1, [r7, #0]
 80046f6:	6878      	ldr	r0, [r7, #4]
 80046f8:	f000 fc2c 	bl	8004f54 <USBD_GetStatus>
          break;
 80046fc:	e00e      	b.n	800471c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80046fe:	6839      	ldr	r1, [r7, #0]
 8004700:	6878      	ldr	r0, [r7, #4]
 8004702:	f000 fc5a 	bl	8004fba <USBD_SetFeature>
          break;
 8004706:	e009      	b.n	800471c <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8004708:	6839      	ldr	r1, [r7, #0]
 800470a:	6878      	ldr	r0, [r7, #4]
 800470c:	f000 fc69 	bl	8004fe2 <USBD_ClrFeature>
          break;
 8004710:	e004      	b.n	800471c <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8004712:	6839      	ldr	r1, [r7, #0]
 8004714:	6878      	ldr	r0, [r7, #4]
 8004716:	f000 fcc1 	bl	800509c <USBD_CtlError>
          break;
 800471a:	bf00      	nop
      }
      break;
 800471c:	e004      	b.n	8004728 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 800471e:	6839      	ldr	r1, [r7, #0]
 8004720:	6878      	ldr	r0, [r7, #4]
 8004722:	f000 fcbb 	bl	800509c <USBD_CtlError>
      break;
 8004726:	bf00      	nop
  }

  return ret;
 8004728:	7bfb      	ldrb	r3, [r7, #15]
}
 800472a:	4618      	mov	r0, r3
 800472c:	3710      	adds	r7, #16
 800472e:	46bd      	mov	sp, r7
 8004730:	bd80      	pop	{r7, pc}
 8004732:	bf00      	nop

08004734 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8004734:	b580      	push	{r7, lr}
 8004736:	b084      	sub	sp, #16
 8004738:	af00      	add	r7, sp, #0
 800473a:	6078      	str	r0, [r7, #4]
 800473c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800473e:	2300      	movs	r3, #0
 8004740:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004742:	683b      	ldr	r3, [r7, #0]
 8004744:	781b      	ldrb	r3, [r3, #0]
 8004746:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800474a:	2b20      	cmp	r3, #32
 800474c:	d003      	beq.n	8004756 <USBD_StdItfReq+0x22>
 800474e:	2b40      	cmp	r3, #64	; 0x40
 8004750:	d001      	beq.n	8004756 <USBD_StdItfReq+0x22>
 8004752:	2b00      	cmp	r3, #0
 8004754:	d12a      	bne.n	80047ac <USBD_StdItfReq+0x78>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800475c:	3b01      	subs	r3, #1
 800475e:	2b02      	cmp	r3, #2
 8004760:	d81d      	bhi.n	800479e <USBD_StdItfReq+0x6a>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8004762:	683b      	ldr	r3, [r7, #0]
 8004764:	889b      	ldrh	r3, [r3, #4]
 8004766:	b2db      	uxtb	r3, r3
 8004768:	2b01      	cmp	r3, #1
 800476a:	d813      	bhi.n	8004794 <USBD_StdItfReq+0x60>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004772:	689b      	ldr	r3, [r3, #8]
 8004774:	6839      	ldr	r1, [r7, #0]
 8004776:	6878      	ldr	r0, [r7, #4]
 8004778:	4798      	blx	r3
 800477a:	4603      	mov	r3, r0
 800477c:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800477e:	683b      	ldr	r3, [r7, #0]
 8004780:	88db      	ldrh	r3, [r3, #6]
 8004782:	2b00      	cmp	r3, #0
 8004784:	d110      	bne.n	80047a8 <USBD_StdItfReq+0x74>
 8004786:	7bfb      	ldrb	r3, [r7, #15]
 8004788:	2b00      	cmp	r3, #0
 800478a:	d10d      	bne.n	80047a8 <USBD_StdItfReq+0x74>
            {
              USBD_CtlSendStatus(pdev);
 800478c:	6878      	ldr	r0, [r7, #4]
 800478e:	f000 fd4d 	bl	800522c <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8004792:	e009      	b.n	80047a8 <USBD_StdItfReq+0x74>
            USBD_CtlError(pdev, req);
 8004794:	6839      	ldr	r1, [r7, #0]
 8004796:	6878      	ldr	r0, [r7, #4]
 8004798:	f000 fc80 	bl	800509c <USBD_CtlError>
          break;
 800479c:	e004      	b.n	80047a8 <USBD_StdItfReq+0x74>

        default:
          USBD_CtlError(pdev, req);
 800479e:	6839      	ldr	r1, [r7, #0]
 80047a0:	6878      	ldr	r0, [r7, #4]
 80047a2:	f000 fc7b 	bl	800509c <USBD_CtlError>
          break;
 80047a6:	e000      	b.n	80047aa <USBD_StdItfReq+0x76>
          break;
 80047a8:	bf00      	nop
      }
      break;
 80047aa:	e004      	b.n	80047b6 <USBD_StdItfReq+0x82>

    default:
      USBD_CtlError(pdev, req);
 80047ac:	6839      	ldr	r1, [r7, #0]
 80047ae:	6878      	ldr	r0, [r7, #4]
 80047b0:	f000 fc74 	bl	800509c <USBD_CtlError>
      break;
 80047b4:	bf00      	nop
  }

  return USBD_OK;
 80047b6:	2300      	movs	r3, #0
}
 80047b8:	4618      	mov	r0, r3
 80047ba:	3710      	adds	r7, #16
 80047bc:	46bd      	mov	sp, r7
 80047be:	bd80      	pop	{r7, pc}

080047c0 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 80047c0:	b580      	push	{r7, lr}
 80047c2:	b084      	sub	sp, #16
 80047c4:	af00      	add	r7, sp, #0
 80047c6:	6078      	str	r0, [r7, #4]
 80047c8:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80047ca:	2300      	movs	r3, #0
 80047cc:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 80047ce:	683b      	ldr	r3, [r7, #0]
 80047d0:	889b      	ldrh	r3, [r3, #4]
 80047d2:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80047d4:	683b      	ldr	r3, [r7, #0]
 80047d6:	781b      	ldrb	r3, [r3, #0]
 80047d8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80047dc:	2b20      	cmp	r3, #32
 80047de:	d004      	beq.n	80047ea <USBD_StdEPReq+0x2a>
 80047e0:	2b40      	cmp	r3, #64	; 0x40
 80047e2:	d002      	beq.n	80047ea <USBD_StdEPReq+0x2a>
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d008      	beq.n	80047fa <USBD_StdEPReq+0x3a>
 80047e8:	e13d      	b.n	8004a66 <USBD_StdEPReq+0x2a6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80047f0:	689b      	ldr	r3, [r3, #8]
 80047f2:	6839      	ldr	r1, [r7, #0]
 80047f4:	6878      	ldr	r0, [r7, #4]
 80047f6:	4798      	blx	r3
      break;
 80047f8:	e13a      	b.n	8004a70 <USBD_StdEPReq+0x2b0>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 80047fa:	683b      	ldr	r3, [r7, #0]
 80047fc:	781b      	ldrb	r3, [r3, #0]
 80047fe:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8004802:	2b20      	cmp	r3, #32
 8004804:	d10a      	bne.n	800481c <USBD_StdEPReq+0x5c>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800480c:	689b      	ldr	r3, [r3, #8]
 800480e:	6839      	ldr	r1, [r7, #0]
 8004810:	6878      	ldr	r0, [r7, #4]
 8004812:	4798      	blx	r3
 8004814:	4603      	mov	r3, r0
 8004816:	73fb      	strb	r3, [r7, #15]

        return ret;
 8004818:	7bfb      	ldrb	r3, [r7, #15]
 800481a:	e12a      	b.n	8004a72 <USBD_StdEPReq+0x2b2>
      }

      switch (req->bRequest)
 800481c:	683b      	ldr	r3, [r7, #0]
 800481e:	785b      	ldrb	r3, [r3, #1]
 8004820:	2b01      	cmp	r3, #1
 8004822:	d03e      	beq.n	80048a2 <USBD_StdEPReq+0xe2>
 8004824:	2b03      	cmp	r3, #3
 8004826:	d002      	beq.n	800482e <USBD_StdEPReq+0x6e>
 8004828:	2b00      	cmp	r3, #0
 800482a:	d070      	beq.n	800490e <USBD_StdEPReq+0x14e>
 800482c:	e115      	b.n	8004a5a <USBD_StdEPReq+0x29a>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004834:	2b02      	cmp	r3, #2
 8004836:	d002      	beq.n	800483e <USBD_StdEPReq+0x7e>
 8004838:	2b03      	cmp	r3, #3
 800483a:	d015      	beq.n	8004868 <USBD_StdEPReq+0xa8>
 800483c:	e02b      	b.n	8004896 <USBD_StdEPReq+0xd6>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800483e:	7bbb      	ldrb	r3, [r7, #14]
 8004840:	2b00      	cmp	r3, #0
 8004842:	d00c      	beq.n	800485e <USBD_StdEPReq+0x9e>
 8004844:	7bbb      	ldrb	r3, [r7, #14]
 8004846:	2b80      	cmp	r3, #128	; 0x80
 8004848:	d009      	beq.n	800485e <USBD_StdEPReq+0x9e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800484a:	7bbb      	ldrb	r3, [r7, #14]
 800484c:	4619      	mov	r1, r3
 800484e:	6878      	ldr	r0, [r7, #4]
 8004850:	f001 f86a 	bl	8005928 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8004854:	2180      	movs	r1, #128	; 0x80
 8004856:	6878      	ldr	r0, [r7, #4]
 8004858:	f001 f866 	bl	8005928 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800485c:	e020      	b.n	80048a0 <USBD_StdEPReq+0xe0>
                USBD_CtlError(pdev, req);
 800485e:	6839      	ldr	r1, [r7, #0]
 8004860:	6878      	ldr	r0, [r7, #4]
 8004862:	f000 fc1b 	bl	800509c <USBD_CtlError>
              break;
 8004866:	e01b      	b.n	80048a0 <USBD_StdEPReq+0xe0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8004868:	683b      	ldr	r3, [r7, #0]
 800486a:	885b      	ldrh	r3, [r3, #2]
 800486c:	2b00      	cmp	r3, #0
 800486e:	d10e      	bne.n	800488e <USBD_StdEPReq+0xce>
              {
                if ((ep_addr != 0x00U) &&
 8004870:	7bbb      	ldrb	r3, [r7, #14]
 8004872:	2b00      	cmp	r3, #0
 8004874:	d00b      	beq.n	800488e <USBD_StdEPReq+0xce>
 8004876:	7bbb      	ldrb	r3, [r7, #14]
 8004878:	2b80      	cmp	r3, #128	; 0x80
 800487a:	d008      	beq.n	800488e <USBD_StdEPReq+0xce>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800487c:	683b      	ldr	r3, [r7, #0]
 800487e:	88db      	ldrh	r3, [r3, #6]
 8004880:	2b00      	cmp	r3, #0
 8004882:	d104      	bne.n	800488e <USBD_StdEPReq+0xce>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8004884:	7bbb      	ldrb	r3, [r7, #14]
 8004886:	4619      	mov	r1, r3
 8004888:	6878      	ldr	r0, [r7, #4]
 800488a:	f001 f84d 	bl	8005928 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 800488e:	6878      	ldr	r0, [r7, #4]
 8004890:	f000 fccc 	bl	800522c <USBD_CtlSendStatus>

              break;
 8004894:	e004      	b.n	80048a0 <USBD_StdEPReq+0xe0>

            default:
              USBD_CtlError(pdev, req);
 8004896:	6839      	ldr	r1, [r7, #0]
 8004898:	6878      	ldr	r0, [r7, #4]
 800489a:	f000 fbff 	bl	800509c <USBD_CtlError>
              break;
 800489e:	bf00      	nop
          }
          break;
 80048a0:	e0e0      	b.n	8004a64 <USBD_StdEPReq+0x2a4>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80048a8:	2b02      	cmp	r3, #2
 80048aa:	d002      	beq.n	80048b2 <USBD_StdEPReq+0xf2>
 80048ac:	2b03      	cmp	r3, #3
 80048ae:	d015      	beq.n	80048dc <USBD_StdEPReq+0x11c>
 80048b0:	e026      	b.n	8004900 <USBD_StdEPReq+0x140>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80048b2:	7bbb      	ldrb	r3, [r7, #14]
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d00c      	beq.n	80048d2 <USBD_StdEPReq+0x112>
 80048b8:	7bbb      	ldrb	r3, [r7, #14]
 80048ba:	2b80      	cmp	r3, #128	; 0x80
 80048bc:	d009      	beq.n	80048d2 <USBD_StdEPReq+0x112>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80048be:	7bbb      	ldrb	r3, [r7, #14]
 80048c0:	4619      	mov	r1, r3
 80048c2:	6878      	ldr	r0, [r7, #4]
 80048c4:	f001 f830 	bl	8005928 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80048c8:	2180      	movs	r1, #128	; 0x80
 80048ca:	6878      	ldr	r0, [r7, #4]
 80048cc:	f001 f82c 	bl	8005928 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80048d0:	e01c      	b.n	800490c <USBD_StdEPReq+0x14c>
                USBD_CtlError(pdev, req);
 80048d2:	6839      	ldr	r1, [r7, #0]
 80048d4:	6878      	ldr	r0, [r7, #4]
 80048d6:	f000 fbe1 	bl	800509c <USBD_CtlError>
              break;
 80048da:	e017      	b.n	800490c <USBD_StdEPReq+0x14c>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80048dc:	683b      	ldr	r3, [r7, #0]
 80048de:	885b      	ldrh	r3, [r3, #2]
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d112      	bne.n	800490a <USBD_StdEPReq+0x14a>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80048e4:	7bbb      	ldrb	r3, [r7, #14]
 80048e6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d004      	beq.n	80048f8 <USBD_StdEPReq+0x138>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 80048ee:	7bbb      	ldrb	r3, [r7, #14]
 80048f0:	4619      	mov	r1, r3
 80048f2:	6878      	ldr	r0, [r7, #4]
 80048f4:	f001 f837 	bl	8005966 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 80048f8:	6878      	ldr	r0, [r7, #4]
 80048fa:	f000 fc97 	bl	800522c <USBD_CtlSendStatus>
              }
              break;
 80048fe:	e004      	b.n	800490a <USBD_StdEPReq+0x14a>

            default:
              USBD_CtlError(pdev, req);
 8004900:	6839      	ldr	r1, [r7, #0]
 8004902:	6878      	ldr	r0, [r7, #4]
 8004904:	f000 fbca 	bl	800509c <USBD_CtlError>
              break;
 8004908:	e000      	b.n	800490c <USBD_StdEPReq+0x14c>
              break;
 800490a:	bf00      	nop
          }
          break;
 800490c:	e0aa      	b.n	8004a64 <USBD_StdEPReq+0x2a4>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004914:	2b02      	cmp	r3, #2
 8004916:	d002      	beq.n	800491e <USBD_StdEPReq+0x15e>
 8004918:	2b03      	cmp	r3, #3
 800491a:	d032      	beq.n	8004982 <USBD_StdEPReq+0x1c2>
 800491c:	e097      	b.n	8004a4e <USBD_StdEPReq+0x28e>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800491e:	7bbb      	ldrb	r3, [r7, #14]
 8004920:	2b00      	cmp	r3, #0
 8004922:	d007      	beq.n	8004934 <USBD_StdEPReq+0x174>
 8004924:	7bbb      	ldrb	r3, [r7, #14]
 8004926:	2b80      	cmp	r3, #128	; 0x80
 8004928:	d004      	beq.n	8004934 <USBD_StdEPReq+0x174>
              {
                USBD_CtlError(pdev, req);
 800492a:	6839      	ldr	r1, [r7, #0]
 800492c:	6878      	ldr	r0, [r7, #4]
 800492e:	f000 fbb5 	bl	800509c <USBD_CtlError>
                break;
 8004932:	e091      	b.n	8004a58 <USBD_StdEPReq+0x298>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8004934:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004938:	2b00      	cmp	r3, #0
 800493a:	da0b      	bge.n	8004954 <USBD_StdEPReq+0x194>
 800493c:	7bbb      	ldrb	r3, [r7, #14]
 800493e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004942:	4613      	mov	r3, r2
 8004944:	009b      	lsls	r3, r3, #2
 8004946:	4413      	add	r3, r2
 8004948:	009b      	lsls	r3, r3, #2
 800494a:	3310      	adds	r3, #16
 800494c:	687a      	ldr	r2, [r7, #4]
 800494e:	4413      	add	r3, r2
 8004950:	3304      	adds	r3, #4
 8004952:	e00b      	b.n	800496c <USBD_StdEPReq+0x1ac>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8004954:	7bbb      	ldrb	r3, [r7, #14]
 8004956:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800495a:	4613      	mov	r3, r2
 800495c:	009b      	lsls	r3, r3, #2
 800495e:	4413      	add	r3, r2
 8004960:	009b      	lsls	r3, r3, #2
 8004962:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8004966:	687a      	ldr	r2, [r7, #4]
 8004968:	4413      	add	r3, r2
 800496a:	3304      	adds	r3, #4
 800496c:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800496e:	68bb      	ldr	r3, [r7, #8]
 8004970:	2200      	movs	r2, #0
 8004972:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8004974:	68bb      	ldr	r3, [r7, #8]
 8004976:	2202      	movs	r2, #2
 8004978:	4619      	mov	r1, r3
 800497a:	6878      	ldr	r0, [r7, #4]
 800497c:	f000 fbf8 	bl	8005170 <USBD_CtlSendData>
              break;
 8004980:	e06a      	b.n	8004a58 <USBD_StdEPReq+0x298>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8004982:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004986:	2b00      	cmp	r3, #0
 8004988:	da11      	bge.n	80049ae <USBD_StdEPReq+0x1ee>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800498a:	7bbb      	ldrb	r3, [r7, #14]
 800498c:	f003 020f 	and.w	r2, r3, #15
 8004990:	6879      	ldr	r1, [r7, #4]
 8004992:	4613      	mov	r3, r2
 8004994:	009b      	lsls	r3, r3, #2
 8004996:	4413      	add	r3, r2
 8004998:	009b      	lsls	r3, r3, #2
 800499a:	440b      	add	r3, r1
 800499c:	3318      	adds	r3, #24
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d117      	bne.n	80049d4 <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 80049a4:	6839      	ldr	r1, [r7, #0]
 80049a6:	6878      	ldr	r0, [r7, #4]
 80049a8:	f000 fb78 	bl	800509c <USBD_CtlError>
                  break;
 80049ac:	e054      	b.n	8004a58 <USBD_StdEPReq+0x298>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80049ae:	7bbb      	ldrb	r3, [r7, #14]
 80049b0:	f003 020f 	and.w	r2, r3, #15
 80049b4:	6879      	ldr	r1, [r7, #4]
 80049b6:	4613      	mov	r3, r2
 80049b8:	009b      	lsls	r3, r3, #2
 80049ba:	4413      	add	r3, r2
 80049bc:	009b      	lsls	r3, r3, #2
 80049be:	440b      	add	r3, r1
 80049c0:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d104      	bne.n	80049d4 <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 80049ca:	6839      	ldr	r1, [r7, #0]
 80049cc:	6878      	ldr	r0, [r7, #4]
 80049ce:	f000 fb65 	bl	800509c <USBD_CtlError>
                  break;
 80049d2:	e041      	b.n	8004a58 <USBD_StdEPReq+0x298>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80049d4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80049d8:	2b00      	cmp	r3, #0
 80049da:	da0b      	bge.n	80049f4 <USBD_StdEPReq+0x234>
 80049dc:	7bbb      	ldrb	r3, [r7, #14]
 80049de:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80049e2:	4613      	mov	r3, r2
 80049e4:	009b      	lsls	r3, r3, #2
 80049e6:	4413      	add	r3, r2
 80049e8:	009b      	lsls	r3, r3, #2
 80049ea:	3310      	adds	r3, #16
 80049ec:	687a      	ldr	r2, [r7, #4]
 80049ee:	4413      	add	r3, r2
 80049f0:	3304      	adds	r3, #4
 80049f2:	e00b      	b.n	8004a0c <USBD_StdEPReq+0x24c>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80049f4:	7bbb      	ldrb	r3, [r7, #14]
 80049f6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80049fa:	4613      	mov	r3, r2
 80049fc:	009b      	lsls	r3, r3, #2
 80049fe:	4413      	add	r3, r2
 8004a00:	009b      	lsls	r3, r3, #2
 8004a02:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8004a06:	687a      	ldr	r2, [r7, #4]
 8004a08:	4413      	add	r3, r2
 8004a0a:	3304      	adds	r3, #4
 8004a0c:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8004a0e:	7bbb      	ldrb	r3, [r7, #14]
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d002      	beq.n	8004a1a <USBD_StdEPReq+0x25a>
 8004a14:	7bbb      	ldrb	r3, [r7, #14]
 8004a16:	2b80      	cmp	r3, #128	; 0x80
 8004a18:	d103      	bne.n	8004a22 <USBD_StdEPReq+0x262>
              {
                pep->status = 0x0000U;
 8004a1a:	68bb      	ldr	r3, [r7, #8]
 8004a1c:	2200      	movs	r2, #0
 8004a1e:	601a      	str	r2, [r3, #0]
 8004a20:	e00e      	b.n	8004a40 <USBD_StdEPReq+0x280>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8004a22:	7bbb      	ldrb	r3, [r7, #14]
 8004a24:	4619      	mov	r1, r3
 8004a26:	6878      	ldr	r0, [r7, #4]
 8004a28:	f000 ffbc 	bl	80059a4 <USBD_LL_IsStallEP>
 8004a2c:	4603      	mov	r3, r0
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d003      	beq.n	8004a3a <USBD_StdEPReq+0x27a>
              {
                pep->status = 0x0001U;
 8004a32:	68bb      	ldr	r3, [r7, #8]
 8004a34:	2201      	movs	r2, #1
 8004a36:	601a      	str	r2, [r3, #0]
 8004a38:	e002      	b.n	8004a40 <USBD_StdEPReq+0x280>
              }
              else
              {
                pep->status = 0x0000U;
 8004a3a:	68bb      	ldr	r3, [r7, #8]
 8004a3c:	2200      	movs	r2, #0
 8004a3e:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8004a40:	68bb      	ldr	r3, [r7, #8]
 8004a42:	2202      	movs	r2, #2
 8004a44:	4619      	mov	r1, r3
 8004a46:	6878      	ldr	r0, [r7, #4]
 8004a48:	f000 fb92 	bl	8005170 <USBD_CtlSendData>
              break;
 8004a4c:	e004      	b.n	8004a58 <USBD_StdEPReq+0x298>

            default:
              USBD_CtlError(pdev, req);
 8004a4e:	6839      	ldr	r1, [r7, #0]
 8004a50:	6878      	ldr	r0, [r7, #4]
 8004a52:	f000 fb23 	bl	800509c <USBD_CtlError>
              break;
 8004a56:	bf00      	nop
          }
          break;
 8004a58:	e004      	b.n	8004a64 <USBD_StdEPReq+0x2a4>

        default:
          USBD_CtlError(pdev, req);
 8004a5a:	6839      	ldr	r1, [r7, #0]
 8004a5c:	6878      	ldr	r0, [r7, #4]
 8004a5e:	f000 fb1d 	bl	800509c <USBD_CtlError>
          break;
 8004a62:	bf00      	nop
      }
      break;
 8004a64:	e004      	b.n	8004a70 <USBD_StdEPReq+0x2b0>

    default:
      USBD_CtlError(pdev, req);
 8004a66:	6839      	ldr	r1, [r7, #0]
 8004a68:	6878      	ldr	r0, [r7, #4]
 8004a6a:	f000 fb17 	bl	800509c <USBD_CtlError>
      break;
 8004a6e:	bf00      	nop
  }

  return ret;
 8004a70:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a72:	4618      	mov	r0, r3
 8004a74:	3710      	adds	r7, #16
 8004a76:	46bd      	mov	sp, r7
 8004a78:	bd80      	pop	{r7, pc}
	...

08004a7c <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8004a7c:	b580      	push	{r7, lr}
 8004a7e:	b084      	sub	sp, #16
 8004a80:	af00      	add	r7, sp, #0
 8004a82:	6078      	str	r0, [r7, #4]
 8004a84:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8004a86:	2300      	movs	r3, #0
 8004a88:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8004a8a:	2300      	movs	r3, #0
 8004a8c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8004a8e:	2300      	movs	r3, #0
 8004a90:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8004a92:	683b      	ldr	r3, [r7, #0]
 8004a94:	885b      	ldrh	r3, [r3, #2]
 8004a96:	0a1b      	lsrs	r3, r3, #8
 8004a98:	b29b      	uxth	r3, r3
 8004a9a:	3b01      	subs	r3, #1
 8004a9c:	2b06      	cmp	r3, #6
 8004a9e:	f200 8128 	bhi.w	8004cf2 <USBD_GetDescriptor+0x276>
 8004aa2:	a201      	add	r2, pc, #4	; (adr r2, 8004aa8 <USBD_GetDescriptor+0x2c>)
 8004aa4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004aa8:	08004ac5 	.word	0x08004ac5
 8004aac:	08004add 	.word	0x08004add
 8004ab0:	08004b1d 	.word	0x08004b1d
 8004ab4:	08004cf3 	.word	0x08004cf3
 8004ab8:	08004cf3 	.word	0x08004cf3
 8004abc:	08004c93 	.word	0x08004c93
 8004ac0:	08004cbf 	.word	0x08004cbf
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	687a      	ldr	r2, [r7, #4]
 8004ace:	7c12      	ldrb	r2, [r2, #16]
 8004ad0:	f107 0108 	add.w	r1, r7, #8
 8004ad4:	4610      	mov	r0, r2
 8004ad6:	4798      	blx	r3
 8004ad8:	60f8      	str	r0, [r7, #12]
      break;
 8004ada:	e112      	b.n	8004d02 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	7c1b      	ldrb	r3, [r3, #16]
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d10d      	bne.n	8004b00 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004aea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004aec:	f107 0208 	add.w	r2, r7, #8
 8004af0:	4610      	mov	r0, r2
 8004af2:	4798      	blx	r3
 8004af4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	3301      	adds	r3, #1
 8004afa:	2202      	movs	r2, #2
 8004afc:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8004afe:	e100      	b.n	8004d02 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004b06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b08:	f107 0208 	add.w	r2, r7, #8
 8004b0c:	4610      	mov	r0, r2
 8004b0e:	4798      	blx	r3
 8004b10:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	3301      	adds	r3, #1
 8004b16:	2202      	movs	r2, #2
 8004b18:	701a      	strb	r2, [r3, #0]
      break;
 8004b1a:	e0f2      	b.n	8004d02 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8004b1c:	683b      	ldr	r3, [r7, #0]
 8004b1e:	885b      	ldrh	r3, [r3, #2]
 8004b20:	b2db      	uxtb	r3, r3
 8004b22:	2b05      	cmp	r3, #5
 8004b24:	f200 80ac 	bhi.w	8004c80 <USBD_GetDescriptor+0x204>
 8004b28:	a201      	add	r2, pc, #4	; (adr r2, 8004b30 <USBD_GetDescriptor+0xb4>)
 8004b2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b2e:	bf00      	nop
 8004b30:	08004b49 	.word	0x08004b49
 8004b34:	08004b7d 	.word	0x08004b7d
 8004b38:	08004bb1 	.word	0x08004bb1
 8004b3c:	08004be5 	.word	0x08004be5
 8004b40:	08004c19 	.word	0x08004c19
 8004b44:	08004c4d 	.word	0x08004c4d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8004b4e:	685b      	ldr	r3, [r3, #4]
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d00b      	beq.n	8004b6c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8004b5a:	685b      	ldr	r3, [r3, #4]
 8004b5c:	687a      	ldr	r2, [r7, #4]
 8004b5e:	7c12      	ldrb	r2, [r2, #16]
 8004b60:	f107 0108 	add.w	r1, r7, #8
 8004b64:	4610      	mov	r0, r2
 8004b66:	4798      	blx	r3
 8004b68:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8004b6a:	e091      	b.n	8004c90 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8004b6c:	6839      	ldr	r1, [r7, #0]
 8004b6e:	6878      	ldr	r0, [r7, #4]
 8004b70:	f000 fa94 	bl	800509c <USBD_CtlError>
            err++;
 8004b74:	7afb      	ldrb	r3, [r7, #11]
 8004b76:	3301      	adds	r3, #1
 8004b78:	72fb      	strb	r3, [r7, #11]
          break;
 8004b7a:	e089      	b.n	8004c90 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8004b82:	689b      	ldr	r3, [r3, #8]
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d00b      	beq.n	8004ba0 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8004b8e:	689b      	ldr	r3, [r3, #8]
 8004b90:	687a      	ldr	r2, [r7, #4]
 8004b92:	7c12      	ldrb	r2, [r2, #16]
 8004b94:	f107 0108 	add.w	r1, r7, #8
 8004b98:	4610      	mov	r0, r2
 8004b9a:	4798      	blx	r3
 8004b9c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8004b9e:	e077      	b.n	8004c90 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8004ba0:	6839      	ldr	r1, [r7, #0]
 8004ba2:	6878      	ldr	r0, [r7, #4]
 8004ba4:	f000 fa7a 	bl	800509c <USBD_CtlError>
            err++;
 8004ba8:	7afb      	ldrb	r3, [r7, #11]
 8004baa:	3301      	adds	r3, #1
 8004bac:	72fb      	strb	r3, [r7, #11]
          break;
 8004bae:	e06f      	b.n	8004c90 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8004bb6:	68db      	ldr	r3, [r3, #12]
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d00b      	beq.n	8004bd4 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8004bc2:	68db      	ldr	r3, [r3, #12]
 8004bc4:	687a      	ldr	r2, [r7, #4]
 8004bc6:	7c12      	ldrb	r2, [r2, #16]
 8004bc8:	f107 0108 	add.w	r1, r7, #8
 8004bcc:	4610      	mov	r0, r2
 8004bce:	4798      	blx	r3
 8004bd0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8004bd2:	e05d      	b.n	8004c90 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8004bd4:	6839      	ldr	r1, [r7, #0]
 8004bd6:	6878      	ldr	r0, [r7, #4]
 8004bd8:	f000 fa60 	bl	800509c <USBD_CtlError>
            err++;
 8004bdc:	7afb      	ldrb	r3, [r7, #11]
 8004bde:	3301      	adds	r3, #1
 8004be0:	72fb      	strb	r3, [r7, #11]
          break;
 8004be2:	e055      	b.n	8004c90 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8004bea:	691b      	ldr	r3, [r3, #16]
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d00b      	beq.n	8004c08 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8004bf6:	691b      	ldr	r3, [r3, #16]
 8004bf8:	687a      	ldr	r2, [r7, #4]
 8004bfa:	7c12      	ldrb	r2, [r2, #16]
 8004bfc:	f107 0108 	add.w	r1, r7, #8
 8004c00:	4610      	mov	r0, r2
 8004c02:	4798      	blx	r3
 8004c04:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8004c06:	e043      	b.n	8004c90 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8004c08:	6839      	ldr	r1, [r7, #0]
 8004c0a:	6878      	ldr	r0, [r7, #4]
 8004c0c:	f000 fa46 	bl	800509c <USBD_CtlError>
            err++;
 8004c10:	7afb      	ldrb	r3, [r7, #11]
 8004c12:	3301      	adds	r3, #1
 8004c14:	72fb      	strb	r3, [r7, #11]
          break;
 8004c16:	e03b      	b.n	8004c90 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8004c1e:	695b      	ldr	r3, [r3, #20]
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d00b      	beq.n	8004c3c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8004c2a:	695b      	ldr	r3, [r3, #20]
 8004c2c:	687a      	ldr	r2, [r7, #4]
 8004c2e:	7c12      	ldrb	r2, [r2, #16]
 8004c30:	f107 0108 	add.w	r1, r7, #8
 8004c34:	4610      	mov	r0, r2
 8004c36:	4798      	blx	r3
 8004c38:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8004c3a:	e029      	b.n	8004c90 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8004c3c:	6839      	ldr	r1, [r7, #0]
 8004c3e:	6878      	ldr	r0, [r7, #4]
 8004c40:	f000 fa2c 	bl	800509c <USBD_CtlError>
            err++;
 8004c44:	7afb      	ldrb	r3, [r7, #11]
 8004c46:	3301      	adds	r3, #1
 8004c48:	72fb      	strb	r3, [r7, #11]
          break;
 8004c4a:	e021      	b.n	8004c90 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8004c52:	699b      	ldr	r3, [r3, #24]
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d00b      	beq.n	8004c70 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8004c5e:	699b      	ldr	r3, [r3, #24]
 8004c60:	687a      	ldr	r2, [r7, #4]
 8004c62:	7c12      	ldrb	r2, [r2, #16]
 8004c64:	f107 0108 	add.w	r1, r7, #8
 8004c68:	4610      	mov	r0, r2
 8004c6a:	4798      	blx	r3
 8004c6c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8004c6e:	e00f      	b.n	8004c90 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8004c70:	6839      	ldr	r1, [r7, #0]
 8004c72:	6878      	ldr	r0, [r7, #4]
 8004c74:	f000 fa12 	bl	800509c <USBD_CtlError>
            err++;
 8004c78:	7afb      	ldrb	r3, [r7, #11]
 8004c7a:	3301      	adds	r3, #1
 8004c7c:	72fb      	strb	r3, [r7, #11]
          break;
 8004c7e:	e007      	b.n	8004c90 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8004c80:	6839      	ldr	r1, [r7, #0]
 8004c82:	6878      	ldr	r0, [r7, #4]
 8004c84:	f000 fa0a 	bl	800509c <USBD_CtlError>
          err++;
 8004c88:	7afb      	ldrb	r3, [r7, #11]
 8004c8a:	3301      	adds	r3, #1
 8004c8c:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8004c8e:	e038      	b.n	8004d02 <USBD_GetDescriptor+0x286>
 8004c90:	e037      	b.n	8004d02 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	7c1b      	ldrb	r3, [r3, #16]
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d109      	bne.n	8004cae <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004ca0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ca2:	f107 0208 	add.w	r2, r7, #8
 8004ca6:	4610      	mov	r0, r2
 8004ca8:	4798      	blx	r3
 8004caa:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8004cac:	e029      	b.n	8004d02 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8004cae:	6839      	ldr	r1, [r7, #0]
 8004cb0:	6878      	ldr	r0, [r7, #4]
 8004cb2:	f000 f9f3 	bl	800509c <USBD_CtlError>
        err++;
 8004cb6:	7afb      	ldrb	r3, [r7, #11]
 8004cb8:	3301      	adds	r3, #1
 8004cba:	72fb      	strb	r3, [r7, #11]
      break;
 8004cbc:	e021      	b.n	8004d02 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	7c1b      	ldrb	r3, [r3, #16]
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d10d      	bne.n	8004ce2 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004ccc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cce:	f107 0208 	add.w	r2, r7, #8
 8004cd2:	4610      	mov	r0, r2
 8004cd4:	4798      	blx	r3
 8004cd6:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	3301      	adds	r3, #1
 8004cdc:	2207      	movs	r2, #7
 8004cde:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8004ce0:	e00f      	b.n	8004d02 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8004ce2:	6839      	ldr	r1, [r7, #0]
 8004ce4:	6878      	ldr	r0, [r7, #4]
 8004ce6:	f000 f9d9 	bl	800509c <USBD_CtlError>
        err++;
 8004cea:	7afb      	ldrb	r3, [r7, #11]
 8004cec:	3301      	adds	r3, #1
 8004cee:	72fb      	strb	r3, [r7, #11]
      break;
 8004cf0:	e007      	b.n	8004d02 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8004cf2:	6839      	ldr	r1, [r7, #0]
 8004cf4:	6878      	ldr	r0, [r7, #4]
 8004cf6:	f000 f9d1 	bl	800509c <USBD_CtlError>
      err++;
 8004cfa:	7afb      	ldrb	r3, [r7, #11]
 8004cfc:	3301      	adds	r3, #1
 8004cfe:	72fb      	strb	r3, [r7, #11]
      break;
 8004d00:	bf00      	nop
  }

  if (err != 0U)
 8004d02:	7afb      	ldrb	r3, [r7, #11]
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d11c      	bne.n	8004d42 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8004d08:	893b      	ldrh	r3, [r7, #8]
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d011      	beq.n	8004d32 <USBD_GetDescriptor+0x2b6>
 8004d0e:	683b      	ldr	r3, [r7, #0]
 8004d10:	88db      	ldrh	r3, [r3, #6]
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d00d      	beq.n	8004d32 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8004d16:	683b      	ldr	r3, [r7, #0]
 8004d18:	88da      	ldrh	r2, [r3, #6]
 8004d1a:	893b      	ldrh	r3, [r7, #8]
 8004d1c:	4293      	cmp	r3, r2
 8004d1e:	bf28      	it	cs
 8004d20:	4613      	movcs	r3, r2
 8004d22:	b29b      	uxth	r3, r3
 8004d24:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8004d26:	893b      	ldrh	r3, [r7, #8]
 8004d28:	461a      	mov	r2, r3
 8004d2a:	68f9      	ldr	r1, [r7, #12]
 8004d2c:	6878      	ldr	r0, [r7, #4]
 8004d2e:	f000 fa1f 	bl	8005170 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8004d32:	683b      	ldr	r3, [r7, #0]
 8004d34:	88db      	ldrh	r3, [r3, #6]
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d104      	bne.n	8004d44 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8004d3a:	6878      	ldr	r0, [r7, #4]
 8004d3c:	f000 fa76 	bl	800522c <USBD_CtlSendStatus>
 8004d40:	e000      	b.n	8004d44 <USBD_GetDescriptor+0x2c8>
    return;
 8004d42:	bf00      	nop
    }
  }
}
 8004d44:	3710      	adds	r7, #16
 8004d46:	46bd      	mov	sp, r7
 8004d48:	bd80      	pop	{r7, pc}
 8004d4a:	bf00      	nop

08004d4c <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8004d4c:	b580      	push	{r7, lr}
 8004d4e:	b084      	sub	sp, #16
 8004d50:	af00      	add	r7, sp, #0
 8004d52:	6078      	str	r0, [r7, #4]
 8004d54:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8004d56:	683b      	ldr	r3, [r7, #0]
 8004d58:	889b      	ldrh	r3, [r3, #4]
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d130      	bne.n	8004dc0 <USBD_SetAddress+0x74>
 8004d5e:	683b      	ldr	r3, [r7, #0]
 8004d60:	88db      	ldrh	r3, [r3, #6]
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d12c      	bne.n	8004dc0 <USBD_SetAddress+0x74>
 8004d66:	683b      	ldr	r3, [r7, #0]
 8004d68:	885b      	ldrh	r3, [r3, #2]
 8004d6a:	2b7f      	cmp	r3, #127	; 0x7f
 8004d6c:	d828      	bhi.n	8004dc0 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8004d6e:	683b      	ldr	r3, [r7, #0]
 8004d70:	885b      	ldrh	r3, [r3, #2]
 8004d72:	b2db      	uxtb	r3, r3
 8004d74:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004d78:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004d80:	2b03      	cmp	r3, #3
 8004d82:	d104      	bne.n	8004d8e <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8004d84:	6839      	ldr	r1, [r7, #0]
 8004d86:	6878      	ldr	r0, [r7, #4]
 8004d88:	f000 f988 	bl	800509c <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004d8c:	e01c      	b.n	8004dc8 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	7bfa      	ldrb	r2, [r7, #15]
 8004d92:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8004d96:	7bfb      	ldrb	r3, [r7, #15]
 8004d98:	4619      	mov	r1, r3
 8004d9a:	6878      	ldr	r0, [r7, #4]
 8004d9c:	f000 fe27 	bl	80059ee <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8004da0:	6878      	ldr	r0, [r7, #4]
 8004da2:	f000 fa43 	bl	800522c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8004da6:	7bfb      	ldrb	r3, [r7, #15]
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d004      	beq.n	8004db6 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	2202      	movs	r2, #2
 8004db0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004db4:	e008      	b.n	8004dc8 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	2201      	movs	r2, #1
 8004dba:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004dbe:	e003      	b.n	8004dc8 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8004dc0:	6839      	ldr	r1, [r7, #0]
 8004dc2:	6878      	ldr	r0, [r7, #4]
 8004dc4:	f000 f96a 	bl	800509c <USBD_CtlError>
  }
}
 8004dc8:	bf00      	nop
 8004dca:	3710      	adds	r7, #16
 8004dcc:	46bd      	mov	sp, r7
 8004dce:	bd80      	pop	{r7, pc}

08004dd0 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8004dd0:	b580      	push	{r7, lr}
 8004dd2:	b082      	sub	sp, #8
 8004dd4:	af00      	add	r7, sp, #0
 8004dd6:	6078      	str	r0, [r7, #4]
 8004dd8:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8004dda:	683b      	ldr	r3, [r7, #0]
 8004ddc:	885b      	ldrh	r3, [r3, #2]
 8004dde:	b2da      	uxtb	r2, r3
 8004de0:	4b41      	ldr	r3, [pc, #260]	; (8004ee8 <USBD_SetConfig+0x118>)
 8004de2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8004de4:	4b40      	ldr	r3, [pc, #256]	; (8004ee8 <USBD_SetConfig+0x118>)
 8004de6:	781b      	ldrb	r3, [r3, #0]
 8004de8:	2b01      	cmp	r3, #1
 8004dea:	d904      	bls.n	8004df6 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8004dec:	6839      	ldr	r1, [r7, #0]
 8004dee:	6878      	ldr	r0, [r7, #4]
 8004df0:	f000 f954 	bl	800509c <USBD_CtlError>
 8004df4:	e075      	b.n	8004ee2 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004dfc:	2b02      	cmp	r3, #2
 8004dfe:	d002      	beq.n	8004e06 <USBD_SetConfig+0x36>
 8004e00:	2b03      	cmp	r3, #3
 8004e02:	d023      	beq.n	8004e4c <USBD_SetConfig+0x7c>
 8004e04:	e062      	b.n	8004ecc <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8004e06:	4b38      	ldr	r3, [pc, #224]	; (8004ee8 <USBD_SetConfig+0x118>)
 8004e08:	781b      	ldrb	r3, [r3, #0]
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d01a      	beq.n	8004e44 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8004e0e:	4b36      	ldr	r3, [pc, #216]	; (8004ee8 <USBD_SetConfig+0x118>)
 8004e10:	781b      	ldrb	r3, [r3, #0]
 8004e12:	461a      	mov	r2, r3
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	2203      	movs	r2, #3
 8004e1c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8004e20:	4b31      	ldr	r3, [pc, #196]	; (8004ee8 <USBD_SetConfig+0x118>)
 8004e22:	781b      	ldrb	r3, [r3, #0]
 8004e24:	4619      	mov	r1, r3
 8004e26:	6878      	ldr	r0, [r7, #4]
 8004e28:	f7ff f9f4 	bl	8004214 <USBD_SetClassConfig>
 8004e2c:	4603      	mov	r3, r0
 8004e2e:	2b02      	cmp	r3, #2
 8004e30:	d104      	bne.n	8004e3c <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8004e32:	6839      	ldr	r1, [r7, #0]
 8004e34:	6878      	ldr	r0, [r7, #4]
 8004e36:	f000 f931 	bl	800509c <USBD_CtlError>
            return;
 8004e3a:	e052      	b.n	8004ee2 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8004e3c:	6878      	ldr	r0, [r7, #4]
 8004e3e:	f000 f9f5 	bl	800522c <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8004e42:	e04e      	b.n	8004ee2 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8004e44:	6878      	ldr	r0, [r7, #4]
 8004e46:	f000 f9f1 	bl	800522c <USBD_CtlSendStatus>
        break;
 8004e4a:	e04a      	b.n	8004ee2 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8004e4c:	4b26      	ldr	r3, [pc, #152]	; (8004ee8 <USBD_SetConfig+0x118>)
 8004e4e:	781b      	ldrb	r3, [r3, #0]
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d112      	bne.n	8004e7a <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	2202      	movs	r2, #2
 8004e58:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 8004e5c:	4b22      	ldr	r3, [pc, #136]	; (8004ee8 <USBD_SetConfig+0x118>)
 8004e5e:	781b      	ldrb	r3, [r3, #0]
 8004e60:	461a      	mov	r2, r3
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8004e66:	4b20      	ldr	r3, [pc, #128]	; (8004ee8 <USBD_SetConfig+0x118>)
 8004e68:	781b      	ldrb	r3, [r3, #0]
 8004e6a:	4619      	mov	r1, r3
 8004e6c:	6878      	ldr	r0, [r7, #4]
 8004e6e:	f7ff f9f0 	bl	8004252 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8004e72:	6878      	ldr	r0, [r7, #4]
 8004e74:	f000 f9da 	bl	800522c <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8004e78:	e033      	b.n	8004ee2 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8004e7a:	4b1b      	ldr	r3, [pc, #108]	; (8004ee8 <USBD_SetConfig+0x118>)
 8004e7c:	781b      	ldrb	r3, [r3, #0]
 8004e7e:	461a      	mov	r2, r3
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	685b      	ldr	r3, [r3, #4]
 8004e84:	429a      	cmp	r2, r3
 8004e86:	d01d      	beq.n	8004ec4 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	685b      	ldr	r3, [r3, #4]
 8004e8c:	b2db      	uxtb	r3, r3
 8004e8e:	4619      	mov	r1, r3
 8004e90:	6878      	ldr	r0, [r7, #4]
 8004e92:	f7ff f9de 	bl	8004252 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8004e96:	4b14      	ldr	r3, [pc, #80]	; (8004ee8 <USBD_SetConfig+0x118>)
 8004e98:	781b      	ldrb	r3, [r3, #0]
 8004e9a:	461a      	mov	r2, r3
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8004ea0:	4b11      	ldr	r3, [pc, #68]	; (8004ee8 <USBD_SetConfig+0x118>)
 8004ea2:	781b      	ldrb	r3, [r3, #0]
 8004ea4:	4619      	mov	r1, r3
 8004ea6:	6878      	ldr	r0, [r7, #4]
 8004ea8:	f7ff f9b4 	bl	8004214 <USBD_SetClassConfig>
 8004eac:	4603      	mov	r3, r0
 8004eae:	2b02      	cmp	r3, #2
 8004eb0:	d104      	bne.n	8004ebc <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8004eb2:	6839      	ldr	r1, [r7, #0]
 8004eb4:	6878      	ldr	r0, [r7, #4]
 8004eb6:	f000 f8f1 	bl	800509c <USBD_CtlError>
            return;
 8004eba:	e012      	b.n	8004ee2 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8004ebc:	6878      	ldr	r0, [r7, #4]
 8004ebe:	f000 f9b5 	bl	800522c <USBD_CtlSendStatus>
        break;
 8004ec2:	e00e      	b.n	8004ee2 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8004ec4:	6878      	ldr	r0, [r7, #4]
 8004ec6:	f000 f9b1 	bl	800522c <USBD_CtlSendStatus>
        break;
 8004eca:	e00a      	b.n	8004ee2 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8004ecc:	6839      	ldr	r1, [r7, #0]
 8004ece:	6878      	ldr	r0, [r7, #4]
 8004ed0:	f000 f8e4 	bl	800509c <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8004ed4:	4b04      	ldr	r3, [pc, #16]	; (8004ee8 <USBD_SetConfig+0x118>)
 8004ed6:	781b      	ldrb	r3, [r3, #0]
 8004ed8:	4619      	mov	r1, r3
 8004eda:	6878      	ldr	r0, [r7, #4]
 8004edc:	f7ff f9b9 	bl	8004252 <USBD_ClrClassConfig>
        break;
 8004ee0:	bf00      	nop
    }
  }
}
 8004ee2:	3708      	adds	r7, #8
 8004ee4:	46bd      	mov	sp, r7
 8004ee6:	bd80      	pop	{r7, pc}
 8004ee8:	200013a8 	.word	0x200013a8

08004eec <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8004eec:	b580      	push	{r7, lr}
 8004eee:	b082      	sub	sp, #8
 8004ef0:	af00      	add	r7, sp, #0
 8004ef2:	6078      	str	r0, [r7, #4]
 8004ef4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8004ef6:	683b      	ldr	r3, [r7, #0]
 8004ef8:	88db      	ldrh	r3, [r3, #6]
 8004efa:	2b01      	cmp	r3, #1
 8004efc:	d004      	beq.n	8004f08 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8004efe:	6839      	ldr	r1, [r7, #0]
 8004f00:	6878      	ldr	r0, [r7, #4]
 8004f02:	f000 f8cb 	bl	800509c <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8004f06:	e021      	b.n	8004f4c <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004f0e:	2b01      	cmp	r3, #1
 8004f10:	db17      	blt.n	8004f42 <USBD_GetConfig+0x56>
 8004f12:	2b02      	cmp	r3, #2
 8004f14:	dd02      	ble.n	8004f1c <USBD_GetConfig+0x30>
 8004f16:	2b03      	cmp	r3, #3
 8004f18:	d00b      	beq.n	8004f32 <USBD_GetConfig+0x46>
 8004f1a:	e012      	b.n	8004f42 <USBD_GetConfig+0x56>
        pdev->dev_default_config = 0U;
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	2200      	movs	r2, #0
 8004f20:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	3308      	adds	r3, #8
 8004f26:	2201      	movs	r2, #1
 8004f28:	4619      	mov	r1, r3
 8004f2a:	6878      	ldr	r0, [r7, #4]
 8004f2c:	f000 f920 	bl	8005170 <USBD_CtlSendData>
        break;
 8004f30:	e00c      	b.n	8004f4c <USBD_GetConfig+0x60>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	3304      	adds	r3, #4
 8004f36:	2201      	movs	r2, #1
 8004f38:	4619      	mov	r1, r3
 8004f3a:	6878      	ldr	r0, [r7, #4]
 8004f3c:	f000 f918 	bl	8005170 <USBD_CtlSendData>
        break;
 8004f40:	e004      	b.n	8004f4c <USBD_GetConfig+0x60>
        USBD_CtlError(pdev, req);
 8004f42:	6839      	ldr	r1, [r7, #0]
 8004f44:	6878      	ldr	r0, [r7, #4]
 8004f46:	f000 f8a9 	bl	800509c <USBD_CtlError>
        break;
 8004f4a:	bf00      	nop
}
 8004f4c:	bf00      	nop
 8004f4e:	3708      	adds	r7, #8
 8004f50:	46bd      	mov	sp, r7
 8004f52:	bd80      	pop	{r7, pc}

08004f54 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8004f54:	b580      	push	{r7, lr}
 8004f56:	b082      	sub	sp, #8
 8004f58:	af00      	add	r7, sp, #0
 8004f5a:	6078      	str	r0, [r7, #4]
 8004f5c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004f64:	3b01      	subs	r3, #1
 8004f66:	2b02      	cmp	r3, #2
 8004f68:	d81e      	bhi.n	8004fa8 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8004f6a:	683b      	ldr	r3, [r7, #0]
 8004f6c:	88db      	ldrh	r3, [r3, #6]
 8004f6e:	2b02      	cmp	r3, #2
 8004f70:	d004      	beq.n	8004f7c <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8004f72:	6839      	ldr	r1, [r7, #0]
 8004f74:	6878      	ldr	r0, [r7, #4]
 8004f76:	f000 f891 	bl	800509c <USBD_CtlError>
        break;
 8004f7a:	e01a      	b.n	8004fb2 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	2201      	movs	r2, #1
 8004f80:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d005      	beq.n	8004f98 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	68db      	ldr	r3, [r3, #12]
 8004f90:	f043 0202 	orr.w	r2, r3, #2
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	330c      	adds	r3, #12
 8004f9c:	2202      	movs	r2, #2
 8004f9e:	4619      	mov	r1, r3
 8004fa0:	6878      	ldr	r0, [r7, #4]
 8004fa2:	f000 f8e5 	bl	8005170 <USBD_CtlSendData>
      break;
 8004fa6:	e004      	b.n	8004fb2 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8004fa8:	6839      	ldr	r1, [r7, #0]
 8004faa:	6878      	ldr	r0, [r7, #4]
 8004fac:	f000 f876 	bl	800509c <USBD_CtlError>
      break;
 8004fb0:	bf00      	nop
  }
}
 8004fb2:	bf00      	nop
 8004fb4:	3708      	adds	r7, #8
 8004fb6:	46bd      	mov	sp, r7
 8004fb8:	bd80      	pop	{r7, pc}

08004fba <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8004fba:	b580      	push	{r7, lr}
 8004fbc:	b082      	sub	sp, #8
 8004fbe:	af00      	add	r7, sp, #0
 8004fc0:	6078      	str	r0, [r7, #4]
 8004fc2:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8004fc4:	683b      	ldr	r3, [r7, #0]
 8004fc6:	885b      	ldrh	r3, [r3, #2]
 8004fc8:	2b01      	cmp	r3, #1
 8004fca:	d106      	bne.n	8004fda <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	2201      	movs	r2, #1
 8004fd0:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 8004fd4:	6878      	ldr	r0, [r7, #4]
 8004fd6:	f000 f929 	bl	800522c <USBD_CtlSendStatus>
  }
}
 8004fda:	bf00      	nop
 8004fdc:	3708      	adds	r7, #8
 8004fde:	46bd      	mov	sp, r7
 8004fe0:	bd80      	pop	{r7, pc}

08004fe2 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8004fe2:	b580      	push	{r7, lr}
 8004fe4:	b082      	sub	sp, #8
 8004fe6:	af00      	add	r7, sp, #0
 8004fe8:	6078      	str	r0, [r7, #4]
 8004fea:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004ff2:	3b01      	subs	r3, #1
 8004ff4:	2b02      	cmp	r3, #2
 8004ff6:	d80b      	bhi.n	8005010 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8004ff8:	683b      	ldr	r3, [r7, #0]
 8004ffa:	885b      	ldrh	r3, [r3, #2]
 8004ffc:	2b01      	cmp	r3, #1
 8004ffe:	d10c      	bne.n	800501a <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	2200      	movs	r2, #0
 8005004:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 8005008:	6878      	ldr	r0, [r7, #4]
 800500a:	f000 f90f 	bl	800522c <USBD_CtlSendStatus>
      }
      break;
 800500e:	e004      	b.n	800501a <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8005010:	6839      	ldr	r1, [r7, #0]
 8005012:	6878      	ldr	r0, [r7, #4]
 8005014:	f000 f842 	bl	800509c <USBD_CtlError>
      break;
 8005018:	e000      	b.n	800501c <USBD_ClrFeature+0x3a>
      break;
 800501a:	bf00      	nop
  }
}
 800501c:	bf00      	nop
 800501e:	3708      	adds	r7, #8
 8005020:	46bd      	mov	sp, r7
 8005022:	bd80      	pop	{r7, pc}

08005024 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8005024:	b480      	push	{r7}
 8005026:	b083      	sub	sp, #12
 8005028:	af00      	add	r7, sp, #0
 800502a:	6078      	str	r0, [r7, #4]
 800502c:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 800502e:	683b      	ldr	r3, [r7, #0]
 8005030:	781a      	ldrb	r2, [r3, #0]
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8005036:	683b      	ldr	r3, [r7, #0]
 8005038:	785a      	ldrb	r2, [r3, #1]
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800503e:	683b      	ldr	r3, [r7, #0]
 8005040:	3302      	adds	r3, #2
 8005042:	781b      	ldrb	r3, [r3, #0]
 8005044:	b29a      	uxth	r2, r3
 8005046:	683b      	ldr	r3, [r7, #0]
 8005048:	3303      	adds	r3, #3
 800504a:	781b      	ldrb	r3, [r3, #0]
 800504c:	b29b      	uxth	r3, r3
 800504e:	021b      	lsls	r3, r3, #8
 8005050:	b29b      	uxth	r3, r3
 8005052:	4413      	add	r3, r2
 8005054:	b29a      	uxth	r2, r3
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800505a:	683b      	ldr	r3, [r7, #0]
 800505c:	3304      	adds	r3, #4
 800505e:	781b      	ldrb	r3, [r3, #0]
 8005060:	b29a      	uxth	r2, r3
 8005062:	683b      	ldr	r3, [r7, #0]
 8005064:	3305      	adds	r3, #5
 8005066:	781b      	ldrb	r3, [r3, #0]
 8005068:	b29b      	uxth	r3, r3
 800506a:	021b      	lsls	r3, r3, #8
 800506c:	b29b      	uxth	r3, r3
 800506e:	4413      	add	r3, r2
 8005070:	b29a      	uxth	r2, r3
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8005076:	683b      	ldr	r3, [r7, #0]
 8005078:	3306      	adds	r3, #6
 800507a:	781b      	ldrb	r3, [r3, #0]
 800507c:	b29a      	uxth	r2, r3
 800507e:	683b      	ldr	r3, [r7, #0]
 8005080:	3307      	adds	r3, #7
 8005082:	781b      	ldrb	r3, [r3, #0]
 8005084:	b29b      	uxth	r3, r3
 8005086:	021b      	lsls	r3, r3, #8
 8005088:	b29b      	uxth	r3, r3
 800508a:	4413      	add	r3, r2
 800508c:	b29a      	uxth	r2, r3
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	80da      	strh	r2, [r3, #6]

}
 8005092:	bf00      	nop
 8005094:	370c      	adds	r7, #12
 8005096:	46bd      	mov	sp, r7
 8005098:	bc80      	pop	{r7}
 800509a:	4770      	bx	lr

0800509c <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 800509c:	b580      	push	{r7, lr}
 800509e:	b082      	sub	sp, #8
 80050a0:	af00      	add	r7, sp, #0
 80050a2:	6078      	str	r0, [r7, #4]
 80050a4:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 80050a6:	2180      	movs	r1, #128	; 0x80
 80050a8:	6878      	ldr	r0, [r7, #4]
 80050aa:	f000 fc3d 	bl	8005928 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 80050ae:	2100      	movs	r1, #0
 80050b0:	6878      	ldr	r0, [r7, #4]
 80050b2:	f000 fc39 	bl	8005928 <USBD_LL_StallEP>
}
 80050b6:	bf00      	nop
 80050b8:	3708      	adds	r7, #8
 80050ba:	46bd      	mov	sp, r7
 80050bc:	bd80      	pop	{r7, pc}

080050be <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80050be:	b580      	push	{r7, lr}
 80050c0:	b086      	sub	sp, #24
 80050c2:	af00      	add	r7, sp, #0
 80050c4:	60f8      	str	r0, [r7, #12]
 80050c6:	60b9      	str	r1, [r7, #8]
 80050c8:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80050ca:	2300      	movs	r3, #0
 80050cc:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d032      	beq.n	800513a <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 80050d4:	68f8      	ldr	r0, [r7, #12]
 80050d6:	f000 f834 	bl	8005142 <USBD_GetLen>
 80050da:	4603      	mov	r3, r0
 80050dc:	3301      	adds	r3, #1
 80050de:	b29b      	uxth	r3, r3
 80050e0:	005b      	lsls	r3, r3, #1
 80050e2:	b29a      	uxth	r2, r3
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 80050e8:	7dfb      	ldrb	r3, [r7, #23]
 80050ea:	1c5a      	adds	r2, r3, #1
 80050ec:	75fa      	strb	r2, [r7, #23]
 80050ee:	461a      	mov	r2, r3
 80050f0:	68bb      	ldr	r3, [r7, #8]
 80050f2:	4413      	add	r3, r2
 80050f4:	687a      	ldr	r2, [r7, #4]
 80050f6:	7812      	ldrb	r2, [r2, #0]
 80050f8:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 80050fa:	7dfb      	ldrb	r3, [r7, #23]
 80050fc:	1c5a      	adds	r2, r3, #1
 80050fe:	75fa      	strb	r2, [r7, #23]
 8005100:	461a      	mov	r2, r3
 8005102:	68bb      	ldr	r3, [r7, #8]
 8005104:	4413      	add	r3, r2
 8005106:	2203      	movs	r2, #3
 8005108:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800510a:	e012      	b.n	8005132 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	1c5a      	adds	r2, r3, #1
 8005110:	60fa      	str	r2, [r7, #12]
 8005112:	7dfa      	ldrb	r2, [r7, #23]
 8005114:	1c51      	adds	r1, r2, #1
 8005116:	75f9      	strb	r1, [r7, #23]
 8005118:	4611      	mov	r1, r2
 800511a:	68ba      	ldr	r2, [r7, #8]
 800511c:	440a      	add	r2, r1
 800511e:	781b      	ldrb	r3, [r3, #0]
 8005120:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8005122:	7dfb      	ldrb	r3, [r7, #23]
 8005124:	1c5a      	adds	r2, r3, #1
 8005126:	75fa      	strb	r2, [r7, #23]
 8005128:	461a      	mov	r2, r3
 800512a:	68bb      	ldr	r3, [r7, #8]
 800512c:	4413      	add	r3, r2
 800512e:	2200      	movs	r2, #0
 8005130:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	781b      	ldrb	r3, [r3, #0]
 8005136:	2b00      	cmp	r3, #0
 8005138:	d1e8      	bne.n	800510c <USBD_GetString+0x4e>
    }
  }
}
 800513a:	bf00      	nop
 800513c:	3718      	adds	r7, #24
 800513e:	46bd      	mov	sp, r7
 8005140:	bd80      	pop	{r7, pc}

08005142 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8005142:	b480      	push	{r7}
 8005144:	b085      	sub	sp, #20
 8005146:	af00      	add	r7, sp, #0
 8005148:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800514a:	2300      	movs	r3, #0
 800514c:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 800514e:	e005      	b.n	800515c <USBD_GetLen+0x1a>
  {
    len++;
 8005150:	7bfb      	ldrb	r3, [r7, #15]
 8005152:	3301      	adds	r3, #1
 8005154:	73fb      	strb	r3, [r7, #15]
    buf++;
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	3301      	adds	r3, #1
 800515a:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	781b      	ldrb	r3, [r3, #0]
 8005160:	2b00      	cmp	r3, #0
 8005162:	d1f5      	bne.n	8005150 <USBD_GetLen+0xe>
  }

  return len;
 8005164:	7bfb      	ldrb	r3, [r7, #15]
}
 8005166:	4618      	mov	r0, r3
 8005168:	3714      	adds	r7, #20
 800516a:	46bd      	mov	sp, r7
 800516c:	bc80      	pop	{r7}
 800516e:	4770      	bx	lr

08005170 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8005170:	b580      	push	{r7, lr}
 8005172:	b084      	sub	sp, #16
 8005174:	af00      	add	r7, sp, #0
 8005176:	60f8      	str	r0, [r7, #12]
 8005178:	60b9      	str	r1, [r7, #8]
 800517a:	4613      	mov	r3, r2
 800517c:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	2202      	movs	r2, #2
 8005182:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8005186:	88fa      	ldrh	r2, [r7, #6]
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800518c:	88fa      	ldrh	r2, [r7, #6]
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8005192:	88fb      	ldrh	r3, [r7, #6]
 8005194:	68ba      	ldr	r2, [r7, #8]
 8005196:	2100      	movs	r1, #0
 8005198:	68f8      	ldr	r0, [r7, #12]
 800519a:	f000 fc47 	bl	8005a2c <USBD_LL_Transmit>

  return USBD_OK;
 800519e:	2300      	movs	r3, #0
}
 80051a0:	4618      	mov	r0, r3
 80051a2:	3710      	adds	r7, #16
 80051a4:	46bd      	mov	sp, r7
 80051a6:	bd80      	pop	{r7, pc}

080051a8 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 80051a8:	b580      	push	{r7, lr}
 80051aa:	b084      	sub	sp, #16
 80051ac:	af00      	add	r7, sp, #0
 80051ae:	60f8      	str	r0, [r7, #12]
 80051b0:	60b9      	str	r1, [r7, #8]
 80051b2:	4613      	mov	r3, r2
 80051b4:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80051b6:	88fb      	ldrh	r3, [r7, #6]
 80051b8:	68ba      	ldr	r2, [r7, #8]
 80051ba:	2100      	movs	r1, #0
 80051bc:	68f8      	ldr	r0, [r7, #12]
 80051be:	f000 fc35 	bl	8005a2c <USBD_LL_Transmit>

  return USBD_OK;
 80051c2:	2300      	movs	r3, #0
}
 80051c4:	4618      	mov	r0, r3
 80051c6:	3710      	adds	r7, #16
 80051c8:	46bd      	mov	sp, r7
 80051ca:	bd80      	pop	{r7, pc}

080051cc <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 80051cc:	b580      	push	{r7, lr}
 80051ce:	b084      	sub	sp, #16
 80051d0:	af00      	add	r7, sp, #0
 80051d2:	60f8      	str	r0, [r7, #12]
 80051d4:	60b9      	str	r1, [r7, #8]
 80051d6:	4613      	mov	r3, r2
 80051d8:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	2203      	movs	r2, #3
 80051de:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80051e2:	88fa      	ldrh	r2, [r7, #6]
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 80051ea:	88fa      	ldrh	r2, [r7, #6]
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80051f2:	88fb      	ldrh	r3, [r7, #6]
 80051f4:	68ba      	ldr	r2, [r7, #8]
 80051f6:	2100      	movs	r1, #0
 80051f8:	68f8      	ldr	r0, [r7, #12]
 80051fa:	f000 fc3a 	bl	8005a72 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80051fe:	2300      	movs	r3, #0
}
 8005200:	4618      	mov	r0, r3
 8005202:	3710      	adds	r7, #16
 8005204:	46bd      	mov	sp, r7
 8005206:	bd80      	pop	{r7, pc}

08005208 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8005208:	b580      	push	{r7, lr}
 800520a:	b084      	sub	sp, #16
 800520c:	af00      	add	r7, sp, #0
 800520e:	60f8      	str	r0, [r7, #12]
 8005210:	60b9      	str	r1, [r7, #8]
 8005212:	4613      	mov	r3, r2
 8005214:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8005216:	88fb      	ldrh	r3, [r7, #6]
 8005218:	68ba      	ldr	r2, [r7, #8]
 800521a:	2100      	movs	r1, #0
 800521c:	68f8      	ldr	r0, [r7, #12]
 800521e:	f000 fc28 	bl	8005a72 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8005222:	2300      	movs	r3, #0
}
 8005224:	4618      	mov	r0, r3
 8005226:	3710      	adds	r7, #16
 8005228:	46bd      	mov	sp, r7
 800522a:	bd80      	pop	{r7, pc}

0800522c <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800522c:	b580      	push	{r7, lr}
 800522e:	b082      	sub	sp, #8
 8005230:	af00      	add	r7, sp, #0
 8005232:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	2204      	movs	r2, #4
 8005238:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800523c:	2300      	movs	r3, #0
 800523e:	2200      	movs	r2, #0
 8005240:	2100      	movs	r1, #0
 8005242:	6878      	ldr	r0, [r7, #4]
 8005244:	f000 fbf2 	bl	8005a2c <USBD_LL_Transmit>

  return USBD_OK;
 8005248:	2300      	movs	r3, #0
}
 800524a:	4618      	mov	r0, r3
 800524c:	3708      	adds	r7, #8
 800524e:	46bd      	mov	sp, r7
 8005250:	bd80      	pop	{r7, pc}

08005252 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8005252:	b580      	push	{r7, lr}
 8005254:	b082      	sub	sp, #8
 8005256:	af00      	add	r7, sp, #0
 8005258:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	2205      	movs	r2, #5
 800525e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005262:	2300      	movs	r3, #0
 8005264:	2200      	movs	r2, #0
 8005266:	2100      	movs	r1, #0
 8005268:	6878      	ldr	r0, [r7, #4]
 800526a:	f000 fc02 	bl	8005a72 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800526e:	2300      	movs	r3, #0
}
 8005270:	4618      	mov	r0, r3
 8005272:	3708      	adds	r7, #8
 8005274:	46bd      	mov	sp, r7
 8005276:	bd80      	pop	{r7, pc}

08005278 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8005278:	b580      	push	{r7, lr}
 800527a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800527c:	2200      	movs	r2, #0
 800527e:	4912      	ldr	r1, [pc, #72]	; (80052c8 <MX_USB_DEVICE_Init+0x50>)
 8005280:	4812      	ldr	r0, [pc, #72]	; (80052cc <MX_USB_DEVICE_Init+0x54>)
 8005282:	f7fe ff6d 	bl	8004160 <USBD_Init>
 8005286:	4603      	mov	r3, r0
 8005288:	2b00      	cmp	r3, #0
 800528a:	d001      	beq.n	8005290 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800528c:	f7fb f9fc 	bl	8000688 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8005290:	490f      	ldr	r1, [pc, #60]	; (80052d0 <MX_USB_DEVICE_Init+0x58>)
 8005292:	480e      	ldr	r0, [pc, #56]	; (80052cc <MX_USB_DEVICE_Init+0x54>)
 8005294:	f7fe ff8f 	bl	80041b6 <USBD_RegisterClass>
 8005298:	4603      	mov	r3, r0
 800529a:	2b00      	cmp	r3, #0
 800529c:	d001      	beq.n	80052a2 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800529e:	f7fb f9f3 	bl	8000688 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80052a2:	490c      	ldr	r1, [pc, #48]	; (80052d4 <MX_USB_DEVICE_Init+0x5c>)
 80052a4:	4809      	ldr	r0, [pc, #36]	; (80052cc <MX_USB_DEVICE_Init+0x54>)
 80052a6:	f7fe feef 	bl	8004088 <USBD_CDC_RegisterInterface>
 80052aa:	4603      	mov	r3, r0
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d001      	beq.n	80052b4 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80052b0:	f7fb f9ea 	bl	8000688 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80052b4:	4805      	ldr	r0, [pc, #20]	; (80052cc <MX_USB_DEVICE_Init+0x54>)
 80052b6:	f7fe ff97 	bl	80041e8 <USBD_Start>
 80052ba:	4603      	mov	r3, r0
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d001      	beq.n	80052c4 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80052c0:	f7fb f9e2 	bl	8000688 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80052c4:	bf00      	nop
 80052c6:	bd80      	pop	{r7, pc}
 80052c8:	20000138 	.word	0x20000138
 80052cc:	20001658 	.word	0x20001658
 80052d0:	20000024 	.word	0x20000024
 80052d4:	20000128 	.word	0x20000128

080052d8 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80052d8:	b580      	push	{r7, lr}
 80052da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
	/* Set Application Buffers */
	USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80052dc:	2200      	movs	r2, #0
 80052de:	4905      	ldr	r1, [pc, #20]	; (80052f4 <CDC_Init_FS+0x1c>)
 80052e0:	4805      	ldr	r0, [pc, #20]	; (80052f8 <CDC_Init_FS+0x20>)
 80052e2:	f7fe fee7 	bl	80040b4 <USBD_CDC_SetTxBuffer>
	USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80052e6:	4905      	ldr	r1, [pc, #20]	; (80052fc <CDC_Init_FS+0x24>)
 80052e8:	4803      	ldr	r0, [pc, #12]	; (80052f8 <CDC_Init_FS+0x20>)
 80052ea:	f7fe fefc 	bl	80040e6 <USBD_CDC_SetRxBuffer>
	return (USBD_OK);
 80052ee:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80052f0:	4618      	mov	r0, r3
 80052f2:	bd80      	pop	{r7, pc}
 80052f4:	2000199c 	.word	0x2000199c
 80052f8:	20001658 	.word	0x20001658
 80052fc:	2000191c 	.word	0x2000191c

08005300 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8005300:	b480      	push	{r7}
 8005302:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
	return (USBD_OK);
 8005304:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8005306:	4618      	mov	r0, r3
 8005308:	46bd      	mov	sp, r7
 800530a:	bc80      	pop	{r7}
 800530c:	4770      	bx	lr
	...

08005310 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8005310:	b480      	push	{r7}
 8005312:	b083      	sub	sp, #12
 8005314:	af00      	add	r7, sp, #0
 8005316:	4603      	mov	r3, r0
 8005318:	6039      	str	r1, [r7, #0]
 800531a:	71fb      	strb	r3, [r7, #7]
 800531c:	4613      	mov	r3, r2
 800531e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
	switch (cmd) {
 8005320:	79fb      	ldrb	r3, [r7, #7]
 8005322:	2b23      	cmp	r3, #35	; 0x23
 8005324:	d84a      	bhi.n	80053bc <CDC_Control_FS+0xac>
 8005326:	a201      	add	r2, pc, #4	; (adr r2, 800532c <CDC_Control_FS+0x1c>)
 8005328:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800532c:	080053bd 	.word	0x080053bd
 8005330:	080053bd 	.word	0x080053bd
 8005334:	080053bd 	.word	0x080053bd
 8005338:	080053bd 	.word	0x080053bd
 800533c:	080053bd 	.word	0x080053bd
 8005340:	080053bd 	.word	0x080053bd
 8005344:	080053bd 	.word	0x080053bd
 8005348:	080053bd 	.word	0x080053bd
 800534c:	080053bd 	.word	0x080053bd
 8005350:	080053bd 	.word	0x080053bd
 8005354:	080053bd 	.word	0x080053bd
 8005358:	080053bd 	.word	0x080053bd
 800535c:	080053bd 	.word	0x080053bd
 8005360:	080053bd 	.word	0x080053bd
 8005364:	080053bd 	.word	0x080053bd
 8005368:	080053bd 	.word	0x080053bd
 800536c:	080053bd 	.word	0x080053bd
 8005370:	080053bd 	.word	0x080053bd
 8005374:	080053bd 	.word	0x080053bd
 8005378:	080053bd 	.word	0x080053bd
 800537c:	080053bd 	.word	0x080053bd
 8005380:	080053bd 	.word	0x080053bd
 8005384:	080053bd 	.word	0x080053bd
 8005388:	080053bd 	.word	0x080053bd
 800538c:	080053bd 	.word	0x080053bd
 8005390:	080053bd 	.word	0x080053bd
 8005394:	080053bd 	.word	0x080053bd
 8005398:	080053bd 	.word	0x080053bd
 800539c:	080053bd 	.word	0x080053bd
 80053a0:	080053bd 	.word	0x080053bd
 80053a4:	080053bd 	.word	0x080053bd
 80053a8:	080053bd 	.word	0x080053bd
 80053ac:	080053bd 	.word	0x080053bd
 80053b0:	080053bd 	.word	0x080053bd
 80053b4:	080053bd 	.word	0x080053bd
 80053b8:	080053bd 	.word	0x080053bd
	case CDC_SEND_BREAK:

		break;

	default:
		break;
 80053bc:	bf00      	nop
	}

	return (USBD_OK);
 80053be:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80053c0:	4618      	mov	r0, r3
 80053c2:	370c      	adds	r7, #12
 80053c4:	46bd      	mov	sp, r7
 80053c6:	bc80      	pop	{r7}
 80053c8:	4770      	bx	lr
 80053ca:	bf00      	nop

080053cc <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80053cc:	b580      	push	{r7, lr}
 80053ce:	b082      	sub	sp, #8
 80053d0:	af00      	add	r7, sp, #0
 80053d2:	6078      	str	r0, [r7, #4]
 80053d4:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */

	if (Buf[0] == '1') {
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	781b      	ldrb	r3, [r3, #0]
 80053da:	2b31      	cmp	r3, #49	; 0x31
 80053dc:	d106      	bne.n	80053ec <CDC_Receive_FS+0x20>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 0);
 80053de:	2200      	movs	r2, #0
 80053e0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80053e4:	480c      	ldr	r0, [pc, #48]	; (8005418 <CDC_Receive_FS+0x4c>)
 80053e6:	f7fb ff27 	bl	8001238 <HAL_GPIO_WritePin>
 80053ea:	e009      	b.n	8005400 <CDC_Receive_FS+0x34>
	} else if (Buf[0] == '0') {
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	781b      	ldrb	r3, [r3, #0]
 80053f0:	2b30      	cmp	r3, #48	; 0x30
 80053f2:	d105      	bne.n	8005400 <CDC_Receive_FS+0x34>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 1);
 80053f4:	2201      	movs	r2, #1
 80053f6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80053fa:	4807      	ldr	r0, [pc, #28]	; (8005418 <CDC_Receive_FS+0x4c>)
 80053fc:	f7fb ff1c 	bl	8001238 <HAL_GPIO_WritePin>
	}

	USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8005400:	6879      	ldr	r1, [r7, #4]
 8005402:	4806      	ldr	r0, [pc, #24]	; (800541c <CDC_Receive_FS+0x50>)
 8005404:	f7fe fe6f 	bl	80040e6 <USBD_CDC_SetRxBuffer>
	USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8005408:	4804      	ldr	r0, [pc, #16]	; (800541c <CDC_Receive_FS+0x50>)
 800540a:	f7fe fe7f 	bl	800410c <USBD_CDC_ReceivePacket>
	return (USBD_OK);
 800540e:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8005410:	4618      	mov	r0, r3
 8005412:	3708      	adds	r7, #8
 8005414:	46bd      	mov	sp, r7
 8005416:	bd80      	pop	{r7, pc}
 8005418:	40011000 	.word	0x40011000
 800541c:	20001658 	.word	0x20001658

08005420 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005420:	b480      	push	{r7}
 8005422:	b083      	sub	sp, #12
 8005424:	af00      	add	r7, sp, #0
 8005426:	4603      	mov	r3, r0
 8005428:	6039      	str	r1, [r7, #0]
 800542a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800542c:	683b      	ldr	r3, [r7, #0]
 800542e:	2212      	movs	r2, #18
 8005430:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8005432:	4b03      	ldr	r3, [pc, #12]	; (8005440 <USBD_FS_DeviceDescriptor+0x20>)
}
 8005434:	4618      	mov	r0, r3
 8005436:	370c      	adds	r7, #12
 8005438:	46bd      	mov	sp, r7
 800543a:	bc80      	pop	{r7}
 800543c:	4770      	bx	lr
 800543e:	bf00      	nop
 8005440:	20000154 	.word	0x20000154

08005444 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005444:	b480      	push	{r7}
 8005446:	b083      	sub	sp, #12
 8005448:	af00      	add	r7, sp, #0
 800544a:	4603      	mov	r3, r0
 800544c:	6039      	str	r1, [r7, #0]
 800544e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8005450:	683b      	ldr	r3, [r7, #0]
 8005452:	2204      	movs	r2, #4
 8005454:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8005456:	4b03      	ldr	r3, [pc, #12]	; (8005464 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8005458:	4618      	mov	r0, r3
 800545a:	370c      	adds	r7, #12
 800545c:	46bd      	mov	sp, r7
 800545e:	bc80      	pop	{r7}
 8005460:	4770      	bx	lr
 8005462:	bf00      	nop
 8005464:	20000168 	.word	0x20000168

08005468 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005468:	b580      	push	{r7, lr}
 800546a:	b082      	sub	sp, #8
 800546c:	af00      	add	r7, sp, #0
 800546e:	4603      	mov	r3, r0
 8005470:	6039      	str	r1, [r7, #0]
 8005472:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8005474:	79fb      	ldrb	r3, [r7, #7]
 8005476:	2b00      	cmp	r3, #0
 8005478:	d105      	bne.n	8005486 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800547a:	683a      	ldr	r2, [r7, #0]
 800547c:	4907      	ldr	r1, [pc, #28]	; (800549c <USBD_FS_ProductStrDescriptor+0x34>)
 800547e:	4808      	ldr	r0, [pc, #32]	; (80054a0 <USBD_FS_ProductStrDescriptor+0x38>)
 8005480:	f7ff fe1d 	bl	80050be <USBD_GetString>
 8005484:	e004      	b.n	8005490 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8005486:	683a      	ldr	r2, [r7, #0]
 8005488:	4904      	ldr	r1, [pc, #16]	; (800549c <USBD_FS_ProductStrDescriptor+0x34>)
 800548a:	4805      	ldr	r0, [pc, #20]	; (80054a0 <USBD_FS_ProductStrDescriptor+0x38>)
 800548c:	f7ff fe17 	bl	80050be <USBD_GetString>
  }
  return USBD_StrDesc;
 8005490:	4b02      	ldr	r3, [pc, #8]	; (800549c <USBD_FS_ProductStrDescriptor+0x34>)
}
 8005492:	4618      	mov	r0, r3
 8005494:	3708      	adds	r7, #8
 8005496:	46bd      	mov	sp, r7
 8005498:	bd80      	pop	{r7, pc}
 800549a:	bf00      	nop
 800549c:	20001a1c 	.word	0x20001a1c
 80054a0:	08005bfc 	.word	0x08005bfc

080054a4 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80054a4:	b580      	push	{r7, lr}
 80054a6:	b082      	sub	sp, #8
 80054a8:	af00      	add	r7, sp, #0
 80054aa:	4603      	mov	r3, r0
 80054ac:	6039      	str	r1, [r7, #0]
 80054ae:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80054b0:	683a      	ldr	r2, [r7, #0]
 80054b2:	4904      	ldr	r1, [pc, #16]	; (80054c4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80054b4:	4804      	ldr	r0, [pc, #16]	; (80054c8 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80054b6:	f7ff fe02 	bl	80050be <USBD_GetString>
  return USBD_StrDesc;
 80054ba:	4b02      	ldr	r3, [pc, #8]	; (80054c4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80054bc:	4618      	mov	r0, r3
 80054be:	3708      	adds	r7, #8
 80054c0:	46bd      	mov	sp, r7
 80054c2:	bd80      	pop	{r7, pc}
 80054c4:	20001a1c 	.word	0x20001a1c
 80054c8:	08005c14 	.word	0x08005c14

080054cc <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80054cc:	b580      	push	{r7, lr}
 80054ce:	b082      	sub	sp, #8
 80054d0:	af00      	add	r7, sp, #0
 80054d2:	4603      	mov	r3, r0
 80054d4:	6039      	str	r1, [r7, #0]
 80054d6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80054d8:	683b      	ldr	r3, [r7, #0]
 80054da:	221a      	movs	r2, #26
 80054dc:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80054de:	f000 f843 	bl	8005568 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */
  
  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80054e2:	4b02      	ldr	r3, [pc, #8]	; (80054ec <USBD_FS_SerialStrDescriptor+0x20>)
}
 80054e4:	4618      	mov	r0, r3
 80054e6:	3708      	adds	r7, #8
 80054e8:	46bd      	mov	sp, r7
 80054ea:	bd80      	pop	{r7, pc}
 80054ec:	2000016c 	.word	0x2000016c

080054f0 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80054f0:	b580      	push	{r7, lr}
 80054f2:	b082      	sub	sp, #8
 80054f4:	af00      	add	r7, sp, #0
 80054f6:	4603      	mov	r3, r0
 80054f8:	6039      	str	r1, [r7, #0]
 80054fa:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80054fc:	79fb      	ldrb	r3, [r7, #7]
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d105      	bne.n	800550e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8005502:	683a      	ldr	r2, [r7, #0]
 8005504:	4907      	ldr	r1, [pc, #28]	; (8005524 <USBD_FS_ConfigStrDescriptor+0x34>)
 8005506:	4808      	ldr	r0, [pc, #32]	; (8005528 <USBD_FS_ConfigStrDescriptor+0x38>)
 8005508:	f7ff fdd9 	bl	80050be <USBD_GetString>
 800550c:	e004      	b.n	8005518 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800550e:	683a      	ldr	r2, [r7, #0]
 8005510:	4904      	ldr	r1, [pc, #16]	; (8005524 <USBD_FS_ConfigStrDescriptor+0x34>)
 8005512:	4805      	ldr	r0, [pc, #20]	; (8005528 <USBD_FS_ConfigStrDescriptor+0x38>)
 8005514:	f7ff fdd3 	bl	80050be <USBD_GetString>
  }
  return USBD_StrDesc;
 8005518:	4b02      	ldr	r3, [pc, #8]	; (8005524 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800551a:	4618      	mov	r0, r3
 800551c:	3708      	adds	r7, #8
 800551e:	46bd      	mov	sp, r7
 8005520:	bd80      	pop	{r7, pc}
 8005522:	bf00      	nop
 8005524:	20001a1c 	.word	0x20001a1c
 8005528:	08005c28 	.word	0x08005c28

0800552c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800552c:	b580      	push	{r7, lr}
 800552e:	b082      	sub	sp, #8
 8005530:	af00      	add	r7, sp, #0
 8005532:	4603      	mov	r3, r0
 8005534:	6039      	str	r1, [r7, #0]
 8005536:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8005538:	79fb      	ldrb	r3, [r7, #7]
 800553a:	2b00      	cmp	r3, #0
 800553c:	d105      	bne.n	800554a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800553e:	683a      	ldr	r2, [r7, #0]
 8005540:	4907      	ldr	r1, [pc, #28]	; (8005560 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8005542:	4808      	ldr	r0, [pc, #32]	; (8005564 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8005544:	f7ff fdbb 	bl	80050be <USBD_GetString>
 8005548:	e004      	b.n	8005554 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800554a:	683a      	ldr	r2, [r7, #0]
 800554c:	4904      	ldr	r1, [pc, #16]	; (8005560 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800554e:	4805      	ldr	r0, [pc, #20]	; (8005564 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8005550:	f7ff fdb5 	bl	80050be <USBD_GetString>
  }
  return USBD_StrDesc;
 8005554:	4b02      	ldr	r3, [pc, #8]	; (8005560 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8005556:	4618      	mov	r0, r3
 8005558:	3708      	adds	r7, #8
 800555a:	46bd      	mov	sp, r7
 800555c:	bd80      	pop	{r7, pc}
 800555e:	bf00      	nop
 8005560:	20001a1c 	.word	0x20001a1c
 8005564:	08005c34 	.word	0x08005c34

08005568 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor 
  * @param  None 
  * @retval None
  */
static void Get_SerialNum(void)
{
 8005568:	b580      	push	{r7, lr}
 800556a:	b084      	sub	sp, #16
 800556c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800556e:	4b0f      	ldr	r3, [pc, #60]	; (80055ac <Get_SerialNum+0x44>)
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8005574:	4b0e      	ldr	r3, [pc, #56]	; (80055b0 <Get_SerialNum+0x48>)
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800557a:	4b0e      	ldr	r3, [pc, #56]	; (80055b4 <Get_SerialNum+0x4c>)
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8005580:	68fa      	ldr	r2, [r7, #12]
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	4413      	add	r3, r2
 8005586:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	2b00      	cmp	r3, #0
 800558c:	d009      	beq.n	80055a2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800558e:	2208      	movs	r2, #8
 8005590:	4909      	ldr	r1, [pc, #36]	; (80055b8 <Get_SerialNum+0x50>)
 8005592:	68f8      	ldr	r0, [r7, #12]
 8005594:	f000 f814 	bl	80055c0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8005598:	2204      	movs	r2, #4
 800559a:	4908      	ldr	r1, [pc, #32]	; (80055bc <Get_SerialNum+0x54>)
 800559c:	68b8      	ldr	r0, [r7, #8]
 800559e:	f000 f80f 	bl	80055c0 <IntToUnicode>
  }
}
 80055a2:	bf00      	nop
 80055a4:	3710      	adds	r7, #16
 80055a6:	46bd      	mov	sp, r7
 80055a8:	bd80      	pop	{r7, pc}
 80055aa:	bf00      	nop
 80055ac:	1ffff7e8 	.word	0x1ffff7e8
 80055b0:	1ffff7ec 	.word	0x1ffff7ec
 80055b4:	1ffff7f0 	.word	0x1ffff7f0
 80055b8:	2000016e 	.word	0x2000016e
 80055bc:	2000017e 	.word	0x2000017e

080055c0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer 
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80055c0:	b480      	push	{r7}
 80055c2:	b087      	sub	sp, #28
 80055c4:	af00      	add	r7, sp, #0
 80055c6:	60f8      	str	r0, [r7, #12]
 80055c8:	60b9      	str	r1, [r7, #8]
 80055ca:	4613      	mov	r3, r2
 80055cc:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80055ce:	2300      	movs	r3, #0
 80055d0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80055d2:	2300      	movs	r3, #0
 80055d4:	75fb      	strb	r3, [r7, #23]
 80055d6:	e027      	b.n	8005628 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	0f1b      	lsrs	r3, r3, #28
 80055dc:	2b09      	cmp	r3, #9
 80055de:	d80b      	bhi.n	80055f8 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	0f1b      	lsrs	r3, r3, #28
 80055e4:	b2da      	uxtb	r2, r3
 80055e6:	7dfb      	ldrb	r3, [r7, #23]
 80055e8:	005b      	lsls	r3, r3, #1
 80055ea:	4619      	mov	r1, r3
 80055ec:	68bb      	ldr	r3, [r7, #8]
 80055ee:	440b      	add	r3, r1
 80055f0:	3230      	adds	r2, #48	; 0x30
 80055f2:	b2d2      	uxtb	r2, r2
 80055f4:	701a      	strb	r2, [r3, #0]
 80055f6:	e00a      	b.n	800560e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	0f1b      	lsrs	r3, r3, #28
 80055fc:	b2da      	uxtb	r2, r3
 80055fe:	7dfb      	ldrb	r3, [r7, #23]
 8005600:	005b      	lsls	r3, r3, #1
 8005602:	4619      	mov	r1, r3
 8005604:	68bb      	ldr	r3, [r7, #8]
 8005606:	440b      	add	r3, r1
 8005608:	3237      	adds	r2, #55	; 0x37
 800560a:	b2d2      	uxtb	r2, r2
 800560c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	011b      	lsls	r3, r3, #4
 8005612:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8005614:	7dfb      	ldrb	r3, [r7, #23]
 8005616:	005b      	lsls	r3, r3, #1
 8005618:	3301      	adds	r3, #1
 800561a:	68ba      	ldr	r2, [r7, #8]
 800561c:	4413      	add	r3, r2
 800561e:	2200      	movs	r2, #0
 8005620:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8005622:	7dfb      	ldrb	r3, [r7, #23]
 8005624:	3301      	adds	r3, #1
 8005626:	75fb      	strb	r3, [r7, #23]
 8005628:	7dfa      	ldrb	r2, [r7, #23]
 800562a:	79fb      	ldrb	r3, [r7, #7]
 800562c:	429a      	cmp	r2, r3
 800562e:	d3d3      	bcc.n	80055d8 <IntToUnicode+0x18>
  }
}
 8005630:	bf00      	nop
 8005632:	371c      	adds	r7, #28
 8005634:	46bd      	mov	sp, r7
 8005636:	bc80      	pop	{r7}
 8005638:	4770      	bx	lr
	...

0800563c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800563c:	b580      	push	{r7, lr}
 800563e:	b084      	sub	sp, #16
 8005640:	af00      	add	r7, sp, #0
 8005642:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	4a0d      	ldr	r2, [pc, #52]	; (8005680 <HAL_PCD_MspInit+0x44>)
 800564a:	4293      	cmp	r3, r2
 800564c:	d113      	bne.n	8005676 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800564e:	4b0d      	ldr	r3, [pc, #52]	; (8005684 <HAL_PCD_MspInit+0x48>)
 8005650:	69db      	ldr	r3, [r3, #28]
 8005652:	4a0c      	ldr	r2, [pc, #48]	; (8005684 <HAL_PCD_MspInit+0x48>)
 8005654:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005658:	61d3      	str	r3, [r2, #28]
 800565a:	4b0a      	ldr	r3, [pc, #40]	; (8005684 <HAL_PCD_MspInit+0x48>)
 800565c:	69db      	ldr	r3, [r3, #28]
 800565e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005662:	60fb      	str	r3, [r7, #12]
 8005664:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8005666:	2200      	movs	r2, #0
 8005668:	2100      	movs	r1, #0
 800566a:	2014      	movs	r0, #20
 800566c:	f7fb fa25 	bl	8000aba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8005670:	2014      	movs	r0, #20
 8005672:	f7fb fa3e 	bl	8000af2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8005676:	bf00      	nop
 8005678:	3710      	adds	r7, #16
 800567a:	46bd      	mov	sp, r7
 800567c:	bd80      	pop	{r7, pc}
 800567e:	bf00      	nop
 8005680:	40005c00 	.word	0x40005c00
 8005684:	40021000 	.word	0x40021000

08005688 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005688:	b580      	push	{r7, lr}
 800568a:	b082      	sub	sp, #8
 800568c:	af00      	add	r7, sp, #0
 800568e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	f8d3 2268 	ldr.w	r2, [r3, #616]	; 0x268
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	f503 730c 	add.w	r3, r3, #560	; 0x230
 800569c:	4619      	mov	r1, r3
 800569e:	4610      	mov	r0, r2
 80056a0:	f7fe fdea 	bl	8004278 <USBD_LL_SetupStage>
}
 80056a4:	bf00      	nop
 80056a6:	3708      	adds	r7, #8
 80056a8:	46bd      	mov	sp, r7
 80056aa:	bd80      	pop	{r7, pc}

080056ac <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80056ac:	b580      	push	{r7, lr}
 80056ae:	b082      	sub	sp, #8
 80056b0:	af00      	add	r7, sp, #0
 80056b2:	6078      	str	r0, [r7, #4]
 80056b4:	460b      	mov	r3, r1
 80056b6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	f8d3 0268 	ldr.w	r0, [r3, #616]	; 0x268
 80056be:	78fb      	ldrb	r3, [r7, #3]
 80056c0:	687a      	ldr	r2, [r7, #4]
 80056c2:	015b      	lsls	r3, r3, #5
 80056c4:	4413      	add	r3, r2
 80056c6:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 80056ca:	681a      	ldr	r2, [r3, #0]
 80056cc:	78fb      	ldrb	r3, [r7, #3]
 80056ce:	4619      	mov	r1, r3
 80056d0:	f7fe fe1d 	bl	800430e <USBD_LL_DataOutStage>
}
 80056d4:	bf00      	nop
 80056d6:	3708      	adds	r7, #8
 80056d8:	46bd      	mov	sp, r7
 80056da:	bd80      	pop	{r7, pc}

080056dc <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80056dc:	b580      	push	{r7, lr}
 80056de:	b082      	sub	sp, #8
 80056e0:	af00      	add	r7, sp, #0
 80056e2:	6078      	str	r0, [r7, #4]
 80056e4:	460b      	mov	r3, r1
 80056e6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	f8d3 0268 	ldr.w	r0, [r3, #616]	; 0x268
 80056ee:	78fb      	ldrb	r3, [r7, #3]
 80056f0:	687a      	ldr	r2, [r7, #4]
 80056f2:	015b      	lsls	r3, r3, #5
 80056f4:	4413      	add	r3, r2
 80056f6:	333c      	adds	r3, #60	; 0x3c
 80056f8:	681a      	ldr	r2, [r3, #0]
 80056fa:	78fb      	ldrb	r3, [r7, #3]
 80056fc:	4619      	mov	r1, r3
 80056fe:	f7fe fe77 	bl	80043f0 <USBD_LL_DataInStage>
}
 8005702:	bf00      	nop
 8005704:	3708      	adds	r7, #8
 8005706:	46bd      	mov	sp, r7
 8005708:	bd80      	pop	{r7, pc}

0800570a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800570a:	b580      	push	{r7, lr}
 800570c:	b082      	sub	sp, #8
 800570e:	af00      	add	r7, sp, #0
 8005710:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8005718:	4618      	mov	r0, r3
 800571a:	f7fe ff87 	bl	800462c <USBD_LL_SOF>
}
 800571e:	bf00      	nop
 8005720:	3708      	adds	r7, #8
 8005722:	46bd      	mov	sp, r7
 8005724:	bd80      	pop	{r7, pc}

08005726 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{ 
 8005726:	b580      	push	{r7, lr}
 8005728:	b084      	sub	sp, #16
 800572a:	af00      	add	r7, sp, #0
 800572c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800572e:	2301      	movs	r3, #1
 8005730:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	689b      	ldr	r3, [r3, #8]
 8005736:	2b02      	cmp	r3, #2
 8005738:	d001      	beq.n	800573e <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800573a:	f7fa ffa5 	bl	8000688 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8005744:	7bfa      	ldrb	r2, [r7, #15]
 8005746:	4611      	mov	r1, r2
 8005748:	4618      	mov	r0, r3
 800574a:	f7fe ff37 	bl	80045bc <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8005754:	4618      	mov	r0, r3
 8005756:	f7fe fef0 	bl	800453a <USBD_LL_Reset>
}
 800575a:	bf00      	nop
 800575c:	3710      	adds	r7, #16
 800575e:	46bd      	mov	sp, r7
 8005760:	bd80      	pop	{r7, pc}
	...

08005764 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005764:	b580      	push	{r7, lr}
 8005766:	b082      	sub	sp, #8
 8005768:	af00      	add	r7, sp, #0
 800576a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8005772:	4618      	mov	r0, r3
 8005774:	f7fe ff31 	bl	80045da <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	699b      	ldr	r3, [r3, #24]
 800577c:	2b00      	cmp	r3, #0
 800577e:	d005      	beq.n	800578c <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8005780:	4b04      	ldr	r3, [pc, #16]	; (8005794 <HAL_PCD_SuspendCallback+0x30>)
 8005782:	691b      	ldr	r3, [r3, #16]
 8005784:	4a03      	ldr	r2, [pc, #12]	; (8005794 <HAL_PCD_SuspendCallback+0x30>)
 8005786:	f043 0306 	orr.w	r3, r3, #6
 800578a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800578c:	bf00      	nop
 800578e:	3708      	adds	r7, #8
 8005790:	46bd      	mov	sp, r7
 8005792:	bd80      	pop	{r7, pc}
 8005794:	e000ed00 	.word	0xe000ed00

08005798 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005798:	b580      	push	{r7, lr}
 800579a:	b082      	sub	sp, #8
 800579c:	af00      	add	r7, sp, #0
 800579e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 80057a6:	4618      	mov	r0, r3
 80057a8:	f7fe ff2b 	bl	8004602 <USBD_LL_Resume>
}
 80057ac:	bf00      	nop
 80057ae:	3708      	adds	r7, #8
 80057b0:	46bd      	mov	sp, r7
 80057b2:	bd80      	pop	{r7, pc}

080057b4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80057b4:	b580      	push	{r7, lr}
 80057b6:	b082      	sub	sp, #8
 80057b8:	af00      	add	r7, sp, #0
 80057ba:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 80057bc:	4a28      	ldr	r2, [pc, #160]	; (8005860 <USBD_LL_Init+0xac>)
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	f8c2 3268 	str.w	r3, [r2, #616]	; 0x268
  pdev->pData = &hpcd_USB_FS;
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	4a26      	ldr	r2, [pc, #152]	; (8005860 <USBD_LL_Init+0xac>)
 80057c8:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 80057cc:	4b24      	ldr	r3, [pc, #144]	; (8005860 <USBD_LL_Init+0xac>)
 80057ce:	4a25      	ldr	r2, [pc, #148]	; (8005864 <USBD_LL_Init+0xb0>)
 80057d0:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80057d2:	4b23      	ldr	r3, [pc, #140]	; (8005860 <USBD_LL_Init+0xac>)
 80057d4:	2208      	movs	r2, #8
 80057d6:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80057d8:	4b21      	ldr	r3, [pc, #132]	; (8005860 <USBD_LL_Init+0xac>)
 80057da:	2202      	movs	r2, #2
 80057dc:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80057de:	4b20      	ldr	r3, [pc, #128]	; (8005860 <USBD_LL_Init+0xac>)
 80057e0:	2200      	movs	r2, #0
 80057e2:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 80057e4:	4b1e      	ldr	r3, [pc, #120]	; (8005860 <USBD_LL_Init+0xac>)
 80057e6:	2200      	movs	r2, #0
 80057e8:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80057ea:	4b1d      	ldr	r3, [pc, #116]	; (8005860 <USBD_LL_Init+0xac>)
 80057ec:	2200      	movs	r2, #0
 80057ee:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80057f0:	481b      	ldr	r0, [pc, #108]	; (8005860 <USBD_LL_Init+0xac>)
 80057f2:	f7fb fd39 	bl	8001268 <HAL_PCD_Init>
 80057f6:	4603      	mov	r3, r0
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d001      	beq.n	8005800 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 80057fc:	f7fa ff44 	bl	8000688 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8005806:	2318      	movs	r3, #24
 8005808:	2200      	movs	r2, #0
 800580a:	2100      	movs	r1, #0
 800580c:	f7fc fbd2 	bl	8001fb4 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8005816:	2358      	movs	r3, #88	; 0x58
 8005818:	2200      	movs	r2, #0
 800581a:	2180      	movs	r1, #128	; 0x80
 800581c:	f7fc fbca 	bl	8001fb4 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8005826:	23c0      	movs	r3, #192	; 0xc0
 8005828:	2200      	movs	r2, #0
 800582a:	2181      	movs	r1, #129	; 0x81
 800582c:	f7fc fbc2 	bl	8001fb4 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8005836:	f44f 7388 	mov.w	r3, #272	; 0x110
 800583a:	2200      	movs	r2, #0
 800583c:	2101      	movs	r1, #1
 800583e:	f7fc fbb9 	bl	8001fb4 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8005848:	f44f 7380 	mov.w	r3, #256	; 0x100
 800584c:	2200      	movs	r2, #0
 800584e:	2182      	movs	r1, #130	; 0x82
 8005850:	f7fc fbb0 	bl	8001fb4 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8005854:	2300      	movs	r3, #0
}
 8005856:	4618      	mov	r0, r3
 8005858:	3708      	adds	r7, #8
 800585a:	46bd      	mov	sp, r7
 800585c:	bd80      	pop	{r7, pc}
 800585e:	bf00      	nop
 8005860:	20001c1c 	.word	0x20001c1c
 8005864:	40005c00 	.word	0x40005c00

08005868 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8005868:	b580      	push	{r7, lr}
 800586a:	b084      	sub	sp, #16
 800586c:	af00      	add	r7, sp, #0
 800586e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8005870:	2300      	movs	r3, #0
 8005872:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8005874:	2300      	movs	r3, #0
 8005876:	73bb      	strb	r3, [r7, #14]
 
  hal_status = HAL_PCD_Start(pdev->pData);
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800587e:	4618      	mov	r0, r3
 8005880:	f7fb fdd3 	bl	800142a <HAL_PCD_Start>
 8005884:	4603      	mov	r3, r0
 8005886:	73fb      	strb	r3, [r7, #15]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 8005888:	7bfb      	ldrb	r3, [r7, #15]
 800588a:	4618      	mov	r0, r3
 800588c:	f000 f948 	bl	8005b20 <USBD_Get_USB_Status>
 8005890:	4603      	mov	r3, r0
 8005892:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8005894:	7bbb      	ldrb	r3, [r7, #14]
}
 8005896:	4618      	mov	r0, r3
 8005898:	3710      	adds	r7, #16
 800589a:	46bd      	mov	sp, r7
 800589c:	bd80      	pop	{r7, pc}

0800589e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800589e:	b580      	push	{r7, lr}
 80058a0:	b084      	sub	sp, #16
 80058a2:	af00      	add	r7, sp, #0
 80058a4:	6078      	str	r0, [r7, #4]
 80058a6:	4608      	mov	r0, r1
 80058a8:	4611      	mov	r1, r2
 80058aa:	461a      	mov	r2, r3
 80058ac:	4603      	mov	r3, r0
 80058ae:	70fb      	strb	r3, [r7, #3]
 80058b0:	460b      	mov	r3, r1
 80058b2:	70bb      	strb	r3, [r7, #2]
 80058b4:	4613      	mov	r3, r2
 80058b6:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80058b8:	2300      	movs	r3, #0
 80058ba:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80058bc:	2300      	movs	r3, #0
 80058be:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80058c6:	78bb      	ldrb	r3, [r7, #2]
 80058c8:	883a      	ldrh	r2, [r7, #0]
 80058ca:	78f9      	ldrb	r1, [r7, #3]
 80058cc:	f7fb ff06 	bl	80016dc <HAL_PCD_EP_Open>
 80058d0:	4603      	mov	r3, r0
 80058d2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80058d4:	7bfb      	ldrb	r3, [r7, #15]
 80058d6:	4618      	mov	r0, r3
 80058d8:	f000 f922 	bl	8005b20 <USBD_Get_USB_Status>
 80058dc:	4603      	mov	r3, r0
 80058de:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;
 80058e0:	7bbb      	ldrb	r3, [r7, #14]
}
 80058e2:	4618      	mov	r0, r3
 80058e4:	3710      	adds	r7, #16
 80058e6:	46bd      	mov	sp, r7
 80058e8:	bd80      	pop	{r7, pc}

080058ea <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80058ea:	b580      	push	{r7, lr}
 80058ec:	b084      	sub	sp, #16
 80058ee:	af00      	add	r7, sp, #0
 80058f0:	6078      	str	r0, [r7, #4]
 80058f2:	460b      	mov	r3, r1
 80058f4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80058f6:	2300      	movs	r3, #0
 80058f8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80058fa:	2300      	movs	r3, #0
 80058fc:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005904:	78fa      	ldrb	r2, [r7, #3]
 8005906:	4611      	mov	r1, r2
 8005908:	4618      	mov	r0, r3
 800590a:	f7fb ff47 	bl	800179c <HAL_PCD_EP_Close>
 800590e:	4603      	mov	r3, r0
 8005910:	73fb      	strb	r3, [r7, #15]
      
  usb_status =  USBD_Get_USB_Status(hal_status);
 8005912:	7bfb      	ldrb	r3, [r7, #15]
 8005914:	4618      	mov	r0, r3
 8005916:	f000 f903 	bl	8005b20 <USBD_Get_USB_Status>
 800591a:	4603      	mov	r3, r0
 800591c:	73bb      	strb	r3, [r7, #14]

  return usb_status;  
 800591e:	7bbb      	ldrb	r3, [r7, #14]
}
 8005920:	4618      	mov	r0, r3
 8005922:	3710      	adds	r7, #16
 8005924:	46bd      	mov	sp, r7
 8005926:	bd80      	pop	{r7, pc}

08005928 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8005928:	b580      	push	{r7, lr}
 800592a:	b084      	sub	sp, #16
 800592c:	af00      	add	r7, sp, #0
 800592e:	6078      	str	r0, [r7, #4]
 8005930:	460b      	mov	r3, r1
 8005932:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8005934:	2300      	movs	r3, #0
 8005936:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8005938:	2300      	movs	r3, #0
 800593a:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005942:	78fa      	ldrb	r2, [r7, #3]
 8005944:	4611      	mov	r1, r2
 8005946:	4618      	mov	r0, r3
 8005948:	f7fb fff1 	bl	800192e <HAL_PCD_EP_SetStall>
 800594c:	4603      	mov	r3, r0
 800594e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8005950:	7bfb      	ldrb	r3, [r7, #15]
 8005952:	4618      	mov	r0, r3
 8005954:	f000 f8e4 	bl	8005b20 <USBD_Get_USB_Status>
 8005958:	4603      	mov	r3, r0
 800595a:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 800595c:	7bbb      	ldrb	r3, [r7, #14]
}
 800595e:	4618      	mov	r0, r3
 8005960:	3710      	adds	r7, #16
 8005962:	46bd      	mov	sp, r7
 8005964:	bd80      	pop	{r7, pc}

08005966 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8005966:	b580      	push	{r7, lr}
 8005968:	b084      	sub	sp, #16
 800596a:	af00      	add	r7, sp, #0
 800596c:	6078      	str	r0, [r7, #4]
 800596e:	460b      	mov	r3, r1
 8005970:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8005972:	2300      	movs	r3, #0
 8005974:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8005976:	2300      	movs	r3, #0
 8005978:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);  
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005980:	78fa      	ldrb	r2, [r7, #3]
 8005982:	4611      	mov	r1, r2
 8005984:	4618      	mov	r0, r3
 8005986:	f7fc f82c 	bl	80019e2 <HAL_PCD_EP_ClrStall>
 800598a:	4603      	mov	r3, r0
 800598c:	73fb      	strb	r3, [r7, #15]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 800598e:	7bfb      	ldrb	r3, [r7, #15]
 8005990:	4618      	mov	r0, r3
 8005992:	f000 f8c5 	bl	8005b20 <USBD_Get_USB_Status>
 8005996:	4603      	mov	r3, r0
 8005998:	73bb      	strb	r3, [r7, #14]

  return usb_status; 
 800599a:	7bbb      	ldrb	r3, [r7, #14]
}
 800599c:	4618      	mov	r0, r3
 800599e:	3710      	adds	r7, #16
 80059a0:	46bd      	mov	sp, r7
 80059a2:	bd80      	pop	{r7, pc}

080059a4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80059a4:	b480      	push	{r7}
 80059a6:	b085      	sub	sp, #20
 80059a8:	af00      	add	r7, sp, #0
 80059aa:	6078      	str	r0, [r7, #4]
 80059ac:	460b      	mov	r3, r1
 80059ae:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80059b6:	60fb      	str	r3, [r7, #12]
  
  if((ep_addr & 0x80) == 0x80)
 80059b8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80059bc:	2b00      	cmp	r3, #0
 80059be:	da08      	bge.n	80059d2 <USBD_LL_IsStallEP+0x2e>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 80059c0:	78fb      	ldrb	r3, [r7, #3]
 80059c2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80059c6:	68fa      	ldr	r2, [r7, #12]
 80059c8:	015b      	lsls	r3, r3, #5
 80059ca:	4413      	add	r3, r2
 80059cc:	332a      	adds	r3, #42	; 0x2a
 80059ce:	781b      	ldrb	r3, [r3, #0]
 80059d0:	e008      	b.n	80059e4 <USBD_LL_IsStallEP+0x40>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 80059d2:	78fb      	ldrb	r3, [r7, #3]
 80059d4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80059d8:	68fa      	ldr	r2, [r7, #12]
 80059da:	015b      	lsls	r3, r3, #5
 80059dc:	4413      	add	r3, r2
 80059de:	f503 7395 	add.w	r3, r3, #298	; 0x12a
 80059e2:	781b      	ldrb	r3, [r3, #0]
  }
}
 80059e4:	4618      	mov	r0, r3
 80059e6:	3714      	adds	r7, #20
 80059e8:	46bd      	mov	sp, r7
 80059ea:	bc80      	pop	{r7}
 80059ec:	4770      	bx	lr

080059ee <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80059ee:	b580      	push	{r7, lr}
 80059f0:	b084      	sub	sp, #16
 80059f2:	af00      	add	r7, sp, #0
 80059f4:	6078      	str	r0, [r7, #4]
 80059f6:	460b      	mov	r3, r1
 80059f8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80059fa:	2300      	movs	r3, #0
 80059fc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80059fe:	2300      	movs	r3, #0
 8005a00:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005a08:	78fa      	ldrb	r2, [r7, #3]
 8005a0a:	4611      	mov	r1, r2
 8005a0c:	4618      	mov	r0, r3
 8005a0e:	f7fb fe40 	bl	8001692 <HAL_PCD_SetAddress>
 8005a12:	4603      	mov	r3, r0
 8005a14:	73fb      	strb	r3, [r7, #15]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 8005a16:	7bfb      	ldrb	r3, [r7, #15]
 8005a18:	4618      	mov	r0, r3
 8005a1a:	f000 f881 	bl	8005b20 <USBD_Get_USB_Status>
 8005a1e:	4603      	mov	r3, r0
 8005a20:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 8005a22:	7bbb      	ldrb	r3, [r7, #14]
}
 8005a24:	4618      	mov	r0, r3
 8005a26:	3710      	adds	r7, #16
 8005a28:	46bd      	mov	sp, r7
 8005a2a:	bd80      	pop	{r7, pc}

08005a2c <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8005a2c:	b580      	push	{r7, lr}
 8005a2e:	b086      	sub	sp, #24
 8005a30:	af00      	add	r7, sp, #0
 8005a32:	60f8      	str	r0, [r7, #12]
 8005a34:	607a      	str	r2, [r7, #4]
 8005a36:	461a      	mov	r2, r3
 8005a38:	460b      	mov	r3, r1
 8005a3a:	72fb      	strb	r3, [r7, #11]
 8005a3c:	4613      	mov	r3, r2
 8005a3e:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8005a40:	2300      	movs	r3, #0
 8005a42:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8005a44:	2300      	movs	r3, #0
 8005a46:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8005a4e:	893b      	ldrh	r3, [r7, #8]
 8005a50:	7af9      	ldrb	r1, [r7, #11]
 8005a52:	687a      	ldr	r2, [r7, #4]
 8005a54:	f7fb ff32 	bl	80018bc <HAL_PCD_EP_Transmit>
 8005a58:	4603      	mov	r3, r0
 8005a5a:	75fb      	strb	r3, [r7, #23]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 8005a5c:	7dfb      	ldrb	r3, [r7, #23]
 8005a5e:	4618      	mov	r0, r3
 8005a60:	f000 f85e 	bl	8005b20 <USBD_Get_USB_Status>
 8005a64:	4603      	mov	r3, r0
 8005a66:	75bb      	strb	r3, [r7, #22]
  
  return usb_status;    
 8005a68:	7dbb      	ldrb	r3, [r7, #22]
}
 8005a6a:	4618      	mov	r0, r3
 8005a6c:	3718      	adds	r7, #24
 8005a6e:	46bd      	mov	sp, r7
 8005a70:	bd80      	pop	{r7, pc}

08005a72 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8005a72:	b580      	push	{r7, lr}
 8005a74:	b086      	sub	sp, #24
 8005a76:	af00      	add	r7, sp, #0
 8005a78:	60f8      	str	r0, [r7, #12]
 8005a7a:	607a      	str	r2, [r7, #4]
 8005a7c:	461a      	mov	r2, r3
 8005a7e:	460b      	mov	r3, r1
 8005a80:	72fb      	strb	r3, [r7, #11]
 8005a82:	4613      	mov	r3, r2
 8005a84:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8005a86:	2300      	movs	r3, #0
 8005a88:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8005a8a:	2300      	movs	r3, #0
 8005a8c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8005a94:	893b      	ldrh	r3, [r7, #8]
 8005a96:	7af9      	ldrb	r1, [r7, #11]
 8005a98:	687a      	ldr	r2, [r7, #4]
 8005a9a:	f7fb fec1 	bl	8001820 <HAL_PCD_EP_Receive>
 8005a9e:	4603      	mov	r3, r0
 8005aa0:	75fb      	strb	r3, [r7, #23]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 8005aa2:	7dfb      	ldrb	r3, [r7, #23]
 8005aa4:	4618      	mov	r0, r3
 8005aa6:	f000 f83b 	bl	8005b20 <USBD_Get_USB_Status>
 8005aaa:	4603      	mov	r3, r0
 8005aac:	75bb      	strb	r3, [r7, #22]
  	
  return usb_status; 
 8005aae:	7dbb      	ldrb	r3, [r7, #22]
}
 8005ab0:	4618      	mov	r0, r3
 8005ab2:	3718      	adds	r7, #24
 8005ab4:	46bd      	mov	sp, r7
 8005ab6:	bd80      	pop	{r7, pc}

08005ab8 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8005ab8:	b580      	push	{r7, lr}
 8005aba:	b082      	sub	sp, #8
 8005abc:	af00      	add	r7, sp, #0
 8005abe:	6078      	str	r0, [r7, #4]
 8005ac0:	460b      	mov	r3, r1
 8005ac2:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005aca:	78fa      	ldrb	r2, [r7, #3]
 8005acc:	4611      	mov	r1, r2
 8005ace:	4618      	mov	r0, r3
 8005ad0:	f7fb fee0 	bl	8001894 <HAL_PCD_EP_GetRxCount>
 8005ad4:	4603      	mov	r3, r0
}
 8005ad6:	4618      	mov	r0, r3
 8005ad8:	3708      	adds	r7, #8
 8005ada:	46bd      	mov	sp, r7
 8005adc:	bd80      	pop	{r7, pc}
	...

08005ae0 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8005ae0:	b480      	push	{r7}
 8005ae2:	b083      	sub	sp, #12
 8005ae4:	af00      	add	r7, sp, #0
 8005ae6:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8005ae8:	4b02      	ldr	r3, [pc, #8]	; (8005af4 <USBD_static_malloc+0x14>)
}
 8005aea:	4618      	mov	r0, r3
 8005aec:	370c      	adds	r7, #12
 8005aee:	46bd      	mov	sp, r7
 8005af0:	bc80      	pop	{r7}
 8005af2:	4770      	bx	lr
 8005af4:	200013ac 	.word	0x200013ac

08005af8 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8005af8:	b480      	push	{r7}
 8005afa:	b083      	sub	sp, #12
 8005afc:	af00      	add	r7, sp, #0
 8005afe:	6078      	str	r0, [r7, #4]

}
 8005b00:	bf00      	nop
 8005b02:	370c      	adds	r7, #12
 8005b04:	46bd      	mov	sp, r7
 8005b06:	bc80      	pop	{r7}
 8005b08:	4770      	bx	lr

08005b0a <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005b0a:	b480      	push	{r7}
 8005b0c:	b083      	sub	sp, #12
 8005b0e:	af00      	add	r7, sp, #0
 8005b10:	6078      	str	r0, [r7, #4]
 8005b12:	460b      	mov	r3, r1
 8005b14:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 8005b16:	bf00      	nop
 8005b18:	370c      	adds	r7, #12
 8005b1a:	46bd      	mov	sp, r7
 8005b1c:	bc80      	pop	{r7}
 8005b1e:	4770      	bx	lr

08005b20 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8005b20:	b480      	push	{r7}
 8005b22:	b085      	sub	sp, #20
 8005b24:	af00      	add	r7, sp, #0
 8005b26:	4603      	mov	r3, r0
 8005b28:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8005b2a:	2300      	movs	r3, #0
 8005b2c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8005b2e:	79fb      	ldrb	r3, [r7, #7]
 8005b30:	2b03      	cmp	r3, #3
 8005b32:	d817      	bhi.n	8005b64 <USBD_Get_USB_Status+0x44>
 8005b34:	a201      	add	r2, pc, #4	; (adr r2, 8005b3c <USBD_Get_USB_Status+0x1c>)
 8005b36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b3a:	bf00      	nop
 8005b3c:	08005b4d 	.word	0x08005b4d
 8005b40:	08005b53 	.word	0x08005b53
 8005b44:	08005b59 	.word	0x08005b59
 8005b48:	08005b5f 	.word	0x08005b5f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8005b4c:	2300      	movs	r3, #0
 8005b4e:	73fb      	strb	r3, [r7, #15]
    break;
 8005b50:	e00b      	b.n	8005b6a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8005b52:	2302      	movs	r3, #2
 8005b54:	73fb      	strb	r3, [r7, #15]
    break;
 8005b56:	e008      	b.n	8005b6a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8005b58:	2301      	movs	r3, #1
 8005b5a:	73fb      	strb	r3, [r7, #15]
    break;
 8005b5c:	e005      	b.n	8005b6a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8005b5e:	2302      	movs	r3, #2
 8005b60:	73fb      	strb	r3, [r7, #15]
    break;
 8005b62:	e002      	b.n	8005b6a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8005b64:	2302      	movs	r3, #2
 8005b66:	73fb      	strb	r3, [r7, #15]
    break;
 8005b68:	bf00      	nop
  }
  return usb_status;
 8005b6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b6c:	4618      	mov	r0, r3
 8005b6e:	3714      	adds	r7, #20
 8005b70:	46bd      	mov	sp, r7
 8005b72:	bc80      	pop	{r7}
 8005b74:	4770      	bx	lr
 8005b76:	bf00      	nop

08005b78 <__libc_init_array>:
 8005b78:	b570      	push	{r4, r5, r6, lr}
 8005b7a:	2500      	movs	r5, #0
 8005b7c:	4e0c      	ldr	r6, [pc, #48]	; (8005bb0 <__libc_init_array+0x38>)
 8005b7e:	4c0d      	ldr	r4, [pc, #52]	; (8005bb4 <__libc_init_array+0x3c>)
 8005b80:	1ba4      	subs	r4, r4, r6
 8005b82:	10a4      	asrs	r4, r4, #2
 8005b84:	42a5      	cmp	r5, r4
 8005b86:	d109      	bne.n	8005b9c <__libc_init_array+0x24>
 8005b88:	f000 f822 	bl	8005bd0 <_init>
 8005b8c:	2500      	movs	r5, #0
 8005b8e:	4e0a      	ldr	r6, [pc, #40]	; (8005bb8 <__libc_init_array+0x40>)
 8005b90:	4c0a      	ldr	r4, [pc, #40]	; (8005bbc <__libc_init_array+0x44>)
 8005b92:	1ba4      	subs	r4, r4, r6
 8005b94:	10a4      	asrs	r4, r4, #2
 8005b96:	42a5      	cmp	r5, r4
 8005b98:	d105      	bne.n	8005ba6 <__libc_init_array+0x2e>
 8005b9a:	bd70      	pop	{r4, r5, r6, pc}
 8005b9c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005ba0:	4798      	blx	r3
 8005ba2:	3501      	adds	r5, #1
 8005ba4:	e7ee      	b.n	8005b84 <__libc_init_array+0xc>
 8005ba6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005baa:	4798      	blx	r3
 8005bac:	3501      	adds	r5, #1
 8005bae:	e7f2      	b.n	8005b96 <__libc_init_array+0x1e>
 8005bb0:	08005c54 	.word	0x08005c54
 8005bb4:	08005c54 	.word	0x08005c54
 8005bb8:	08005c54 	.word	0x08005c54
 8005bbc:	08005c58 	.word	0x08005c58

08005bc0 <memset>:
 8005bc0:	4603      	mov	r3, r0
 8005bc2:	4402      	add	r2, r0
 8005bc4:	4293      	cmp	r3, r2
 8005bc6:	d100      	bne.n	8005bca <memset+0xa>
 8005bc8:	4770      	bx	lr
 8005bca:	f803 1b01 	strb.w	r1, [r3], #1
 8005bce:	e7f9      	b.n	8005bc4 <memset+0x4>

08005bd0 <_init>:
 8005bd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005bd2:	bf00      	nop
 8005bd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005bd6:	bc08      	pop	{r3}
 8005bd8:	469e      	mov	lr, r3
 8005bda:	4770      	bx	lr

08005bdc <_fini>:
 8005bdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005bde:	bf00      	nop
 8005be0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005be2:	bc08      	pop	{r3}
 8005be4:	469e      	mov	lr, r3
 8005be6:	4770      	bx	lr
