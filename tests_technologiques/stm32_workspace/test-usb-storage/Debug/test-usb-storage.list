
test-usb-storage.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000625c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a4  08006368  08006368  00016368  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800640c  0800640c  00020b20  2**0
                  CONTENTS
  4 .ARM          00000000  0800640c  0800640c  00020b20  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800640c  0800640c  00020b20  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800640c  0800640c  0001640c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006410  08006410  00016410  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000b20  20000000  08006414  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000009c4  20000b20  08006f34  00020b20  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200014e4  08006f34  000214e4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020b20  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012fdd  00000000  00000000  00020b49  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002fa3  00000000  00000000  00033b26  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000b60  00000000  00000000  00036ad0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000009e0  00000000  00000000  00037630  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00016b69  00000000  00000000  00038010  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000d60b  00000000  00000000  0004eb79  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0006b5e7  00000000  00000000  0005c184  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000c776b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002b7c  00000000  00000000  000c77e8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000b20 	.word	0x20000b20
 8000128:	00000000 	.word	0x00000000
 800012c:	08006350 	.word	0x08006350

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000b24 	.word	0x20000b24
 8000148:	08006350 	.word	0x08006350

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000150:	f000 f97e 	bl	8000450 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000154:	f000 f810 	bl	8000178 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000158:	f000 f868 	bl	800022c <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 800015c:	f005 fc40 	bl	80059e0 <MX_USB_DEVICE_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8000160:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000164:	4803      	ldr	r0, [pc, #12]	; (8000174 <main+0x28>)
 8000166:	f000 fc6f 	bl	8000a48 <HAL_GPIO_TogglePin>

    HAL_Delay(1000);
 800016a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800016e:	f000 f9d1 	bl	8000514 <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8000172:	e7f5      	b.n	8000160 <main+0x14>
 8000174:	40011000 	.word	0x40011000

08000178 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000178:	b580      	push	{r7, lr}
 800017a:	b094      	sub	sp, #80	; 0x50
 800017c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800017e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000182:	2228      	movs	r2, #40	; 0x28
 8000184:	2100      	movs	r1, #0
 8000186:	4618      	mov	r0, r3
 8000188:	f006 f8d9 	bl	800633e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800018c:	f107 0314 	add.w	r3, r7, #20
 8000190:	2200      	movs	r2, #0
 8000192:	601a      	str	r2, [r3, #0]
 8000194:	605a      	str	r2, [r3, #4]
 8000196:	609a      	str	r2, [r3, #8]
 8000198:	60da      	str	r2, [r3, #12]
 800019a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800019c:	1d3b      	adds	r3, r7, #4
 800019e:	2200      	movs	r2, #0
 80001a0:	601a      	str	r2, [r3, #0]
 80001a2:	605a      	str	r2, [r3, #4]
 80001a4:	609a      	str	r2, [r3, #8]
 80001a6:	60da      	str	r2, [r3, #12]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80001a8:	2301      	movs	r3, #1
 80001aa:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80001ac:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80001b0:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80001b2:	2300      	movs	r3, #0
 80001b4:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80001b6:	2301      	movs	r3, #1
 80001b8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80001ba:	2302      	movs	r3, #2
 80001bc:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80001be:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80001c2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80001c4:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80001c8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80001ca:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80001ce:	4618      	mov	r0, r3
 80001d0:	f001 fb60 	bl	8001894 <HAL_RCC_OscConfig>
 80001d4:	4603      	mov	r3, r0
 80001d6:	2b00      	cmp	r3, #0
 80001d8:	d001      	beq.n	80001de <SystemClock_Config+0x66>
  {
    Error_Handler();
 80001da:	f000 f873 	bl	80002c4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80001de:	230f      	movs	r3, #15
 80001e0:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80001e2:	2302      	movs	r3, #2
 80001e4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80001e6:	2300      	movs	r3, #0
 80001e8:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80001ea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80001ee:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80001f0:	2300      	movs	r3, #0
 80001f2:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80001f4:	f107 0314 	add.w	r3, r7, #20
 80001f8:	2102      	movs	r1, #2
 80001fa:	4618      	mov	r0, r3
 80001fc:	f001 fdca 	bl	8001d94 <HAL_RCC_ClockConfig>
 8000200:	4603      	mov	r3, r0
 8000202:	2b00      	cmp	r3, #0
 8000204:	d001      	beq.n	800020a <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000206:	f000 f85d 	bl	80002c4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800020a:	2310      	movs	r3, #16
 800020c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 800020e:	2300      	movs	r3, #0
 8000210:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000212:	1d3b      	adds	r3, r7, #4
 8000214:	4618      	mov	r0, r3
 8000216:	f001 ff27 	bl	8002068 <HAL_RCCEx_PeriphCLKConfig>
 800021a:	4603      	mov	r3, r0
 800021c:	2b00      	cmp	r3, #0
 800021e:	d001      	beq.n	8000224 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8000220:	f000 f850 	bl	80002c4 <Error_Handler>
  }
}
 8000224:	bf00      	nop
 8000226:	3750      	adds	r7, #80	; 0x50
 8000228:	46bd      	mov	sp, r7
 800022a:	bd80      	pop	{r7, pc}

0800022c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800022c:	b580      	push	{r7, lr}
 800022e:	b088      	sub	sp, #32
 8000230:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000232:	f107 0310 	add.w	r3, r7, #16
 8000236:	2200      	movs	r2, #0
 8000238:	601a      	str	r2, [r3, #0]
 800023a:	605a      	str	r2, [r3, #4]
 800023c:	609a      	str	r2, [r3, #8]
 800023e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000240:	4b1e      	ldr	r3, [pc, #120]	; (80002bc <MX_GPIO_Init+0x90>)
 8000242:	699b      	ldr	r3, [r3, #24]
 8000244:	4a1d      	ldr	r2, [pc, #116]	; (80002bc <MX_GPIO_Init+0x90>)
 8000246:	f043 0310 	orr.w	r3, r3, #16
 800024a:	6193      	str	r3, [r2, #24]
 800024c:	4b1b      	ldr	r3, [pc, #108]	; (80002bc <MX_GPIO_Init+0x90>)
 800024e:	699b      	ldr	r3, [r3, #24]
 8000250:	f003 0310 	and.w	r3, r3, #16
 8000254:	60fb      	str	r3, [r7, #12]
 8000256:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000258:	4b18      	ldr	r3, [pc, #96]	; (80002bc <MX_GPIO_Init+0x90>)
 800025a:	699b      	ldr	r3, [r3, #24]
 800025c:	4a17      	ldr	r2, [pc, #92]	; (80002bc <MX_GPIO_Init+0x90>)
 800025e:	f043 0320 	orr.w	r3, r3, #32
 8000262:	6193      	str	r3, [r2, #24]
 8000264:	4b15      	ldr	r3, [pc, #84]	; (80002bc <MX_GPIO_Init+0x90>)
 8000266:	699b      	ldr	r3, [r3, #24]
 8000268:	f003 0320 	and.w	r3, r3, #32
 800026c:	60bb      	str	r3, [r7, #8]
 800026e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000270:	4b12      	ldr	r3, [pc, #72]	; (80002bc <MX_GPIO_Init+0x90>)
 8000272:	699b      	ldr	r3, [r3, #24]
 8000274:	4a11      	ldr	r2, [pc, #68]	; (80002bc <MX_GPIO_Init+0x90>)
 8000276:	f043 0304 	orr.w	r3, r3, #4
 800027a:	6193      	str	r3, [r2, #24]
 800027c:	4b0f      	ldr	r3, [pc, #60]	; (80002bc <MX_GPIO_Init+0x90>)
 800027e:	699b      	ldr	r3, [r3, #24]
 8000280:	f003 0304 	and.w	r3, r3, #4
 8000284:	607b      	str	r3, [r7, #4]
 8000286:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000288:	2200      	movs	r2, #0
 800028a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800028e:	480c      	ldr	r0, [pc, #48]	; (80002c0 <MX_GPIO_Init+0x94>)
 8000290:	f000 fbc2 	bl	8000a18 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000294:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000298:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800029a:	2301      	movs	r3, #1
 800029c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800029e:	2300      	movs	r3, #0
 80002a0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80002a2:	2302      	movs	r3, #2
 80002a4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80002a6:	f107 0310 	add.w	r3, r7, #16
 80002aa:	4619      	mov	r1, r3
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <MX_GPIO_Init+0x94>)
 80002ae:	f000 fa61 	bl	8000774 <HAL_GPIO_Init>

}
 80002b2:	bf00      	nop
 80002b4:	3720      	adds	r7, #32
 80002b6:	46bd      	mov	sp, r7
 80002b8:	bd80      	pop	{r7, pc}
 80002ba:	bf00      	nop
 80002bc:	40021000 	.word	0x40021000
 80002c0:	40011000 	.word	0x40011000

080002c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80002c4:	b480      	push	{r7}
 80002c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80002c8:	bf00      	nop
 80002ca:	46bd      	mov	sp, r7
 80002cc:	bc80      	pop	{r7}
 80002ce:	4770      	bx	lr

080002d0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80002d0:	b480      	push	{r7}
 80002d2:	b085      	sub	sp, #20
 80002d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80002d6:	4b15      	ldr	r3, [pc, #84]	; (800032c <HAL_MspInit+0x5c>)
 80002d8:	699b      	ldr	r3, [r3, #24]
 80002da:	4a14      	ldr	r2, [pc, #80]	; (800032c <HAL_MspInit+0x5c>)
 80002dc:	f043 0301 	orr.w	r3, r3, #1
 80002e0:	6193      	str	r3, [r2, #24]
 80002e2:	4b12      	ldr	r3, [pc, #72]	; (800032c <HAL_MspInit+0x5c>)
 80002e4:	699b      	ldr	r3, [r3, #24]
 80002e6:	f003 0301 	and.w	r3, r3, #1
 80002ea:	60bb      	str	r3, [r7, #8]
 80002ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80002ee:	4b0f      	ldr	r3, [pc, #60]	; (800032c <HAL_MspInit+0x5c>)
 80002f0:	69db      	ldr	r3, [r3, #28]
 80002f2:	4a0e      	ldr	r2, [pc, #56]	; (800032c <HAL_MspInit+0x5c>)
 80002f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80002f8:	61d3      	str	r3, [r2, #28]
 80002fa:	4b0c      	ldr	r3, [pc, #48]	; (800032c <HAL_MspInit+0x5c>)
 80002fc:	69db      	ldr	r3, [r3, #28]
 80002fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000302:	607b      	str	r3, [r7, #4]
 8000304:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000306:	4b0a      	ldr	r3, [pc, #40]	; (8000330 <HAL_MspInit+0x60>)
 8000308:	685b      	ldr	r3, [r3, #4]
 800030a:	60fb      	str	r3, [r7, #12]
 800030c:	68fb      	ldr	r3, [r7, #12]
 800030e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000312:	60fb      	str	r3, [r7, #12]
 8000314:	68fb      	ldr	r3, [r7, #12]
 8000316:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800031a:	60fb      	str	r3, [r7, #12]
 800031c:	4a04      	ldr	r2, [pc, #16]	; (8000330 <HAL_MspInit+0x60>)
 800031e:	68fb      	ldr	r3, [r7, #12]
 8000320:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000322:	bf00      	nop
 8000324:	3714      	adds	r7, #20
 8000326:	46bd      	mov	sp, r7
 8000328:	bc80      	pop	{r7}
 800032a:	4770      	bx	lr
 800032c:	40021000 	.word	0x40021000
 8000330:	40010000 	.word	0x40010000

08000334 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000334:	b480      	push	{r7}
 8000336:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000338:	bf00      	nop
 800033a:	46bd      	mov	sp, r7
 800033c:	bc80      	pop	{r7}
 800033e:	4770      	bx	lr

08000340 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000340:	b480      	push	{r7}
 8000342:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000344:	e7fe      	b.n	8000344 <HardFault_Handler+0x4>

08000346 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000346:	b480      	push	{r7}
 8000348:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800034a:	e7fe      	b.n	800034a <MemManage_Handler+0x4>

0800034c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800034c:	b480      	push	{r7}
 800034e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000350:	e7fe      	b.n	8000350 <BusFault_Handler+0x4>

08000352 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000352:	b480      	push	{r7}
 8000354:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000356:	e7fe      	b.n	8000356 <UsageFault_Handler+0x4>

08000358 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000358:	b480      	push	{r7}
 800035a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800035c:	bf00      	nop
 800035e:	46bd      	mov	sp, r7
 8000360:	bc80      	pop	{r7}
 8000362:	4770      	bx	lr

08000364 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000364:	b480      	push	{r7}
 8000366:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000368:	bf00      	nop
 800036a:	46bd      	mov	sp, r7
 800036c:	bc80      	pop	{r7}
 800036e:	4770      	bx	lr

08000370 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000370:	b480      	push	{r7}
 8000372:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000374:	bf00      	nop
 8000376:	46bd      	mov	sp, r7
 8000378:	bc80      	pop	{r7}
 800037a:	4770      	bx	lr

0800037c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800037c:	b580      	push	{r7, lr}
 800037e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000380:	f000 f8ac 	bl	80004dc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000384:	bf00      	nop
 8000386:	bd80      	pop	{r7, pc}

08000388 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8000388:	b580      	push	{r7, lr}
 800038a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 800038c:	4802      	ldr	r0, [pc, #8]	; (8000398 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 800038e:	f000 fc7a 	bl	8000c86 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8000392:	bf00      	nop
 8000394:	bd80      	pop	{r7, pc}
 8000396:	bf00      	nop
 8000398:	20001278 	.word	0x20001278

0800039c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800039c:	b480      	push	{r7}
 800039e:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 80003a0:	4b15      	ldr	r3, [pc, #84]	; (80003f8 <SystemInit+0x5c>)
 80003a2:	681b      	ldr	r3, [r3, #0]
 80003a4:	4a14      	ldr	r2, [pc, #80]	; (80003f8 <SystemInit+0x5c>)
 80003a6:	f043 0301 	orr.w	r3, r3, #1
 80003aa:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 80003ac:	4b12      	ldr	r3, [pc, #72]	; (80003f8 <SystemInit+0x5c>)
 80003ae:	685a      	ldr	r2, [r3, #4]
 80003b0:	4911      	ldr	r1, [pc, #68]	; (80003f8 <SystemInit+0x5c>)
 80003b2:	4b12      	ldr	r3, [pc, #72]	; (80003fc <SystemInit+0x60>)
 80003b4:	4013      	ands	r3, r2
 80003b6:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 80003b8:	4b0f      	ldr	r3, [pc, #60]	; (80003f8 <SystemInit+0x5c>)
 80003ba:	681b      	ldr	r3, [r3, #0]
 80003bc:	4a0e      	ldr	r2, [pc, #56]	; (80003f8 <SystemInit+0x5c>)
 80003be:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80003c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80003c6:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80003c8:	4b0b      	ldr	r3, [pc, #44]	; (80003f8 <SystemInit+0x5c>)
 80003ca:	681b      	ldr	r3, [r3, #0]
 80003cc:	4a0a      	ldr	r2, [pc, #40]	; (80003f8 <SystemInit+0x5c>)
 80003ce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80003d2:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 80003d4:	4b08      	ldr	r3, [pc, #32]	; (80003f8 <SystemInit+0x5c>)
 80003d6:	685b      	ldr	r3, [r3, #4]
 80003d8:	4a07      	ldr	r2, [pc, #28]	; (80003f8 <SystemInit+0x5c>)
 80003da:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 80003de:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 80003e0:	4b05      	ldr	r3, [pc, #20]	; (80003f8 <SystemInit+0x5c>)
 80003e2:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 80003e6:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80003e8:	4b05      	ldr	r3, [pc, #20]	; (8000400 <SystemInit+0x64>)
 80003ea:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80003ee:	609a      	str	r2, [r3, #8]
#endif 
}
 80003f0:	bf00      	nop
 80003f2:	46bd      	mov	sp, r7
 80003f4:	bc80      	pop	{r7}
 80003f6:	4770      	bx	lr
 80003f8:	40021000 	.word	0x40021000
 80003fc:	f8ff0000 	.word	0xf8ff0000
 8000400:	e000ed00 	.word	0xe000ed00

08000404 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000404:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000406:	e003      	b.n	8000410 <LoopCopyDataInit>

08000408 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000408:	4b0b      	ldr	r3, [pc, #44]	; (8000438 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800040a:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 800040c:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800040e:	3104      	adds	r1, #4

08000410 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000410:	480a      	ldr	r0, [pc, #40]	; (800043c <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8000412:	4b0b      	ldr	r3, [pc, #44]	; (8000440 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8000414:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000416:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000418:	d3f6      	bcc.n	8000408 <CopyDataInit>
  ldr r2, =_sbss
 800041a:	4a0a      	ldr	r2, [pc, #40]	; (8000444 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 800041c:	e002      	b.n	8000424 <LoopFillZerobss>

0800041e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800041e:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000420:	f842 3b04 	str.w	r3, [r2], #4

08000424 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8000424:	4b08      	ldr	r3, [pc, #32]	; (8000448 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8000426:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000428:	d3f9      	bcc.n	800041e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800042a:	f7ff ffb7 	bl	800039c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800042e:	f005 ff57 	bl	80062e0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000432:	f7ff fe8b 	bl	800014c <main>
  bx lr
 8000436:	4770      	bx	lr
  ldr r3, =_sidata
 8000438:	08006414 	.word	0x08006414
  ldr r0, =_sdata
 800043c:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000440:	20000b20 	.word	0x20000b20
  ldr r2, =_sbss
 8000444:	20000b20 	.word	0x20000b20
  ldr r3, = _ebss
 8000448:	200014e4 	.word	0x200014e4

0800044c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800044c:	e7fe      	b.n	800044c <ADC1_2_IRQHandler>
	...

08000450 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000450:	b580      	push	{r7, lr}
 8000452:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000454:	4b08      	ldr	r3, [pc, #32]	; (8000478 <HAL_Init+0x28>)
 8000456:	681b      	ldr	r3, [r3, #0]
 8000458:	4a07      	ldr	r2, [pc, #28]	; (8000478 <HAL_Init+0x28>)
 800045a:	f043 0310 	orr.w	r3, r3, #16
 800045e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000460:	2003      	movs	r0, #3
 8000462:	f000 f945 	bl	80006f0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000466:	2000      	movs	r0, #0
 8000468:	f000 f808 	bl	800047c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800046c:	f7ff ff30 	bl	80002d0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000470:	2300      	movs	r3, #0
}
 8000472:	4618      	mov	r0, r3
 8000474:	bd80      	pop	{r7, pc}
 8000476:	bf00      	nop
 8000478:	40022000 	.word	0x40022000

0800047c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800047c:	b580      	push	{r7, lr}
 800047e:	b082      	sub	sp, #8
 8000480:	af00      	add	r7, sp, #0
 8000482:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000484:	4b12      	ldr	r3, [pc, #72]	; (80004d0 <HAL_InitTick+0x54>)
 8000486:	681a      	ldr	r2, [r3, #0]
 8000488:	4b12      	ldr	r3, [pc, #72]	; (80004d4 <HAL_InitTick+0x58>)
 800048a:	781b      	ldrb	r3, [r3, #0]
 800048c:	4619      	mov	r1, r3
 800048e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000492:	fbb3 f3f1 	udiv	r3, r3, r1
 8000496:	fbb2 f3f3 	udiv	r3, r2, r3
 800049a:	4618      	mov	r0, r3
 800049c:	f000 f95d 	bl	800075a <HAL_SYSTICK_Config>
 80004a0:	4603      	mov	r3, r0
 80004a2:	2b00      	cmp	r3, #0
 80004a4:	d001      	beq.n	80004aa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80004a6:	2301      	movs	r3, #1
 80004a8:	e00e      	b.n	80004c8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80004aa:	687b      	ldr	r3, [r7, #4]
 80004ac:	2b0f      	cmp	r3, #15
 80004ae:	d80a      	bhi.n	80004c6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80004b0:	2200      	movs	r2, #0
 80004b2:	6879      	ldr	r1, [r7, #4]
 80004b4:	f04f 30ff 	mov.w	r0, #4294967295
 80004b8:	f000 f925 	bl	8000706 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80004bc:	4a06      	ldr	r2, [pc, #24]	; (80004d8 <HAL_InitTick+0x5c>)
 80004be:	687b      	ldr	r3, [r7, #4]
 80004c0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80004c2:	2300      	movs	r3, #0
 80004c4:	e000      	b.n	80004c8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80004c6:	2301      	movs	r3, #1
}
 80004c8:	4618      	mov	r0, r3
 80004ca:	3708      	adds	r7, #8
 80004cc:	46bd      	mov	sp, r7
 80004ce:	bd80      	pop	{r7, pc}
 80004d0:	20000000 	.word	0x20000000
 80004d4:	20000008 	.word	0x20000008
 80004d8:	20000004 	.word	0x20000004

080004dc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80004dc:	b480      	push	{r7}
 80004de:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80004e0:	4b05      	ldr	r3, [pc, #20]	; (80004f8 <HAL_IncTick+0x1c>)
 80004e2:	781b      	ldrb	r3, [r3, #0]
 80004e4:	461a      	mov	r2, r3
 80004e6:	4b05      	ldr	r3, [pc, #20]	; (80004fc <HAL_IncTick+0x20>)
 80004e8:	681b      	ldr	r3, [r3, #0]
 80004ea:	4413      	add	r3, r2
 80004ec:	4a03      	ldr	r2, [pc, #12]	; (80004fc <HAL_IncTick+0x20>)
 80004ee:	6013      	str	r3, [r2, #0]
}
 80004f0:	bf00      	nop
 80004f2:	46bd      	mov	sp, r7
 80004f4:	bc80      	pop	{r7}
 80004f6:	4770      	bx	lr
 80004f8:	20000008 	.word	0x20000008
 80004fc:	20000db0 	.word	0x20000db0

08000500 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000500:	b480      	push	{r7}
 8000502:	af00      	add	r7, sp, #0
  return uwTick;
 8000504:	4b02      	ldr	r3, [pc, #8]	; (8000510 <HAL_GetTick+0x10>)
 8000506:	681b      	ldr	r3, [r3, #0]
}
 8000508:	4618      	mov	r0, r3
 800050a:	46bd      	mov	sp, r7
 800050c:	bc80      	pop	{r7}
 800050e:	4770      	bx	lr
 8000510:	20000db0 	.word	0x20000db0

08000514 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	b084      	sub	sp, #16
 8000518:	af00      	add	r7, sp, #0
 800051a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800051c:	f7ff fff0 	bl	8000500 <HAL_GetTick>
 8000520:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000522:	687b      	ldr	r3, [r7, #4]
 8000524:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000526:	68fb      	ldr	r3, [r7, #12]
 8000528:	f1b3 3fff 	cmp.w	r3, #4294967295
 800052c:	d005      	beq.n	800053a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800052e:	4b09      	ldr	r3, [pc, #36]	; (8000554 <HAL_Delay+0x40>)
 8000530:	781b      	ldrb	r3, [r3, #0]
 8000532:	461a      	mov	r2, r3
 8000534:	68fb      	ldr	r3, [r7, #12]
 8000536:	4413      	add	r3, r2
 8000538:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800053a:	bf00      	nop
 800053c:	f7ff ffe0 	bl	8000500 <HAL_GetTick>
 8000540:	4602      	mov	r2, r0
 8000542:	68bb      	ldr	r3, [r7, #8]
 8000544:	1ad3      	subs	r3, r2, r3
 8000546:	68fa      	ldr	r2, [r7, #12]
 8000548:	429a      	cmp	r2, r3
 800054a:	d8f7      	bhi.n	800053c <HAL_Delay+0x28>
  {
  }
}
 800054c:	bf00      	nop
 800054e:	3710      	adds	r7, #16
 8000550:	46bd      	mov	sp, r7
 8000552:	bd80      	pop	{r7, pc}
 8000554:	20000008 	.word	0x20000008

08000558 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000558:	b480      	push	{r7}
 800055a:	b085      	sub	sp, #20
 800055c:	af00      	add	r7, sp, #0
 800055e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000560:	687b      	ldr	r3, [r7, #4]
 8000562:	f003 0307 	and.w	r3, r3, #7
 8000566:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000568:	4b0c      	ldr	r3, [pc, #48]	; (800059c <__NVIC_SetPriorityGrouping+0x44>)
 800056a:	68db      	ldr	r3, [r3, #12]
 800056c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800056e:	68ba      	ldr	r2, [r7, #8]
 8000570:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000574:	4013      	ands	r3, r2
 8000576:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000578:	68fb      	ldr	r3, [r7, #12]
 800057a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800057c:	68bb      	ldr	r3, [r7, #8]
 800057e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000580:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000584:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000588:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800058a:	4a04      	ldr	r2, [pc, #16]	; (800059c <__NVIC_SetPriorityGrouping+0x44>)
 800058c:	68bb      	ldr	r3, [r7, #8]
 800058e:	60d3      	str	r3, [r2, #12]
}
 8000590:	bf00      	nop
 8000592:	3714      	adds	r7, #20
 8000594:	46bd      	mov	sp, r7
 8000596:	bc80      	pop	{r7}
 8000598:	4770      	bx	lr
 800059a:	bf00      	nop
 800059c:	e000ed00 	.word	0xe000ed00

080005a0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80005a0:	b480      	push	{r7}
 80005a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80005a4:	4b04      	ldr	r3, [pc, #16]	; (80005b8 <__NVIC_GetPriorityGrouping+0x18>)
 80005a6:	68db      	ldr	r3, [r3, #12]
 80005a8:	0a1b      	lsrs	r3, r3, #8
 80005aa:	f003 0307 	and.w	r3, r3, #7
}
 80005ae:	4618      	mov	r0, r3
 80005b0:	46bd      	mov	sp, r7
 80005b2:	bc80      	pop	{r7}
 80005b4:	4770      	bx	lr
 80005b6:	bf00      	nop
 80005b8:	e000ed00 	.word	0xe000ed00

080005bc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80005bc:	b480      	push	{r7}
 80005be:	b083      	sub	sp, #12
 80005c0:	af00      	add	r7, sp, #0
 80005c2:	4603      	mov	r3, r0
 80005c4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80005c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005ca:	2b00      	cmp	r3, #0
 80005cc:	db0b      	blt.n	80005e6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80005ce:	79fb      	ldrb	r3, [r7, #7]
 80005d0:	f003 021f 	and.w	r2, r3, #31
 80005d4:	4906      	ldr	r1, [pc, #24]	; (80005f0 <__NVIC_EnableIRQ+0x34>)
 80005d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005da:	095b      	lsrs	r3, r3, #5
 80005dc:	2001      	movs	r0, #1
 80005de:	fa00 f202 	lsl.w	r2, r0, r2
 80005e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80005e6:	bf00      	nop
 80005e8:	370c      	adds	r7, #12
 80005ea:	46bd      	mov	sp, r7
 80005ec:	bc80      	pop	{r7}
 80005ee:	4770      	bx	lr
 80005f0:	e000e100 	.word	0xe000e100

080005f4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80005f4:	b480      	push	{r7}
 80005f6:	b083      	sub	sp, #12
 80005f8:	af00      	add	r7, sp, #0
 80005fa:	4603      	mov	r3, r0
 80005fc:	6039      	str	r1, [r7, #0]
 80005fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000600:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000604:	2b00      	cmp	r3, #0
 8000606:	db0a      	blt.n	800061e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000608:	683b      	ldr	r3, [r7, #0]
 800060a:	b2da      	uxtb	r2, r3
 800060c:	490c      	ldr	r1, [pc, #48]	; (8000640 <__NVIC_SetPriority+0x4c>)
 800060e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000612:	0112      	lsls	r2, r2, #4
 8000614:	b2d2      	uxtb	r2, r2
 8000616:	440b      	add	r3, r1
 8000618:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800061c:	e00a      	b.n	8000634 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800061e:	683b      	ldr	r3, [r7, #0]
 8000620:	b2da      	uxtb	r2, r3
 8000622:	4908      	ldr	r1, [pc, #32]	; (8000644 <__NVIC_SetPriority+0x50>)
 8000624:	79fb      	ldrb	r3, [r7, #7]
 8000626:	f003 030f 	and.w	r3, r3, #15
 800062a:	3b04      	subs	r3, #4
 800062c:	0112      	lsls	r2, r2, #4
 800062e:	b2d2      	uxtb	r2, r2
 8000630:	440b      	add	r3, r1
 8000632:	761a      	strb	r2, [r3, #24]
}
 8000634:	bf00      	nop
 8000636:	370c      	adds	r7, #12
 8000638:	46bd      	mov	sp, r7
 800063a:	bc80      	pop	{r7}
 800063c:	4770      	bx	lr
 800063e:	bf00      	nop
 8000640:	e000e100 	.word	0xe000e100
 8000644:	e000ed00 	.word	0xe000ed00

08000648 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000648:	b480      	push	{r7}
 800064a:	b089      	sub	sp, #36	; 0x24
 800064c:	af00      	add	r7, sp, #0
 800064e:	60f8      	str	r0, [r7, #12]
 8000650:	60b9      	str	r1, [r7, #8]
 8000652:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000654:	68fb      	ldr	r3, [r7, #12]
 8000656:	f003 0307 	and.w	r3, r3, #7
 800065a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800065c:	69fb      	ldr	r3, [r7, #28]
 800065e:	f1c3 0307 	rsb	r3, r3, #7
 8000662:	2b04      	cmp	r3, #4
 8000664:	bf28      	it	cs
 8000666:	2304      	movcs	r3, #4
 8000668:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800066a:	69fb      	ldr	r3, [r7, #28]
 800066c:	3304      	adds	r3, #4
 800066e:	2b06      	cmp	r3, #6
 8000670:	d902      	bls.n	8000678 <NVIC_EncodePriority+0x30>
 8000672:	69fb      	ldr	r3, [r7, #28]
 8000674:	3b03      	subs	r3, #3
 8000676:	e000      	b.n	800067a <NVIC_EncodePriority+0x32>
 8000678:	2300      	movs	r3, #0
 800067a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800067c:	f04f 32ff 	mov.w	r2, #4294967295
 8000680:	69bb      	ldr	r3, [r7, #24]
 8000682:	fa02 f303 	lsl.w	r3, r2, r3
 8000686:	43da      	mvns	r2, r3
 8000688:	68bb      	ldr	r3, [r7, #8]
 800068a:	401a      	ands	r2, r3
 800068c:	697b      	ldr	r3, [r7, #20]
 800068e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000690:	f04f 31ff 	mov.w	r1, #4294967295
 8000694:	697b      	ldr	r3, [r7, #20]
 8000696:	fa01 f303 	lsl.w	r3, r1, r3
 800069a:	43d9      	mvns	r1, r3
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006a0:	4313      	orrs	r3, r2
         );
}
 80006a2:	4618      	mov	r0, r3
 80006a4:	3724      	adds	r7, #36	; 0x24
 80006a6:	46bd      	mov	sp, r7
 80006a8:	bc80      	pop	{r7}
 80006aa:	4770      	bx	lr

080006ac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b082      	sub	sp, #8
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	3b01      	subs	r3, #1
 80006b8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80006bc:	d301      	bcc.n	80006c2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80006be:	2301      	movs	r3, #1
 80006c0:	e00f      	b.n	80006e2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80006c2:	4a0a      	ldr	r2, [pc, #40]	; (80006ec <SysTick_Config+0x40>)
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	3b01      	subs	r3, #1
 80006c8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80006ca:	210f      	movs	r1, #15
 80006cc:	f04f 30ff 	mov.w	r0, #4294967295
 80006d0:	f7ff ff90 	bl	80005f4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80006d4:	4b05      	ldr	r3, [pc, #20]	; (80006ec <SysTick_Config+0x40>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80006da:	4b04      	ldr	r3, [pc, #16]	; (80006ec <SysTick_Config+0x40>)
 80006dc:	2207      	movs	r2, #7
 80006de:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80006e0:	2300      	movs	r3, #0
}
 80006e2:	4618      	mov	r0, r3
 80006e4:	3708      	adds	r7, #8
 80006e6:	46bd      	mov	sp, r7
 80006e8:	bd80      	pop	{r7, pc}
 80006ea:	bf00      	nop
 80006ec:	e000e010 	.word	0xe000e010

080006f0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b082      	sub	sp, #8
 80006f4:	af00      	add	r7, sp, #0
 80006f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80006f8:	6878      	ldr	r0, [r7, #4]
 80006fa:	f7ff ff2d 	bl	8000558 <__NVIC_SetPriorityGrouping>
}
 80006fe:	bf00      	nop
 8000700:	3708      	adds	r7, #8
 8000702:	46bd      	mov	sp, r7
 8000704:	bd80      	pop	{r7, pc}

08000706 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000706:	b580      	push	{r7, lr}
 8000708:	b086      	sub	sp, #24
 800070a:	af00      	add	r7, sp, #0
 800070c:	4603      	mov	r3, r0
 800070e:	60b9      	str	r1, [r7, #8]
 8000710:	607a      	str	r2, [r7, #4]
 8000712:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000714:	2300      	movs	r3, #0
 8000716:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000718:	f7ff ff42 	bl	80005a0 <__NVIC_GetPriorityGrouping>
 800071c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800071e:	687a      	ldr	r2, [r7, #4]
 8000720:	68b9      	ldr	r1, [r7, #8]
 8000722:	6978      	ldr	r0, [r7, #20]
 8000724:	f7ff ff90 	bl	8000648 <NVIC_EncodePriority>
 8000728:	4602      	mov	r2, r0
 800072a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800072e:	4611      	mov	r1, r2
 8000730:	4618      	mov	r0, r3
 8000732:	f7ff ff5f 	bl	80005f4 <__NVIC_SetPriority>
}
 8000736:	bf00      	nop
 8000738:	3718      	adds	r7, #24
 800073a:	46bd      	mov	sp, r7
 800073c:	bd80      	pop	{r7, pc}

0800073e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800073e:	b580      	push	{r7, lr}
 8000740:	b082      	sub	sp, #8
 8000742:	af00      	add	r7, sp, #0
 8000744:	4603      	mov	r3, r0
 8000746:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000748:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800074c:	4618      	mov	r0, r3
 800074e:	f7ff ff35 	bl	80005bc <__NVIC_EnableIRQ>
}
 8000752:	bf00      	nop
 8000754:	3708      	adds	r7, #8
 8000756:	46bd      	mov	sp, r7
 8000758:	bd80      	pop	{r7, pc}

0800075a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800075a:	b580      	push	{r7, lr}
 800075c:	b082      	sub	sp, #8
 800075e:	af00      	add	r7, sp, #0
 8000760:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000762:	6878      	ldr	r0, [r7, #4]
 8000764:	f7ff ffa2 	bl	80006ac <SysTick_Config>
 8000768:	4603      	mov	r3, r0
}
 800076a:	4618      	mov	r0, r3
 800076c:	3708      	adds	r7, #8
 800076e:	46bd      	mov	sp, r7
 8000770:	bd80      	pop	{r7, pc}
	...

08000774 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000774:	b480      	push	{r7}
 8000776:	b08b      	sub	sp, #44	; 0x2c
 8000778:	af00      	add	r7, sp, #0
 800077a:	6078      	str	r0, [r7, #4]
 800077c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800077e:	2300      	movs	r3, #0
 8000780:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000782:	2300      	movs	r3, #0
 8000784:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000786:	e121      	b.n	80009cc <HAL_GPIO_Init+0x258>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000788:	2201      	movs	r2, #1
 800078a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800078c:	fa02 f303 	lsl.w	r3, r2, r3
 8000790:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000792:	683b      	ldr	r3, [r7, #0]
 8000794:	681b      	ldr	r3, [r3, #0]
 8000796:	69fa      	ldr	r2, [r7, #28]
 8000798:	4013      	ands	r3, r2
 800079a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800079c:	69ba      	ldr	r2, [r7, #24]
 800079e:	69fb      	ldr	r3, [r7, #28]
 80007a0:	429a      	cmp	r2, r3
 80007a2:	f040 8110 	bne.w	80009c6 <HAL_GPIO_Init+0x252>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80007a6:	683b      	ldr	r3, [r7, #0]
 80007a8:	685b      	ldr	r3, [r3, #4]
 80007aa:	2b12      	cmp	r3, #18
 80007ac:	d034      	beq.n	8000818 <HAL_GPIO_Init+0xa4>
 80007ae:	2b12      	cmp	r3, #18
 80007b0:	d80d      	bhi.n	80007ce <HAL_GPIO_Init+0x5a>
 80007b2:	2b02      	cmp	r3, #2
 80007b4:	d02b      	beq.n	800080e <HAL_GPIO_Init+0x9a>
 80007b6:	2b02      	cmp	r3, #2
 80007b8:	d804      	bhi.n	80007c4 <HAL_GPIO_Init+0x50>
 80007ba:	2b00      	cmp	r3, #0
 80007bc:	d031      	beq.n	8000822 <HAL_GPIO_Init+0xae>
 80007be:	2b01      	cmp	r3, #1
 80007c0:	d01c      	beq.n	80007fc <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80007c2:	e048      	b.n	8000856 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80007c4:	2b03      	cmp	r3, #3
 80007c6:	d043      	beq.n	8000850 <HAL_GPIO_Init+0xdc>
 80007c8:	2b11      	cmp	r3, #17
 80007ca:	d01b      	beq.n	8000804 <HAL_GPIO_Init+0x90>
          break;
 80007cc:	e043      	b.n	8000856 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80007ce:	4a86      	ldr	r2, [pc, #536]	; (80009e8 <HAL_GPIO_Init+0x274>)
 80007d0:	4293      	cmp	r3, r2
 80007d2:	d026      	beq.n	8000822 <HAL_GPIO_Init+0xae>
 80007d4:	4a84      	ldr	r2, [pc, #528]	; (80009e8 <HAL_GPIO_Init+0x274>)
 80007d6:	4293      	cmp	r3, r2
 80007d8:	d806      	bhi.n	80007e8 <HAL_GPIO_Init+0x74>
 80007da:	4a84      	ldr	r2, [pc, #528]	; (80009ec <HAL_GPIO_Init+0x278>)
 80007dc:	4293      	cmp	r3, r2
 80007de:	d020      	beq.n	8000822 <HAL_GPIO_Init+0xae>
 80007e0:	4a83      	ldr	r2, [pc, #524]	; (80009f0 <HAL_GPIO_Init+0x27c>)
 80007e2:	4293      	cmp	r3, r2
 80007e4:	d01d      	beq.n	8000822 <HAL_GPIO_Init+0xae>
          break;
 80007e6:	e036      	b.n	8000856 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80007e8:	4a82      	ldr	r2, [pc, #520]	; (80009f4 <HAL_GPIO_Init+0x280>)
 80007ea:	4293      	cmp	r3, r2
 80007ec:	d019      	beq.n	8000822 <HAL_GPIO_Init+0xae>
 80007ee:	4a82      	ldr	r2, [pc, #520]	; (80009f8 <HAL_GPIO_Init+0x284>)
 80007f0:	4293      	cmp	r3, r2
 80007f2:	d016      	beq.n	8000822 <HAL_GPIO_Init+0xae>
 80007f4:	4a81      	ldr	r2, [pc, #516]	; (80009fc <HAL_GPIO_Init+0x288>)
 80007f6:	4293      	cmp	r3, r2
 80007f8:	d013      	beq.n	8000822 <HAL_GPIO_Init+0xae>
          break;
 80007fa:	e02c      	b.n	8000856 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80007fc:	683b      	ldr	r3, [r7, #0]
 80007fe:	68db      	ldr	r3, [r3, #12]
 8000800:	623b      	str	r3, [r7, #32]
          break;
 8000802:	e028      	b.n	8000856 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000804:	683b      	ldr	r3, [r7, #0]
 8000806:	68db      	ldr	r3, [r3, #12]
 8000808:	3304      	adds	r3, #4
 800080a:	623b      	str	r3, [r7, #32]
          break;
 800080c:	e023      	b.n	8000856 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800080e:	683b      	ldr	r3, [r7, #0]
 8000810:	68db      	ldr	r3, [r3, #12]
 8000812:	3308      	adds	r3, #8
 8000814:	623b      	str	r3, [r7, #32]
          break;
 8000816:	e01e      	b.n	8000856 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000818:	683b      	ldr	r3, [r7, #0]
 800081a:	68db      	ldr	r3, [r3, #12]
 800081c:	330c      	adds	r3, #12
 800081e:	623b      	str	r3, [r7, #32]
          break;
 8000820:	e019      	b.n	8000856 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000822:	683b      	ldr	r3, [r7, #0]
 8000824:	689b      	ldr	r3, [r3, #8]
 8000826:	2b00      	cmp	r3, #0
 8000828:	d102      	bne.n	8000830 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800082a:	2304      	movs	r3, #4
 800082c:	623b      	str	r3, [r7, #32]
          break;
 800082e:	e012      	b.n	8000856 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000830:	683b      	ldr	r3, [r7, #0]
 8000832:	689b      	ldr	r3, [r3, #8]
 8000834:	2b01      	cmp	r3, #1
 8000836:	d105      	bne.n	8000844 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000838:	2308      	movs	r3, #8
 800083a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	69fa      	ldr	r2, [r7, #28]
 8000840:	611a      	str	r2, [r3, #16]
          break;
 8000842:	e008      	b.n	8000856 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000844:	2308      	movs	r3, #8
 8000846:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	69fa      	ldr	r2, [r7, #28]
 800084c:	615a      	str	r2, [r3, #20]
          break;
 800084e:	e002      	b.n	8000856 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000850:	2300      	movs	r3, #0
 8000852:	623b      	str	r3, [r7, #32]
          break;
 8000854:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000856:	69bb      	ldr	r3, [r7, #24]
 8000858:	2bff      	cmp	r3, #255	; 0xff
 800085a:	d801      	bhi.n	8000860 <HAL_GPIO_Init+0xec>
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	e001      	b.n	8000864 <HAL_GPIO_Init+0xf0>
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	3304      	adds	r3, #4
 8000864:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000866:	69bb      	ldr	r3, [r7, #24]
 8000868:	2bff      	cmp	r3, #255	; 0xff
 800086a:	d802      	bhi.n	8000872 <HAL_GPIO_Init+0xfe>
 800086c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800086e:	009b      	lsls	r3, r3, #2
 8000870:	e002      	b.n	8000878 <HAL_GPIO_Init+0x104>
 8000872:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000874:	3b08      	subs	r3, #8
 8000876:	009b      	lsls	r3, r3, #2
 8000878:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800087a:	697b      	ldr	r3, [r7, #20]
 800087c:	681a      	ldr	r2, [r3, #0]
 800087e:	210f      	movs	r1, #15
 8000880:	693b      	ldr	r3, [r7, #16]
 8000882:	fa01 f303 	lsl.w	r3, r1, r3
 8000886:	43db      	mvns	r3, r3
 8000888:	401a      	ands	r2, r3
 800088a:	6a39      	ldr	r1, [r7, #32]
 800088c:	693b      	ldr	r3, [r7, #16]
 800088e:	fa01 f303 	lsl.w	r3, r1, r3
 8000892:	431a      	orrs	r2, r3
 8000894:	697b      	ldr	r3, [r7, #20]
 8000896:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000898:	683b      	ldr	r3, [r7, #0]
 800089a:	685b      	ldr	r3, [r3, #4]
 800089c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	f000 8090 	beq.w	80009c6 <HAL_GPIO_Init+0x252>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80008a6:	4b56      	ldr	r3, [pc, #344]	; (8000a00 <HAL_GPIO_Init+0x28c>)
 80008a8:	699b      	ldr	r3, [r3, #24]
 80008aa:	4a55      	ldr	r2, [pc, #340]	; (8000a00 <HAL_GPIO_Init+0x28c>)
 80008ac:	f043 0301 	orr.w	r3, r3, #1
 80008b0:	6193      	str	r3, [r2, #24]
 80008b2:	4b53      	ldr	r3, [pc, #332]	; (8000a00 <HAL_GPIO_Init+0x28c>)
 80008b4:	699b      	ldr	r3, [r3, #24]
 80008b6:	f003 0301 	and.w	r3, r3, #1
 80008ba:	60bb      	str	r3, [r7, #8]
 80008bc:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80008be:	4a51      	ldr	r2, [pc, #324]	; (8000a04 <HAL_GPIO_Init+0x290>)
 80008c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008c2:	089b      	lsrs	r3, r3, #2
 80008c4:	3302      	adds	r3, #2
 80008c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80008ca:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80008cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008ce:	f003 0303 	and.w	r3, r3, #3
 80008d2:	009b      	lsls	r3, r3, #2
 80008d4:	220f      	movs	r2, #15
 80008d6:	fa02 f303 	lsl.w	r3, r2, r3
 80008da:	43db      	mvns	r3, r3
 80008dc:	68fa      	ldr	r2, [r7, #12]
 80008de:	4013      	ands	r3, r2
 80008e0:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	4a48      	ldr	r2, [pc, #288]	; (8000a08 <HAL_GPIO_Init+0x294>)
 80008e6:	4293      	cmp	r3, r2
 80008e8:	d00d      	beq.n	8000906 <HAL_GPIO_Init+0x192>
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	4a47      	ldr	r2, [pc, #284]	; (8000a0c <HAL_GPIO_Init+0x298>)
 80008ee:	4293      	cmp	r3, r2
 80008f0:	d007      	beq.n	8000902 <HAL_GPIO_Init+0x18e>
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	4a46      	ldr	r2, [pc, #280]	; (8000a10 <HAL_GPIO_Init+0x29c>)
 80008f6:	4293      	cmp	r3, r2
 80008f8:	d101      	bne.n	80008fe <HAL_GPIO_Init+0x18a>
 80008fa:	2302      	movs	r3, #2
 80008fc:	e004      	b.n	8000908 <HAL_GPIO_Init+0x194>
 80008fe:	2303      	movs	r3, #3
 8000900:	e002      	b.n	8000908 <HAL_GPIO_Init+0x194>
 8000902:	2301      	movs	r3, #1
 8000904:	e000      	b.n	8000908 <HAL_GPIO_Init+0x194>
 8000906:	2300      	movs	r3, #0
 8000908:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800090a:	f002 0203 	and.w	r2, r2, #3
 800090e:	0092      	lsls	r2, r2, #2
 8000910:	4093      	lsls	r3, r2
 8000912:	68fa      	ldr	r2, [r7, #12]
 8000914:	4313      	orrs	r3, r2
 8000916:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000918:	493a      	ldr	r1, [pc, #232]	; (8000a04 <HAL_GPIO_Init+0x290>)
 800091a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800091c:	089b      	lsrs	r3, r3, #2
 800091e:	3302      	adds	r3, #2
 8000920:	68fa      	ldr	r2, [r7, #12]
 8000922:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000926:	683b      	ldr	r3, [r7, #0]
 8000928:	685b      	ldr	r3, [r3, #4]
 800092a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800092e:	2b00      	cmp	r3, #0
 8000930:	d006      	beq.n	8000940 <HAL_GPIO_Init+0x1cc>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000932:	4b38      	ldr	r3, [pc, #224]	; (8000a14 <HAL_GPIO_Init+0x2a0>)
 8000934:	681a      	ldr	r2, [r3, #0]
 8000936:	4937      	ldr	r1, [pc, #220]	; (8000a14 <HAL_GPIO_Init+0x2a0>)
 8000938:	69bb      	ldr	r3, [r7, #24]
 800093a:	4313      	orrs	r3, r2
 800093c:	600b      	str	r3, [r1, #0]
 800093e:	e006      	b.n	800094e <HAL_GPIO_Init+0x1da>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000940:	4b34      	ldr	r3, [pc, #208]	; (8000a14 <HAL_GPIO_Init+0x2a0>)
 8000942:	681a      	ldr	r2, [r3, #0]
 8000944:	69bb      	ldr	r3, [r7, #24]
 8000946:	43db      	mvns	r3, r3
 8000948:	4932      	ldr	r1, [pc, #200]	; (8000a14 <HAL_GPIO_Init+0x2a0>)
 800094a:	4013      	ands	r3, r2
 800094c:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800094e:	683b      	ldr	r3, [r7, #0]
 8000950:	685b      	ldr	r3, [r3, #4]
 8000952:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000956:	2b00      	cmp	r3, #0
 8000958:	d006      	beq.n	8000968 <HAL_GPIO_Init+0x1f4>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800095a:	4b2e      	ldr	r3, [pc, #184]	; (8000a14 <HAL_GPIO_Init+0x2a0>)
 800095c:	685a      	ldr	r2, [r3, #4]
 800095e:	492d      	ldr	r1, [pc, #180]	; (8000a14 <HAL_GPIO_Init+0x2a0>)
 8000960:	69bb      	ldr	r3, [r7, #24]
 8000962:	4313      	orrs	r3, r2
 8000964:	604b      	str	r3, [r1, #4]
 8000966:	e006      	b.n	8000976 <HAL_GPIO_Init+0x202>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000968:	4b2a      	ldr	r3, [pc, #168]	; (8000a14 <HAL_GPIO_Init+0x2a0>)
 800096a:	685a      	ldr	r2, [r3, #4]
 800096c:	69bb      	ldr	r3, [r7, #24]
 800096e:	43db      	mvns	r3, r3
 8000970:	4928      	ldr	r1, [pc, #160]	; (8000a14 <HAL_GPIO_Init+0x2a0>)
 8000972:	4013      	ands	r3, r2
 8000974:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000976:	683b      	ldr	r3, [r7, #0]
 8000978:	685b      	ldr	r3, [r3, #4]
 800097a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800097e:	2b00      	cmp	r3, #0
 8000980:	d006      	beq.n	8000990 <HAL_GPIO_Init+0x21c>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000982:	4b24      	ldr	r3, [pc, #144]	; (8000a14 <HAL_GPIO_Init+0x2a0>)
 8000984:	689a      	ldr	r2, [r3, #8]
 8000986:	4923      	ldr	r1, [pc, #140]	; (8000a14 <HAL_GPIO_Init+0x2a0>)
 8000988:	69bb      	ldr	r3, [r7, #24]
 800098a:	4313      	orrs	r3, r2
 800098c:	608b      	str	r3, [r1, #8]
 800098e:	e006      	b.n	800099e <HAL_GPIO_Init+0x22a>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000990:	4b20      	ldr	r3, [pc, #128]	; (8000a14 <HAL_GPIO_Init+0x2a0>)
 8000992:	689a      	ldr	r2, [r3, #8]
 8000994:	69bb      	ldr	r3, [r7, #24]
 8000996:	43db      	mvns	r3, r3
 8000998:	491e      	ldr	r1, [pc, #120]	; (8000a14 <HAL_GPIO_Init+0x2a0>)
 800099a:	4013      	ands	r3, r2
 800099c:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800099e:	683b      	ldr	r3, [r7, #0]
 80009a0:	685b      	ldr	r3, [r3, #4]
 80009a2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	d006      	beq.n	80009b8 <HAL_GPIO_Init+0x244>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80009aa:	4b1a      	ldr	r3, [pc, #104]	; (8000a14 <HAL_GPIO_Init+0x2a0>)
 80009ac:	68da      	ldr	r2, [r3, #12]
 80009ae:	4919      	ldr	r1, [pc, #100]	; (8000a14 <HAL_GPIO_Init+0x2a0>)
 80009b0:	69bb      	ldr	r3, [r7, #24]
 80009b2:	4313      	orrs	r3, r2
 80009b4:	60cb      	str	r3, [r1, #12]
 80009b6:	e006      	b.n	80009c6 <HAL_GPIO_Init+0x252>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80009b8:	4b16      	ldr	r3, [pc, #88]	; (8000a14 <HAL_GPIO_Init+0x2a0>)
 80009ba:	68da      	ldr	r2, [r3, #12]
 80009bc:	69bb      	ldr	r3, [r7, #24]
 80009be:	43db      	mvns	r3, r3
 80009c0:	4914      	ldr	r1, [pc, #80]	; (8000a14 <HAL_GPIO_Init+0x2a0>)
 80009c2:	4013      	ands	r3, r2
 80009c4:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80009c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009c8:	3301      	adds	r3, #1
 80009ca:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80009cc:	683b      	ldr	r3, [r7, #0]
 80009ce:	681a      	ldr	r2, [r3, #0]
 80009d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009d2:	fa22 f303 	lsr.w	r3, r2, r3
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	f47f aed6 	bne.w	8000788 <HAL_GPIO_Init+0x14>
  }
}
 80009dc:	bf00      	nop
 80009de:	372c      	adds	r7, #44	; 0x2c
 80009e0:	46bd      	mov	sp, r7
 80009e2:	bc80      	pop	{r7}
 80009e4:	4770      	bx	lr
 80009e6:	bf00      	nop
 80009e8:	10210000 	.word	0x10210000
 80009ec:	10110000 	.word	0x10110000
 80009f0:	10120000 	.word	0x10120000
 80009f4:	10310000 	.word	0x10310000
 80009f8:	10320000 	.word	0x10320000
 80009fc:	10220000 	.word	0x10220000
 8000a00:	40021000 	.word	0x40021000
 8000a04:	40010000 	.word	0x40010000
 8000a08:	40010800 	.word	0x40010800
 8000a0c:	40010c00 	.word	0x40010c00
 8000a10:	40011000 	.word	0x40011000
 8000a14:	40010400 	.word	0x40010400

08000a18 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000a18:	b480      	push	{r7}
 8000a1a:	b083      	sub	sp, #12
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	6078      	str	r0, [r7, #4]
 8000a20:	460b      	mov	r3, r1
 8000a22:	807b      	strh	r3, [r7, #2]
 8000a24:	4613      	mov	r3, r2
 8000a26:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000a28:	787b      	ldrb	r3, [r7, #1]
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	d003      	beq.n	8000a36 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000a2e:	887a      	ldrh	r2, [r7, #2]
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000a34:	e003      	b.n	8000a3e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000a36:	887b      	ldrh	r3, [r7, #2]
 8000a38:	041a      	lsls	r2, r3, #16
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	611a      	str	r2, [r3, #16]
}
 8000a3e:	bf00      	nop
 8000a40:	370c      	adds	r7, #12
 8000a42:	46bd      	mov	sp, r7
 8000a44:	bc80      	pop	{r7}
 8000a46:	4770      	bx	lr

08000a48 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000a48:	b480      	push	{r7}
 8000a4a:	b083      	sub	sp, #12
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	6078      	str	r0, [r7, #4]
 8000a50:	460b      	mov	r3, r1
 8000a52:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	68da      	ldr	r2, [r3, #12]
 8000a58:	887b      	ldrh	r3, [r7, #2]
 8000a5a:	4013      	ands	r3, r2
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d003      	beq.n	8000a68 <HAL_GPIO_TogglePin+0x20>
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000a60:	887a      	ldrh	r2, [r7, #2]
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	615a      	str	r2, [r3, #20]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 8000a66:	e002      	b.n	8000a6e <HAL_GPIO_TogglePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000a68:	887a      	ldrh	r2, [r7, #2]
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	611a      	str	r2, [r3, #16]
}
 8000a6e:	bf00      	nop
 8000a70:	370c      	adds	r7, #12
 8000a72:	46bd      	mov	sp, r7
 8000a74:	bc80      	pop	{r7}
 8000a76:	4770      	bx	lr

08000a78 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000a78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000a7a:	b08b      	sub	sp, #44	; 0x2c
 8000a7c:	af06      	add	r7, sp, #24
 8000a7e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	d101      	bne.n	8000a8a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8000a86:	2301      	movs	r3, #1
 8000a88:	e0d3      	b.n	8000c32 <HAL_PCD_Init+0x1ba>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	f893 3229 	ldrb.w	r3, [r3, #553]	; 0x229
 8000a90:	b2db      	uxtb	r3, r3
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	d106      	bne.n	8000aa4 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	2200      	movs	r2, #0
 8000a9a:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8000a9e:	6878      	ldr	r0, [r7, #4]
 8000aa0:	f005 f96c 	bl	8005d7c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	2203      	movs	r2, #3
 8000aa8:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	681b      	ldr	r3, [r3, #0]
 8000ab0:	4618      	mov	r0, r3
 8000ab2:	f001 fbb6 	bl	8002222 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	681b      	ldr	r3, [r3, #0]
 8000aba:	603b      	str	r3, [r7, #0]
 8000abc:	687e      	ldr	r6, [r7, #4]
 8000abe:	466d      	mov	r5, sp
 8000ac0:	f106 0410 	add.w	r4, r6, #16
 8000ac4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000ac6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000ac8:	6823      	ldr	r3, [r4, #0]
 8000aca:	602b      	str	r3, [r5, #0]
 8000acc:	1d33      	adds	r3, r6, #4
 8000ace:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000ad0:	6838      	ldr	r0, [r7, #0]
 8000ad2:	f001 fb7f 	bl	80021d4 <USB_CoreInit>
 8000ad6:	4603      	mov	r3, r0
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d005      	beq.n	8000ae8 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	2202      	movs	r2, #2
 8000ae0:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
    return HAL_ERROR;
 8000ae4:	2301      	movs	r3, #1
 8000ae6:	e0a4      	b.n	8000c32 <HAL_PCD_Init+0x1ba>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	2100      	movs	r1, #0
 8000aee:	4618      	mov	r0, r3
 8000af0:	f001 fbb3 	bl	800225a <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000af4:	2300      	movs	r3, #0
 8000af6:	73fb      	strb	r3, [r7, #15]
 8000af8:	e035      	b.n	8000b66 <HAL_PCD_Init+0xee>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8000afa:	7bfb      	ldrb	r3, [r7, #15]
 8000afc:	687a      	ldr	r2, [r7, #4]
 8000afe:	015b      	lsls	r3, r3, #5
 8000b00:	4413      	add	r3, r2
 8000b02:	3329      	adds	r3, #41	; 0x29
 8000b04:	2201      	movs	r2, #1
 8000b06:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8000b08:	7bfb      	ldrb	r3, [r7, #15]
 8000b0a:	687a      	ldr	r2, [r7, #4]
 8000b0c:	015b      	lsls	r3, r3, #5
 8000b0e:	4413      	add	r3, r2
 8000b10:	3328      	adds	r3, #40	; 0x28
 8000b12:	7bfa      	ldrb	r2, [r7, #15]
 8000b14:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8000b16:	7bfb      	ldrb	r3, [r7, #15]
 8000b18:	7bfa      	ldrb	r2, [r7, #15]
 8000b1a:	b291      	uxth	r1, r2
 8000b1c:	687a      	ldr	r2, [r7, #4]
 8000b1e:	015b      	lsls	r3, r3, #5
 8000b20:	4413      	add	r3, r2
 8000b22:	3336      	adds	r3, #54	; 0x36
 8000b24:	460a      	mov	r2, r1
 8000b26:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000b28:	7bfb      	ldrb	r3, [r7, #15]
 8000b2a:	687a      	ldr	r2, [r7, #4]
 8000b2c:	015b      	lsls	r3, r3, #5
 8000b2e:	4413      	add	r3, r2
 8000b30:	332b      	adds	r3, #43	; 0x2b
 8000b32:	2200      	movs	r2, #0
 8000b34:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8000b36:	7bfb      	ldrb	r3, [r7, #15]
 8000b38:	687a      	ldr	r2, [r7, #4]
 8000b3a:	015b      	lsls	r3, r3, #5
 8000b3c:	4413      	add	r3, r2
 8000b3e:	3338      	adds	r3, #56	; 0x38
 8000b40:	2200      	movs	r2, #0
 8000b42:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8000b44:	7bfb      	ldrb	r3, [r7, #15]
 8000b46:	687a      	ldr	r2, [r7, #4]
 8000b48:	015b      	lsls	r3, r3, #5
 8000b4a:	4413      	add	r3, r2
 8000b4c:	333c      	adds	r3, #60	; 0x3c
 8000b4e:	2200      	movs	r2, #0
 8000b50:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8000b52:	7bfb      	ldrb	r3, [r7, #15]
 8000b54:	687a      	ldr	r2, [r7, #4]
 8000b56:	3302      	adds	r3, #2
 8000b58:	015b      	lsls	r3, r3, #5
 8000b5a:	4413      	add	r3, r2
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000b60:	7bfb      	ldrb	r3, [r7, #15]
 8000b62:	3301      	adds	r3, #1
 8000b64:	73fb      	strb	r3, [r7, #15]
 8000b66:	7bfa      	ldrb	r2, [r7, #15]
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	685b      	ldr	r3, [r3, #4]
 8000b6c:	429a      	cmp	r2, r3
 8000b6e:	d3c4      	bcc.n	8000afa <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000b70:	2300      	movs	r3, #0
 8000b72:	73fb      	strb	r3, [r7, #15]
 8000b74:	e031      	b.n	8000bda <HAL_PCD_Init+0x162>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8000b76:	7bfb      	ldrb	r3, [r7, #15]
 8000b78:	687a      	ldr	r2, [r7, #4]
 8000b7a:	015b      	lsls	r3, r3, #5
 8000b7c:	4413      	add	r3, r2
 8000b7e:	f203 1329 	addw	r3, r3, #297	; 0x129
 8000b82:	2200      	movs	r2, #0
 8000b84:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8000b86:	7bfb      	ldrb	r3, [r7, #15]
 8000b88:	687a      	ldr	r2, [r7, #4]
 8000b8a:	015b      	lsls	r3, r3, #5
 8000b8c:	4413      	add	r3, r2
 8000b8e:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8000b92:	7bfa      	ldrb	r2, [r7, #15]
 8000b94:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8000b96:	7bfb      	ldrb	r3, [r7, #15]
 8000b98:	687a      	ldr	r2, [r7, #4]
 8000b9a:	015b      	lsls	r3, r3, #5
 8000b9c:	4413      	add	r3, r2
 8000b9e:	f203 132b 	addw	r3, r3, #299	; 0x12b
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8000ba6:	7bfb      	ldrb	r3, [r7, #15]
 8000ba8:	687a      	ldr	r2, [r7, #4]
 8000baa:	015b      	lsls	r3, r3, #5
 8000bac:	4413      	add	r3, r2
 8000bae:	f503 739c 	add.w	r3, r3, #312	; 0x138
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8000bb6:	7bfb      	ldrb	r3, [r7, #15]
 8000bb8:	687a      	ldr	r2, [r7, #4]
 8000bba:	015b      	lsls	r3, r3, #5
 8000bbc:	4413      	add	r3, r2
 8000bbe:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8000bc6:	7bfb      	ldrb	r3, [r7, #15]
 8000bc8:	687a      	ldr	r2, [r7, #4]
 8000bca:	330a      	adds	r3, #10
 8000bcc:	015b      	lsls	r3, r3, #5
 8000bce:	4413      	add	r3, r2
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000bd4:	7bfb      	ldrb	r3, [r7, #15]
 8000bd6:	3301      	adds	r3, #1
 8000bd8:	73fb      	strb	r3, [r7, #15]
 8000bda:	7bfa      	ldrb	r2, [r7, #15]
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	685b      	ldr	r3, [r3, #4]
 8000be0:	429a      	cmp	r2, r3
 8000be2:	d3c8      	bcc.n	8000b76 <HAL_PCD_Init+0xfe>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	603b      	str	r3, [r7, #0]
 8000bea:	687e      	ldr	r6, [r7, #4]
 8000bec:	466d      	mov	r5, sp
 8000bee:	f106 0410 	add.w	r4, r6, #16
 8000bf2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000bf4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000bf6:	6823      	ldr	r3, [r4, #0]
 8000bf8:	602b      	str	r3, [r5, #0]
 8000bfa:	1d33      	adds	r3, r6, #4
 8000bfc:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000bfe:	6838      	ldr	r0, [r7, #0]
 8000c00:	f001 fb37 	bl	8002272 <USB_DevInit>
 8000c04:	4603      	mov	r3, r0
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d005      	beq.n	8000c16 <HAL_PCD_Init+0x19e>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	2202      	movs	r2, #2
 8000c0e:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
    return HAL_ERROR;
 8000c12:	2301      	movs	r3, #1
 8000c14:	e00d      	b.n	8000c32 <HAL_PCD_Init+0x1ba>
  }

  hpcd->USB_Address = 0U;
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	2200      	movs	r2, #0
 8000c1a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	2201      	movs	r2, #1
 8000c22:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
  (void)USB_DevDisconnect(hpcd->Instance);
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	4618      	mov	r0, r3
 8000c2c:	f002 fb89 	bl	8003342 <USB_DevDisconnect>

  return HAL_OK;
 8000c30:	2300      	movs	r3, #0
}
 8000c32:	4618      	mov	r0, r3
 8000c34:	3714      	adds	r7, #20
 8000c36:	46bd      	mov	sp, r7
 8000c38:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000c3a <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8000c3a:	b580      	push	{r7, lr}
 8000c3c:	b082      	sub	sp, #8
 8000c3e:	af00      	add	r7, sp, #0
 8000c40:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8000c48:	2b01      	cmp	r3, #1
 8000c4a:	d101      	bne.n	8000c50 <HAL_PCD_Start+0x16>
 8000c4c:	2302      	movs	r3, #2
 8000c4e:	e016      	b.n	8000c7e <HAL_PCD_Start+0x44>
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	2201      	movs	r2, #1
 8000c54:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8000c58:	2101      	movs	r1, #1
 8000c5a:	6878      	ldr	r0, [r7, #4]
 8000c5c:	f005 fb09 	bl	8006272 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */
  (void)USB_DevConnect(hpcd->Instance);
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	4618      	mov	r0, r3
 8000c66:	f002 fb62 	bl	800332e <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	4618      	mov	r0, r3
 8000c70:	f001 fac0 	bl	80021f4 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	2200      	movs	r2, #0
 8000c78:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 8000c7c:	2300      	movs	r3, #0
}
 8000c7e:	4618      	mov	r0, r3
 8000c80:	3708      	adds	r7, #8
 8000c82:	46bd      	mov	sp, r7
 8000c84:	bd80      	pop	{r7, pc}

08000c86 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8000c86:	b580      	push	{r7, lr}
 8000c88:	b082      	sub	sp, #8
 8000c8a:	af00      	add	r7, sp, #0
 8000c8c:	6078      	str	r0, [r7, #4]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	4618      	mov	r0, r3
 8000c94:	f002 fb5f 	bl	8003356 <USB_ReadInterrupts>
 8000c98:	4603      	mov	r3, r0
 8000c9a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000c9e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000ca2:	d102      	bne.n	8000caa <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8000ca4:	6878      	ldr	r0, [r7, #4]
 8000ca6:	f000 fb1f 	bl	80012e8 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	4618      	mov	r0, r3
 8000cb0:	f002 fb51 	bl	8003356 <USB_ReadInterrupts>
 8000cb4:	4603      	mov	r3, r0
 8000cb6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000cba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000cbe:	d112      	bne.n	8000ce6 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000cc8:	b29a      	uxth	r2, r3
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000cd2:	b292      	uxth	r2, r2
 8000cd4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8000cd8:	6878      	ldr	r0, [r7, #4]
 8000cda:	f005 f8c4 	bl	8005e66 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8000cde:	2100      	movs	r1, #0
 8000ce0:	6878      	ldr	r0, [r7, #4]
 8000ce2:	f000 f8de 	bl	8000ea2 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	4618      	mov	r0, r3
 8000cec:	f002 fb33 	bl	8003356 <USB_ReadInterrupts>
 8000cf0:	4603      	mov	r3, r0
 8000cf2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000cf6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000cfa:	d10b      	bne.n	8000d14 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000d04:	b29a      	uxth	r2, r3
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8000d0e:	b292      	uxth	r2, r2
 8000d10:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	4618      	mov	r0, r3
 8000d1a:	f002 fb1c 	bl	8003356 <USB_ReadInterrupts>
 8000d1e:	4603      	mov	r3, r0
 8000d20:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000d24:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000d28:	d10b      	bne.n	8000d42 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000d32:	b29a      	uxth	r2, r3
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8000d3c:	b292      	uxth	r2, r2
 8000d3e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	4618      	mov	r0, r3
 8000d48:	f002 fb05 	bl	8003356 <USB_ReadInterrupts>
 8000d4c:	4603      	mov	r3, r0
 8000d4e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000d52:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000d56:	d126      	bne.n	8000da6 <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8000d60:	b29a      	uxth	r2, r3
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	f022 0204 	bic.w	r2, r2, #4
 8000d6a:	b292      	uxth	r2, r2
 8000d6c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8000d78:	b29a      	uxth	r2, r3
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	f022 0208 	bic.w	r2, r2, #8
 8000d82:	b292      	uxth	r2, r2
 8000d84:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8000d88:	6878      	ldr	r0, [r7, #4]
 8000d8a:	f005 f8a5 	bl	8005ed8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000d96:	b29a      	uxth	r2, r3
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8000da0:	b292      	uxth	r2, r2
 8000da2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	4618      	mov	r0, r3
 8000dac:	f002 fad3 	bl	8003356 <USB_ReadInterrupts>
 8000db0:	4603      	mov	r3, r0
 8000db2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000db6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000dba:	d13d      	bne.n	8000e38 <HAL_PCD_IRQHandler+0x1b2>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= USB_CNTR_FSUSP;
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8000dc4:	b29a      	uxth	r2, r3
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	f042 0208 	orr.w	r2, r2, #8
 8000dce:	b292      	uxth	r2, r2
 8000dd0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000ddc:	b29a      	uxth	r2, r3
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000de6:	b292      	uxth	r2, r2
 8000de8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= USB_CNTR_LP_MODE;
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8000df4:	b29a      	uxth	r2, r3
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	f042 0204 	orr.w	r2, r2, #4
 8000dfe:	b292      	uxth	r2, r2
 8000e00:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* WA: Clear Wakeup flag if raised with suspend signal */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	4618      	mov	r0, r3
 8000e0a:	f002 faa4 	bl	8003356 <USB_ReadInterrupts>
 8000e0e:	4603      	mov	r3, r0
 8000e10:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000e14:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000e18:	d10b      	bne.n	8000e32 <HAL_PCD_IRQHandler+0x1ac>
    {
       __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000e22:	b29a      	uxth	r2, r3
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8000e2c:	b292      	uxth	r2, r2
 8000e2e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8000e32:	6878      	ldr	r0, [r7, #4]
 8000e34:	f005 f836 	bl	8005ea4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	f002 fa8a 	bl	8003356 <USB_ReadInterrupts>
 8000e42:	4603      	mov	r3, r0
 8000e44:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000e48:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000e4c:	d10e      	bne.n	8000e6c <HAL_PCD_IRQHandler+0x1e6>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000e56:	b29a      	uxth	r2, r3
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8000e60:	b292      	uxth	r2, r2
 8000e62:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8000e66:	6878      	ldr	r0, [r7, #4]
 8000e68:	f004 ffef 	bl	8005e4a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	4618      	mov	r0, r3
 8000e72:	f002 fa70 	bl	8003356 <USB_ReadInterrupts>
 8000e76:	4603      	mov	r3, r0
 8000e78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e7c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000e80:	d10b      	bne.n	8000e9a <HAL_PCD_IRQHandler+0x214>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000e8a:	b29a      	uxth	r2, r3
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000e94:	b292      	uxth	r2, r2
 8000e96:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8000e9a:	bf00      	nop
 8000e9c:	3708      	adds	r7, #8
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	bd80      	pop	{r7, pc}

08000ea2 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8000ea2:	b580      	push	{r7, lr}
 8000ea4:	b082      	sub	sp, #8
 8000ea6:	af00      	add	r7, sp, #0
 8000ea8:	6078      	str	r0, [r7, #4]
 8000eaa:	460b      	mov	r3, r1
 8000eac:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8000eb4:	2b01      	cmp	r3, #1
 8000eb6:	d101      	bne.n	8000ebc <HAL_PCD_SetAddress+0x1a>
 8000eb8:	2302      	movs	r3, #2
 8000eba:	e013      	b.n	8000ee4 <HAL_PCD_SetAddress+0x42>
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	2201      	movs	r2, #1
 8000ec0:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  hpcd->USB_Address = address;
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	78fa      	ldrb	r2, [r7, #3]
 8000ec8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	78fa      	ldrb	r2, [r7, #3]
 8000ed2:	4611      	mov	r1, r2
 8000ed4:	4618      	mov	r0, r3
 8000ed6:	f002 fa17 	bl	8003308 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	2200      	movs	r2, #0
 8000ede:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 8000ee2:	2300      	movs	r3, #0
}
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	3708      	adds	r7, #8
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	bd80      	pop	{r7, pc}

08000eec <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b084      	sub	sp, #16
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]
 8000ef4:	4608      	mov	r0, r1
 8000ef6:	4611      	mov	r1, r2
 8000ef8:	461a      	mov	r2, r3
 8000efa:	4603      	mov	r3, r0
 8000efc:	70fb      	strb	r3, [r7, #3]
 8000efe:	460b      	mov	r3, r1
 8000f00:	803b      	strh	r3, [r7, #0]
 8000f02:	4613      	mov	r3, r2
 8000f04:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8000f06:	2300      	movs	r3, #0
 8000f08:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8000f0a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	da0b      	bge.n	8000f2a <HAL_PCD_EP_Open+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8000f12:	78fb      	ldrb	r3, [r7, #3]
 8000f14:	f003 0307 	and.w	r3, r3, #7
 8000f18:	015b      	lsls	r3, r3, #5
 8000f1a:	3328      	adds	r3, #40	; 0x28
 8000f1c:	687a      	ldr	r2, [r7, #4]
 8000f1e:	4413      	add	r3, r2
 8000f20:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8000f22:	68fb      	ldr	r3, [r7, #12]
 8000f24:	2201      	movs	r2, #1
 8000f26:	705a      	strb	r2, [r3, #1]
 8000f28:	e00b      	b.n	8000f42 <HAL_PCD_EP_Open+0x56>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8000f2a:	78fb      	ldrb	r3, [r7, #3]
 8000f2c:	f003 0307 	and.w	r3, r3, #7
 8000f30:	015b      	lsls	r3, r3, #5
 8000f32:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8000f36:	687a      	ldr	r2, [r7, #4]
 8000f38:	4413      	add	r3, r2
 8000f3a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8000f3c:	68fb      	ldr	r3, [r7, #12]
 8000f3e:	2200      	movs	r2, #0
 8000f40:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8000f42:	78fb      	ldrb	r3, [r7, #3]
 8000f44:	f003 0307 	and.w	r3, r3, #7
 8000f48:	b2da      	uxtb	r2, r3
 8000f4a:	68fb      	ldr	r3, [r7, #12]
 8000f4c:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8000f4e:	883a      	ldrh	r2, [r7, #0]
 8000f50:	68fb      	ldr	r3, [r7, #12]
 8000f52:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8000f54:	68fb      	ldr	r3, [r7, #12]
 8000f56:	78ba      	ldrb	r2, [r7, #2]
 8000f58:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8000f5a:	68fb      	ldr	r3, [r7, #12]
 8000f5c:	785b      	ldrb	r3, [r3, #1]
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d004      	beq.n	8000f6c <HAL_PCD_EP_Open+0x80>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8000f62:	68fb      	ldr	r3, [r7, #12]
 8000f64:	781b      	ldrb	r3, [r3, #0]
 8000f66:	b29a      	uxth	r2, r3
 8000f68:	68fb      	ldr	r3, [r7, #12]
 8000f6a:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8000f6c:	78bb      	ldrb	r3, [r7, #2]
 8000f6e:	2b02      	cmp	r3, #2
 8000f70:	d102      	bne.n	8000f78 <HAL_PCD_EP_Open+0x8c>
  {
    ep->data_pid_start = 0U;
 8000f72:	68fb      	ldr	r3, [r7, #12]
 8000f74:	2200      	movs	r2, #0
 8000f76:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8000f7e:	2b01      	cmp	r3, #1
 8000f80:	d101      	bne.n	8000f86 <HAL_PCD_EP_Open+0x9a>
 8000f82:	2302      	movs	r3, #2
 8000f84:	e00e      	b.n	8000fa4 <HAL_PCD_EP_Open+0xb8>
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	2201      	movs	r2, #1
 8000f8a:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	68f9      	ldr	r1, [r7, #12]
 8000f94:	4618      	mov	r0, r3
 8000f96:	f001 f9a5 	bl	80022e4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return ret;
 8000fa2:	7afb      	ldrb	r3, [r7, #11]
}
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	3710      	adds	r7, #16
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	bd80      	pop	{r7, pc}

08000fac <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b084      	sub	sp, #16
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]
 8000fb4:	460b      	mov	r3, r1
 8000fb6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8000fb8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	da0b      	bge.n	8000fd8 <HAL_PCD_EP_Close+0x2c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8000fc0:	78fb      	ldrb	r3, [r7, #3]
 8000fc2:	f003 0307 	and.w	r3, r3, #7
 8000fc6:	015b      	lsls	r3, r3, #5
 8000fc8:	3328      	adds	r3, #40	; 0x28
 8000fca:	687a      	ldr	r2, [r7, #4]
 8000fcc:	4413      	add	r3, r2
 8000fce:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8000fd0:	68fb      	ldr	r3, [r7, #12]
 8000fd2:	2201      	movs	r2, #1
 8000fd4:	705a      	strb	r2, [r3, #1]
 8000fd6:	e00b      	b.n	8000ff0 <HAL_PCD_EP_Close+0x44>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8000fd8:	78fb      	ldrb	r3, [r7, #3]
 8000fda:	f003 0307 	and.w	r3, r3, #7
 8000fde:	015b      	lsls	r3, r3, #5
 8000fe0:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8000fe4:	687a      	ldr	r2, [r7, #4]
 8000fe6:	4413      	add	r3, r2
 8000fe8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8000fea:	68fb      	ldr	r3, [r7, #12]
 8000fec:	2200      	movs	r2, #0
 8000fee:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8000ff0:	78fb      	ldrb	r3, [r7, #3]
 8000ff2:	f003 0307 	and.w	r3, r3, #7
 8000ff6:	b2da      	uxtb	r2, r3
 8000ff8:	68fb      	ldr	r3, [r7, #12]
 8000ffa:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8001002:	2b01      	cmp	r3, #1
 8001004:	d101      	bne.n	800100a <HAL_PCD_EP_Close+0x5e>
 8001006:	2302      	movs	r3, #2
 8001008:	e00e      	b.n	8001028 <HAL_PCD_EP_Close+0x7c>
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	2201      	movs	r2, #1
 800100e:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	68f9      	ldr	r1, [r7, #12]
 8001018:	4618      	mov	r0, r3
 800101a:	f001 fc51 	bl	80028c0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	2200      	movs	r2, #0
 8001022:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 8001026:	2300      	movs	r3, #0
}
 8001028:	4618      	mov	r0, r3
 800102a:	3710      	adds	r7, #16
 800102c:	46bd      	mov	sp, r7
 800102e:	bd80      	pop	{r7, pc}

08001030 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b086      	sub	sp, #24
 8001034:	af00      	add	r7, sp, #0
 8001036:	60f8      	str	r0, [r7, #12]
 8001038:	607a      	str	r2, [r7, #4]
 800103a:	603b      	str	r3, [r7, #0]
 800103c:	460b      	mov	r3, r1
 800103e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001040:	7afb      	ldrb	r3, [r7, #11]
 8001042:	f003 0307 	and.w	r3, r3, #7
 8001046:	015b      	lsls	r3, r3, #5
 8001048:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800104c:	68fa      	ldr	r2, [r7, #12]
 800104e:	4413      	add	r3, r2
 8001050:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001052:	697b      	ldr	r3, [r7, #20]
 8001054:	687a      	ldr	r2, [r7, #4]
 8001056:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001058:	697b      	ldr	r3, [r7, #20]
 800105a:	683a      	ldr	r2, [r7, #0]
 800105c:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800105e:	697b      	ldr	r3, [r7, #20]
 8001060:	2200      	movs	r2, #0
 8001062:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8001064:	697b      	ldr	r3, [r7, #20]
 8001066:	2200      	movs	r2, #0
 8001068:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800106a:	7afb      	ldrb	r3, [r7, #11]
 800106c:	f003 0307 	and.w	r3, r3, #7
 8001070:	b2da      	uxtb	r2, r3
 8001072:	697b      	ldr	r3, [r7, #20]
 8001074:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001076:	7afb      	ldrb	r3, [r7, #11]
 8001078:	f003 0307 	and.w	r3, r3, #7
 800107c:	2b00      	cmp	r3, #0
 800107e:	d106      	bne.n	800108e <HAL_PCD_EP_Receive+0x5e>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8001080:	68fb      	ldr	r3, [r7, #12]
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	6979      	ldr	r1, [r7, #20]
 8001086:	4618      	mov	r0, r3
 8001088:	f001 fdb0 	bl	8002bec <USB_EPStartXfer>
 800108c:	e005      	b.n	800109a <HAL_PCD_EP_Receive+0x6a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800108e:	68fb      	ldr	r3, [r7, #12]
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	6979      	ldr	r1, [r7, #20]
 8001094:	4618      	mov	r0, r3
 8001096:	f001 fda9 	bl	8002bec <USB_EPStartXfer>
  }

  return HAL_OK;
 800109a:	2300      	movs	r3, #0
}
 800109c:	4618      	mov	r0, r3
 800109e:	3718      	adds	r7, #24
 80010a0:	46bd      	mov	sp, r7
 80010a2:	bd80      	pop	{r7, pc}

080010a4 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80010a4:	b480      	push	{r7}
 80010a6:	b083      	sub	sp, #12
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]
 80010ac:	460b      	mov	r3, r1
 80010ae:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80010b0:	78fb      	ldrb	r3, [r7, #3]
 80010b2:	f003 0307 	and.w	r3, r3, #7
 80010b6:	687a      	ldr	r2, [r7, #4]
 80010b8:	330a      	adds	r3, #10
 80010ba:	015b      	lsls	r3, r3, #5
 80010bc:	4413      	add	r3, r2
 80010be:	3304      	adds	r3, #4
 80010c0:	681b      	ldr	r3, [r3, #0]
}
 80010c2:	4618      	mov	r0, r3
 80010c4:	370c      	adds	r7, #12
 80010c6:	46bd      	mov	sp, r7
 80010c8:	bc80      	pop	{r7}
 80010ca:	4770      	bx	lr

080010cc <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b086      	sub	sp, #24
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	60f8      	str	r0, [r7, #12]
 80010d4:	607a      	str	r2, [r7, #4]
 80010d6:	603b      	str	r3, [r7, #0]
 80010d8:	460b      	mov	r3, r1
 80010da:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80010dc:	7afb      	ldrb	r3, [r7, #11]
 80010de:	f003 0307 	and.w	r3, r3, #7
 80010e2:	015b      	lsls	r3, r3, #5
 80010e4:	3328      	adds	r3, #40	; 0x28
 80010e6:	68fa      	ldr	r2, [r7, #12]
 80010e8:	4413      	add	r3, r2
 80010ea:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80010ec:	697b      	ldr	r3, [r7, #20]
 80010ee:	687a      	ldr	r2, [r7, #4]
 80010f0:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80010f2:	697b      	ldr	r3, [r7, #20]
 80010f4:	683a      	ldr	r2, [r7, #0]
 80010f6:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80010f8:	697b      	ldr	r3, [r7, #20]
 80010fa:	2200      	movs	r2, #0
 80010fc:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 80010fe:	697b      	ldr	r3, [r7, #20]
 8001100:	2201      	movs	r2, #1
 8001102:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001104:	7afb      	ldrb	r3, [r7, #11]
 8001106:	f003 0307 	and.w	r3, r3, #7
 800110a:	b2da      	uxtb	r2, r3
 800110c:	697b      	ldr	r3, [r7, #20]
 800110e:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001110:	7afb      	ldrb	r3, [r7, #11]
 8001112:	f003 0307 	and.w	r3, r3, #7
 8001116:	2b00      	cmp	r3, #0
 8001118:	d106      	bne.n	8001128 <HAL_PCD_EP_Transmit+0x5c>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 800111a:	68fb      	ldr	r3, [r7, #12]
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	6979      	ldr	r1, [r7, #20]
 8001120:	4618      	mov	r0, r3
 8001122:	f001 fd63 	bl	8002bec <USB_EPStartXfer>
 8001126:	e005      	b.n	8001134 <HAL_PCD_EP_Transmit+0x68>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001128:	68fb      	ldr	r3, [r7, #12]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	6979      	ldr	r1, [r7, #20]
 800112e:	4618      	mov	r0, r3
 8001130:	f001 fd5c 	bl	8002bec <USB_EPStartXfer>
  }

  return HAL_OK;
 8001134:	2300      	movs	r3, #0
}
 8001136:	4618      	mov	r0, r3
 8001138:	3718      	adds	r7, #24
 800113a:	46bd      	mov	sp, r7
 800113c:	bd80      	pop	{r7, pc}

0800113e <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800113e:	b580      	push	{r7, lr}
 8001140:	b084      	sub	sp, #16
 8001142:	af00      	add	r7, sp, #0
 8001144:	6078      	str	r0, [r7, #4]
 8001146:	460b      	mov	r3, r1
 8001148:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800114a:	78fb      	ldrb	r3, [r7, #3]
 800114c:	f003 0207 	and.w	r2, r3, #7
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	685b      	ldr	r3, [r3, #4]
 8001154:	429a      	cmp	r2, r3
 8001156:	d901      	bls.n	800115c <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001158:	2301      	movs	r3, #1
 800115a:	e046      	b.n	80011ea <HAL_PCD_EP_SetStall+0xac>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800115c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001160:	2b00      	cmp	r3, #0
 8001162:	da0b      	bge.n	800117c <HAL_PCD_EP_SetStall+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001164:	78fb      	ldrb	r3, [r7, #3]
 8001166:	f003 0307 	and.w	r3, r3, #7
 800116a:	015b      	lsls	r3, r3, #5
 800116c:	3328      	adds	r3, #40	; 0x28
 800116e:	687a      	ldr	r2, [r7, #4]
 8001170:	4413      	add	r3, r2
 8001172:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001174:	68fb      	ldr	r3, [r7, #12]
 8001176:	2201      	movs	r2, #1
 8001178:	705a      	strb	r2, [r3, #1]
 800117a:	e009      	b.n	8001190 <HAL_PCD_EP_SetStall+0x52>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800117c:	78fb      	ldrb	r3, [r7, #3]
 800117e:	015b      	lsls	r3, r3, #5
 8001180:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001184:	687a      	ldr	r2, [r7, #4]
 8001186:	4413      	add	r3, r2
 8001188:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800118a:	68fb      	ldr	r3, [r7, #12]
 800118c:	2200      	movs	r2, #0
 800118e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001190:	68fb      	ldr	r3, [r7, #12]
 8001192:	2201      	movs	r2, #1
 8001194:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001196:	78fb      	ldrb	r3, [r7, #3]
 8001198:	f003 0307 	and.w	r3, r3, #7
 800119c:	b2da      	uxtb	r2, r3
 800119e:	68fb      	ldr	r3, [r7, #12]
 80011a0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 80011a8:	2b01      	cmp	r3, #1
 80011aa:	d101      	bne.n	80011b0 <HAL_PCD_EP_SetStall+0x72>
 80011ac:	2302      	movs	r3, #2
 80011ae:	e01c      	b.n	80011ea <HAL_PCD_EP_SetStall+0xac>
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	2201      	movs	r2, #1
 80011b4:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	68f9      	ldr	r1, [r7, #12]
 80011be:	4618      	mov	r0, r3
 80011c0:	f001 ffcc 	bl	800315c <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80011c4:	78fb      	ldrb	r3, [r7, #3]
 80011c6:	f003 0307 	and.w	r3, r3, #7
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d108      	bne.n	80011e0 <HAL_PCD_EP_SetStall+0xa2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	681a      	ldr	r2, [r3, #0]
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	f503 730c 	add.w	r3, r3, #560	; 0x230
 80011d8:	4619      	mov	r1, r3
 80011da:	4610      	mov	r0, r2
 80011dc:	f002 f8ca 	bl	8003374 <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	2200      	movs	r2, #0
 80011e4:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return HAL_OK;
 80011e8:	2300      	movs	r3, #0
}
 80011ea:	4618      	mov	r0, r3
 80011ec:	3710      	adds	r7, #16
 80011ee:	46bd      	mov	sp, r7
 80011f0:	bd80      	pop	{r7, pc}

080011f2 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80011f2:	b580      	push	{r7, lr}
 80011f4:	b084      	sub	sp, #16
 80011f6:	af00      	add	r7, sp, #0
 80011f8:	6078      	str	r0, [r7, #4]
 80011fa:	460b      	mov	r3, r1
 80011fc:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80011fe:	78fb      	ldrb	r3, [r7, #3]
 8001200:	f003 020f 	and.w	r2, r3, #15
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	685b      	ldr	r3, [r3, #4]
 8001208:	429a      	cmp	r2, r3
 800120a:	d901      	bls.n	8001210 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800120c:	2301      	movs	r3, #1
 800120e:	e03a      	b.n	8001286 <HAL_PCD_EP_ClrStall+0x94>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001210:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001214:	2b00      	cmp	r3, #0
 8001216:	da0b      	bge.n	8001230 <HAL_PCD_EP_ClrStall+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001218:	78fb      	ldrb	r3, [r7, #3]
 800121a:	f003 0307 	and.w	r3, r3, #7
 800121e:	015b      	lsls	r3, r3, #5
 8001220:	3328      	adds	r3, #40	; 0x28
 8001222:	687a      	ldr	r2, [r7, #4]
 8001224:	4413      	add	r3, r2
 8001226:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001228:	68fb      	ldr	r3, [r7, #12]
 800122a:	2201      	movs	r2, #1
 800122c:	705a      	strb	r2, [r3, #1]
 800122e:	e00b      	b.n	8001248 <HAL_PCD_EP_ClrStall+0x56>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001230:	78fb      	ldrb	r3, [r7, #3]
 8001232:	f003 0307 	and.w	r3, r3, #7
 8001236:	015b      	lsls	r3, r3, #5
 8001238:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800123c:	687a      	ldr	r2, [r7, #4]
 800123e:	4413      	add	r3, r2
 8001240:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001242:	68fb      	ldr	r3, [r7, #12]
 8001244:	2200      	movs	r2, #0
 8001246:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001248:	68fb      	ldr	r3, [r7, #12]
 800124a:	2200      	movs	r2, #0
 800124c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800124e:	78fb      	ldrb	r3, [r7, #3]
 8001250:	f003 0307 	and.w	r3, r3, #7
 8001254:	b2da      	uxtb	r2, r3
 8001256:	68fb      	ldr	r3, [r7, #12]
 8001258:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8001260:	2b01      	cmp	r3, #1
 8001262:	d101      	bne.n	8001268 <HAL_PCD_EP_ClrStall+0x76>
 8001264:	2302      	movs	r3, #2
 8001266:	e00e      	b.n	8001286 <HAL_PCD_EP_ClrStall+0x94>
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	2201      	movs	r2, #1
 800126c:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	68f9      	ldr	r1, [r7, #12]
 8001276:	4618      	mov	r0, r3
 8001278:	f001 ffb2 	bl	80031e0 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	2200      	movs	r2, #0
 8001280:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return HAL_OK;
 8001284:	2300      	movs	r3, #0
}
 8001286:	4618      	mov	r0, r3
 8001288:	3710      	adds	r7, #16
 800128a:	46bd      	mov	sp, r7
 800128c:	bd80      	pop	{r7, pc}

0800128e <HAL_PCD_EP_Flush>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Flush(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800128e:	b580      	push	{r7, lr}
 8001290:	b082      	sub	sp, #8
 8001292:	af00      	add	r7, sp, #0
 8001294:	6078      	str	r0, [r7, #4]
 8001296:	460b      	mov	r3, r1
 8001298:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 80012a0:	2b01      	cmp	r3, #1
 80012a2:	d101      	bne.n	80012a8 <HAL_PCD_EP_Flush+0x1a>
 80012a4:	2302      	movs	r3, #2
 80012a6:	e01b      	b.n	80012e0 <HAL_PCD_EP_Flush+0x52>
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	2201      	movs	r2, #1
 80012ac:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  if ((ep_addr & 0x80U) == 0x80U)
 80012b0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	da09      	bge.n	80012cc <HAL_PCD_EP_Flush+0x3e>
  {
    (void)USB_FlushTxFifo(hpcd->Instance, (uint32_t)ep_addr & EP_ADDR_MSK);
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	681a      	ldr	r2, [r3, #0]
 80012bc:	78fb      	ldrb	r3, [r7, #3]
 80012be:	f003 0307 	and.w	r3, r3, #7
 80012c2:	4619      	mov	r1, r3
 80012c4:	4610      	mov	r0, r2
 80012c6:	f000 fff8 	bl	80022ba <USB_FlushTxFifo>
 80012ca:	e004      	b.n	80012d6 <HAL_PCD_EP_Flush+0x48>
  }
  else
  {
    (void)USB_FlushRxFifo(hpcd->Instance);
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	4618      	mov	r0, r3
 80012d2:	f000 fffd 	bl	80022d0 <USB_FlushRxFifo>
  }

  __HAL_UNLOCK(hpcd);
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	2200      	movs	r2, #0
 80012da:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return HAL_OK;
 80012de:	2300      	movs	r3, #0
}
 80012e0:	4618      	mov	r0, r3
 80012e2:	3708      	adds	r7, #8
 80012e4:	46bd      	mov	sp, r7
 80012e6:	bd80      	pop	{r7, pc}

080012e8 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 80012e8:	b590      	push	{r4, r7, lr}
 80012ea:	b089      	sub	sp, #36	; 0x24
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
  uint16_t wIstr;
  uint16_t wEPVal;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80012f0:	e282      	b.n	80017f8 <PCD_EP_ISR_Handler+0x510>
  {
    wIstr = hpcd->Instance->ISTR;
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80012fa:	82fb      	strh	r3, [r7, #22]
    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 80012fc:	8afb      	ldrh	r3, [r7, #22]
 80012fe:	b2db      	uxtb	r3, r3
 8001300:	f003 030f 	and.w	r3, r3, #15
 8001304:	757b      	strb	r3, [r7, #21]

    if (epindex == 0U)
 8001306:	7d7b      	ldrb	r3, [r7, #21]
 8001308:	2b00      	cmp	r3, #0
 800130a:	f040 8142 	bne.w	8001592 <PCD_EP_ISR_Handler+0x2aa>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 800130e:	8afb      	ldrh	r3, [r7, #22]
 8001310:	f003 0310 	and.w	r3, r3, #16
 8001314:	2b00      	cmp	r3, #0
 8001316:	d151      	bne.n	80013bc <PCD_EP_ISR_Handler+0xd4>
      {
        /* DIR = 0 */

        /* DIR = 0      => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always  */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	881b      	ldrh	r3, [r3, #0]
 800131e:	b29b      	uxth	r3, r3
 8001320:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8001324:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001328:	b29c      	uxth	r4, r3
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	681a      	ldr	r2, [r3, #0]
 800132e:	ea6f 4344 	mvn.w	r3, r4, lsl #17
 8001332:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001336:	b29b      	uxth	r3, r3
 8001338:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	3328      	adds	r3, #40	; 0x28
 800133e:	60fb      	str	r3, [r7, #12]

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001348:	b29b      	uxth	r3, r3
 800134a:	461a      	mov	r2, r3
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	781b      	ldrb	r3, [r3, #0]
 8001350:	00db      	lsls	r3, r3, #3
 8001352:	4413      	add	r3, r2
 8001354:	3302      	adds	r3, #2
 8001356:	005b      	lsls	r3, r3, #1
 8001358:	687a      	ldr	r2, [r7, #4]
 800135a:	6812      	ldr	r2, [r2, #0]
 800135c:	4413      	add	r3, r2
 800135e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001362:	881b      	ldrh	r3, [r3, #0]
 8001364:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	695a      	ldr	r2, [r3, #20]
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	69db      	ldr	r3, [r3, #28]
 8001374:	441a      	add	r2, r3
 8001376:	68fb      	ldr	r3, [r7, #12]
 8001378:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 800137a:	2100      	movs	r1, #0
 800137c:	6878      	ldr	r0, [r7, #4]
 800137e:	f004 fd4d 	bl	8005e1c <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001388:	b2db      	uxtb	r3, r3
 800138a:	2b00      	cmp	r3, #0
 800138c:	f000 8234 	beq.w	80017f8 <PCD_EP_ISR_Handler+0x510>
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	699b      	ldr	r3, [r3, #24]
 8001394:	2b00      	cmp	r3, #0
 8001396:	f040 822f 	bne.w	80017f8 <PCD_EP_ISR_Handler+0x510>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80013a0:	b2db      	uxtb	r3, r3
 80013a2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80013a6:	b2da      	uxtb	r2, r3
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	b292      	uxth	r2, r2
 80013ae:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	2200      	movs	r2, #0
 80013b6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80013ba:	e21d      	b.n	80017f8 <PCD_EP_ISR_Handler+0x510>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX       => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80013c2:	60fb      	str	r3, [r7, #12]
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	881b      	ldrh	r3, [r3, #0]
 80013ca:	827b      	strh	r3, [r7, #18]

        if ((wEPVal & USB_EP_SETUP) != 0U)
 80013cc:	8a7b      	ldrh	r3, [r7, #18]
 80013ce:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d033      	beq.n	800143e <PCD_EP_ISR_Handler+0x156>
        {
          /* Get SETUP Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80013de:	b29b      	uxth	r3, r3
 80013e0:	461a      	mov	r2, r3
 80013e2:	68fb      	ldr	r3, [r7, #12]
 80013e4:	781b      	ldrb	r3, [r3, #0]
 80013e6:	00db      	lsls	r3, r3, #3
 80013e8:	4413      	add	r3, r2
 80013ea:	3306      	adds	r3, #6
 80013ec:	005b      	lsls	r3, r3, #1
 80013ee:	687a      	ldr	r2, [r7, #4]
 80013f0:	6812      	ldr	r2, [r2, #0]
 80013f2:	4413      	add	r3, r2
 80013f4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80013f8:	881b      	ldrh	r3, [r3, #0]
 80013fa:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80013fe:	68fb      	ldr	r3, [r7, #12]
 8001400:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	6818      	ldr	r0, [r3, #0]
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	f503 710c 	add.w	r1, r3, #560	; 0x230
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001414:	b29b      	uxth	r3, r3
 8001416:	f001 fffc 	bl	8003412 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1*/
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	881b      	ldrh	r3, [r3, #0]
 8001420:	b29a      	uxth	r2, r3
 8001422:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001426:	4013      	ands	r3, r2
 8001428:	b29c      	uxth	r4, r3
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 8001432:	b292      	uxth	r2, r2
 8001434:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8001436:	6878      	ldr	r0, [r7, #4]
 8001438:	f004 fcc6 	bl	8005dc8 <HAL_PCD_SetupStageCallback>
 800143c:	e1dc      	b.n	80017f8 <PCD_EP_ISR_Handler+0x510>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }

        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800143e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001442:	2b00      	cmp	r3, #0
 8001444:	f280 81d8 	bge.w	80017f8 <PCD_EP_ISR_Handler+0x510>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	881b      	ldrh	r3, [r3, #0]
 800144e:	b29a      	uxth	r2, r3
 8001450:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001454:	4013      	ands	r3, r2
 8001456:	b29c      	uxth	r4, r3
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 8001460:	b292      	uxth	r2, r2
 8001462:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800146c:	b29b      	uxth	r3, r3
 800146e:	461a      	mov	r2, r3
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	781b      	ldrb	r3, [r3, #0]
 8001474:	00db      	lsls	r3, r3, #3
 8001476:	4413      	add	r3, r2
 8001478:	3306      	adds	r3, #6
 800147a:	005b      	lsls	r3, r3, #1
 800147c:	687a      	ldr	r2, [r7, #4]
 800147e:	6812      	ldr	r2, [r2, #0]
 8001480:	4413      	add	r3, r2
 8001482:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001486:	881b      	ldrh	r3, [r3, #0]
 8001488:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	69db      	ldr	r3, [r3, #28]
 8001494:	2b00      	cmp	r3, #0
 8001496:	d019      	beq.n	80014cc <PCD_EP_ISR_Handler+0x1e4>
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	695b      	ldr	r3, [r3, #20]
 800149c:	2b00      	cmp	r3, #0
 800149e:	d015      	beq.n	80014cc <PCD_EP_ISR_Handler+0x1e4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	6818      	ldr	r0, [r3, #0]
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	6959      	ldr	r1, [r3, #20]
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 80014ac:	68fb      	ldr	r3, [r7, #12]
 80014ae:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80014b0:	b29b      	uxth	r3, r3
 80014b2:	f001 ffae 	bl	8003412 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	695a      	ldr	r2, [r3, #20]
 80014ba:	68fb      	ldr	r3, [r7, #12]
 80014bc:	69db      	ldr	r3, [r3, #28]
 80014be:	441a      	add	r2, r3
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80014c4:	2100      	movs	r1, #0
 80014c6:	6878      	ldr	r0, [r7, #4]
 80014c8:	f004 fc90 	bl	8005dec <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	461c      	mov	r4, r3
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80014da:	b29b      	uxth	r3, r3
 80014dc:	441c      	add	r4, r3
 80014de:	f204 430c 	addw	r3, r4, #1036	; 0x40c
 80014e2:	461c      	mov	r4, r3
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	691b      	ldr	r3, [r3, #16]
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d10e      	bne.n	800150a <PCD_EP_ISR_Handler+0x222>
 80014ec:	8823      	ldrh	r3, [r4, #0]
 80014ee:	b29b      	uxth	r3, r3
 80014f0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80014f4:	b29b      	uxth	r3, r3
 80014f6:	8023      	strh	r3, [r4, #0]
 80014f8:	8823      	ldrh	r3, [r4, #0]
 80014fa:	b29b      	uxth	r3, r3
 80014fc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001500:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001504:	b29b      	uxth	r3, r3
 8001506:	8023      	strh	r3, [r4, #0]
 8001508:	e02d      	b.n	8001566 <PCD_EP_ISR_Handler+0x27e>
 800150a:	68fb      	ldr	r3, [r7, #12]
 800150c:	691b      	ldr	r3, [r3, #16]
 800150e:	2b3e      	cmp	r3, #62	; 0x3e
 8001510:	d812      	bhi.n	8001538 <PCD_EP_ISR_Handler+0x250>
 8001512:	68fb      	ldr	r3, [r7, #12]
 8001514:	691b      	ldr	r3, [r3, #16]
 8001516:	085b      	lsrs	r3, r3, #1
 8001518:	61bb      	str	r3, [r7, #24]
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	691b      	ldr	r3, [r3, #16]
 800151e:	f003 0301 	and.w	r3, r3, #1
 8001522:	2b00      	cmp	r3, #0
 8001524:	d002      	beq.n	800152c <PCD_EP_ISR_Handler+0x244>
 8001526:	69bb      	ldr	r3, [r7, #24]
 8001528:	3301      	adds	r3, #1
 800152a:	61bb      	str	r3, [r7, #24]
 800152c:	69bb      	ldr	r3, [r7, #24]
 800152e:	b29b      	uxth	r3, r3
 8001530:	029b      	lsls	r3, r3, #10
 8001532:	b29b      	uxth	r3, r3
 8001534:	8023      	strh	r3, [r4, #0]
 8001536:	e016      	b.n	8001566 <PCD_EP_ISR_Handler+0x27e>
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	691b      	ldr	r3, [r3, #16]
 800153c:	095b      	lsrs	r3, r3, #5
 800153e:	61bb      	str	r3, [r7, #24]
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	691b      	ldr	r3, [r3, #16]
 8001544:	f003 031f 	and.w	r3, r3, #31
 8001548:	2b00      	cmp	r3, #0
 800154a:	d102      	bne.n	8001552 <PCD_EP_ISR_Handler+0x26a>
 800154c:	69bb      	ldr	r3, [r7, #24]
 800154e:	3b01      	subs	r3, #1
 8001550:	61bb      	str	r3, [r7, #24]
 8001552:	69bb      	ldr	r3, [r7, #24]
 8001554:	b29b      	uxth	r3, r3
 8001556:	029b      	lsls	r3, r3, #10
 8001558:	b29b      	uxth	r3, r3
 800155a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800155e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001562:	b29b      	uxth	r3, r3
 8001564:	8023      	strh	r3, [r4, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	881b      	ldrh	r3, [r3, #0]
 800156c:	b29b      	uxth	r3, r3
 800156e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001572:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001576:	b29c      	uxth	r4, r3
 8001578:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 800157c:	b29c      	uxth	r4, r3
 800157e:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8001582:	b29c      	uxth	r4, r3
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681a      	ldr	r2, [r3, #0]
 8001588:	4ba2      	ldr	r3, [pc, #648]	; (8001814 <PCD_EP_ISR_Handler+0x52c>)
 800158a:	4323      	orrs	r3, r4
 800158c:	b29b      	uxth	r3, r3
 800158e:	8013      	strh	r3, [r2, #0]
 8001590:	e132      	b.n	80017f8 <PCD_EP_ISR_Handler+0x510>
    else
    {
      /* Decode and service non control endpoints interrupt  */

      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	461a      	mov	r2, r3
 8001598:	7d7b      	ldrb	r3, [r7, #21]
 800159a:	009b      	lsls	r3, r3, #2
 800159c:	4413      	add	r3, r2
 800159e:	881b      	ldrh	r3, [r3, #0]
 80015a0:	827b      	strh	r3, [r7, #18]
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80015a2:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	f280 80d1 	bge.w	800174e <PCD_EP_ISR_Handler+0x466>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	461a      	mov	r2, r3
 80015b2:	7d7b      	ldrb	r3, [r7, #21]
 80015b4:	009b      	lsls	r3, r3, #2
 80015b6:	4413      	add	r3, r2
 80015b8:	881b      	ldrh	r3, [r3, #0]
 80015ba:	b29a      	uxth	r2, r3
 80015bc:	f640 738f 	movw	r3, #3983	; 0xf8f
 80015c0:	4013      	ands	r3, r2
 80015c2:	b29c      	uxth	r4, r3
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	461a      	mov	r2, r3
 80015ca:	7d7b      	ldrb	r3, [r7, #21]
 80015cc:	009b      	lsls	r3, r3, #2
 80015ce:	4413      	add	r3, r2
 80015d0:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 80015d4:	b292      	uxth	r2, r2
 80015d6:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 80015d8:	7d7b      	ldrb	r3, [r7, #21]
 80015da:	015b      	lsls	r3, r3, #5
 80015dc:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80015e0:	687a      	ldr	r2, [r7, #4]
 80015e2:	4413      	add	r3, r2
 80015e4:	60fb      	str	r3, [r7, #12]

        /* OUT double Buffering*/
        if (ep->doublebuffer == 0U)
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	7b1b      	ldrb	r3, [r3, #12]
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d121      	bne.n	8001632 <PCD_EP_ISR_Handler+0x34a>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80015f6:	b29b      	uxth	r3, r3
 80015f8:	461a      	mov	r2, r3
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	781b      	ldrb	r3, [r3, #0]
 80015fe:	00db      	lsls	r3, r3, #3
 8001600:	4413      	add	r3, r2
 8001602:	3306      	adds	r3, #6
 8001604:	005b      	lsls	r3, r3, #1
 8001606:	687a      	ldr	r2, [r7, #4]
 8001608:	6812      	ldr	r2, [r2, #0]
 800160a:	4413      	add	r3, r2
 800160c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001610:	881b      	ldrh	r3, [r3, #0]
 8001612:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001616:	83fb      	strh	r3, [r7, #30]
          if (count != 0U)
 8001618:	8bfb      	ldrh	r3, [r7, #30]
 800161a:	2b00      	cmp	r3, #0
 800161c:	d072      	beq.n	8001704 <PCD_EP_ISR_Handler+0x41c>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	6818      	ldr	r0, [r3, #0]
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	6959      	ldr	r1, [r3, #20]
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	88da      	ldrh	r2, [r3, #6]
 800162a:	8bfb      	ldrh	r3, [r7, #30]
 800162c:	f001 fef1 	bl	8003412 <USB_ReadPMA>
 8001630:	e068      	b.n	8001704 <PCD_EP_ISR_Handler+0x41c>
          }
        }
        else
        {
          if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	461a      	mov	r2, r3
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	781b      	ldrb	r3, [r3, #0]
 800163c:	009b      	lsls	r3, r3, #2
 800163e:	4413      	add	r3, r2
 8001640:	881b      	ldrh	r3, [r3, #0]
 8001642:	b29b      	uxth	r3, r3
 8001644:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001648:	2b00      	cmp	r3, #0
 800164a:	d021      	beq.n	8001690 <PCD_EP_ISR_Handler+0x3a8>
          {
            /*read from endpoint BUF0Addr buffer*/
            count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001654:	b29b      	uxth	r3, r3
 8001656:	461a      	mov	r2, r3
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	781b      	ldrb	r3, [r3, #0]
 800165c:	00db      	lsls	r3, r3, #3
 800165e:	4413      	add	r3, r2
 8001660:	3302      	adds	r3, #2
 8001662:	005b      	lsls	r3, r3, #1
 8001664:	687a      	ldr	r2, [r7, #4]
 8001666:	6812      	ldr	r2, [r2, #0]
 8001668:	4413      	add	r3, r2
 800166a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800166e:	881b      	ldrh	r3, [r3, #0]
 8001670:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001674:	83fb      	strh	r3, [r7, #30]
            if (count != 0U)
 8001676:	8bfb      	ldrh	r3, [r7, #30]
 8001678:	2b00      	cmp	r3, #0
 800167a:	d02a      	beq.n	80016d2 <PCD_EP_ISR_Handler+0x3ea>
            {
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	6818      	ldr	r0, [r3, #0]
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	6959      	ldr	r1, [r3, #20]
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	891a      	ldrh	r2, [r3, #8]
 8001688:	8bfb      	ldrh	r3, [r7, #30]
 800168a:	f001 fec2 	bl	8003412 <USB_ReadPMA>
 800168e:	e020      	b.n	80016d2 <PCD_EP_ISR_Handler+0x3ea>
            }
          }
          else
          {
            /*read from endpoint BUF1Addr buffer*/
            count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001698:	b29b      	uxth	r3, r3
 800169a:	461a      	mov	r2, r3
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	781b      	ldrb	r3, [r3, #0]
 80016a0:	00db      	lsls	r3, r3, #3
 80016a2:	4413      	add	r3, r2
 80016a4:	3306      	adds	r3, #6
 80016a6:	005b      	lsls	r3, r3, #1
 80016a8:	687a      	ldr	r2, [r7, #4]
 80016aa:	6812      	ldr	r2, [r2, #0]
 80016ac:	4413      	add	r3, r2
 80016ae:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80016b2:	881b      	ldrh	r3, [r3, #0]
 80016b4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80016b8:	83fb      	strh	r3, [r7, #30]
            if (count != 0U)
 80016ba:	8bfb      	ldrh	r3, [r7, #30]
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d008      	beq.n	80016d2 <PCD_EP_ISR_Handler+0x3ea>
            {
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	6818      	ldr	r0, [r3, #0]
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	6959      	ldr	r1, [r3, #20]
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	895a      	ldrh	r2, [r3, #10]
 80016cc:	8bfb      	ldrh	r3, [r7, #30]
 80016ce:	f001 fea0 	bl	8003412 <USB_ReadPMA>
            }
          }
          /* free EP OUT Buffer */
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	461a      	mov	r2, r3
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	781b      	ldrb	r3, [r3, #0]
 80016dc:	009b      	lsls	r3, r3, #2
 80016de:	4413      	add	r3, r2
 80016e0:	881b      	ldrh	r3, [r3, #0]
 80016e2:	b29b      	uxth	r3, r3
 80016e4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80016e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80016ec:	b29c      	uxth	r4, r3
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	461a      	mov	r2, r3
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	781b      	ldrb	r3, [r3, #0]
 80016f8:	009b      	lsls	r3, r3, #2
 80016fa:	441a      	add	r2, r3
 80016fc:	4b46      	ldr	r3, [pc, #280]	; (8001818 <PCD_EP_ISR_Handler+0x530>)
 80016fe:	4323      	orrs	r3, r4
 8001700:	b29b      	uxth	r3, r3
 8001702:	8013      	strh	r3, [r2, #0]
        }
        /*multi-packet on the NON control OUT endpoint*/
        ep->xfer_count += count;
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	69da      	ldr	r2, [r3, #28]
 8001708:	8bfb      	ldrh	r3, [r7, #30]
 800170a:	441a      	add	r2, r3
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	695a      	ldr	r2, [r3, #20]
 8001714:	8bfb      	ldrh	r3, [r7, #30]
 8001716:	441a      	add	r2, r3
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	699b      	ldr	r3, [r3, #24]
 8001720:	2b00      	cmp	r3, #0
 8001722:	d004      	beq.n	800172e <PCD_EP_ISR_Handler+0x446>
 8001724:	8bfa      	ldrh	r2, [r7, #30]
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	691b      	ldr	r3, [r3, #16]
 800172a:	429a      	cmp	r2, r3
 800172c:	d206      	bcs.n	800173c <PCD_EP_ISR_Handler+0x454>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	781b      	ldrb	r3, [r3, #0]
 8001732:	4619      	mov	r1, r3
 8001734:	6878      	ldr	r0, [r7, #4]
 8001736:	f004 fb59 	bl	8005dec <HAL_PCD_DataOutStageCallback>
 800173a:	e008      	b.n	800174e <PCD_EP_ISR_Handler+0x466>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)HAL_PCD_EP_Receive(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	7819      	ldrb	r1, [r3, #0]
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	695a      	ldr	r2, [r3, #20]
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	699b      	ldr	r3, [r3, #24]
 8001748:	6878      	ldr	r0, [r7, #4]
 800174a:	f7ff fc71 	bl	8001030 <HAL_PCD_EP_Receive>
        }

      } /* if((wEPVal & EP_CTR_RX) */

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 800174e:	8a7b      	ldrh	r3, [r7, #18]
 8001750:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001754:	2b00      	cmp	r3, #0
 8001756:	d04f      	beq.n	80017f8 <PCD_EP_ISR_Handler+0x510>
      {
        ep = &hpcd->IN_ep[epindex];
 8001758:	7d7b      	ldrb	r3, [r7, #21]
 800175a:	015b      	lsls	r3, r3, #5
 800175c:	3328      	adds	r3, #40	; 0x28
 800175e:	687a      	ldr	r2, [r7, #4]
 8001760:	4413      	add	r3, r2
 8001762:	60fb      	str	r3, [r7, #12]

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	461a      	mov	r2, r3
 800176a:	7d7b      	ldrb	r3, [r7, #21]
 800176c:	009b      	lsls	r3, r3, #2
 800176e:	4413      	add	r3, r2
 8001770:	881b      	ldrh	r3, [r3, #0]
 8001772:	b29b      	uxth	r3, r3
 8001774:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8001778:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800177c:	b29c      	uxth	r4, r3
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	461a      	mov	r2, r3
 8001784:	7d7b      	ldrb	r3, [r7, #21]
 8001786:	009b      	lsls	r3, r3, #2
 8001788:	441a      	add	r2, r3
 800178a:	ea6f 4344 	mvn.w	r3, r4, lsl #17
 800178e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001792:	b29b      	uxth	r3, r3
 8001794:	8013      	strh	r3, [r2, #0]

        /*multi-packet on the NON control IN endpoint*/
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800179e:	b29b      	uxth	r3, r3
 80017a0:	461a      	mov	r2, r3
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	781b      	ldrb	r3, [r3, #0]
 80017a6:	00db      	lsls	r3, r3, #3
 80017a8:	4413      	add	r3, r2
 80017aa:	3302      	adds	r3, #2
 80017ac:	005b      	lsls	r3, r3, #1
 80017ae:	687a      	ldr	r2, [r7, #4]
 80017b0:	6812      	ldr	r2, [r2, #0]
 80017b2:	4413      	add	r3, r2
 80017b4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80017b8:	881b      	ldrh	r3, [r3, #0]
 80017ba:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	695a      	ldr	r2, [r3, #20]
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	69db      	ldr	r3, [r3, #28]
 80017ca:	441a      	add	r2, r3
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	615a      	str	r2, [r3, #20]

        /* Zero Length Packet? */
        if (ep->xfer_len == 0U)
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	699b      	ldr	r3, [r3, #24]
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d106      	bne.n	80017e6 <PCD_EP_ISR_Handler+0x4fe>
        {
          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	781b      	ldrb	r3, [r3, #0]
 80017dc:	4619      	mov	r1, r3
 80017de:	6878      	ldr	r0, [r7, #4]
 80017e0:	f004 fb1c 	bl	8005e1c <HAL_PCD_DataInStageCallback>
 80017e4:	e008      	b.n	80017f8 <PCD_EP_ISR_Handler+0x510>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)HAL_PCD_EP_Transmit(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	7819      	ldrb	r1, [r3, #0]
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	695a      	ldr	r2, [r3, #20]
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	699b      	ldr	r3, [r3, #24]
 80017f2:	6878      	ldr	r0, [r7, #4]
 80017f4:	f7ff fc6a 	bl	80010cc <HAL_PCD_EP_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001800:	b29b      	uxth	r3, r3
 8001802:	b21b      	sxth	r3, r3
 8001804:	2b00      	cmp	r3, #0
 8001806:	f6ff ad74 	blt.w	80012f2 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }
  return HAL_OK;
 800180a:	2300      	movs	r3, #0
}
 800180c:	4618      	mov	r0, r3
 800180e:	3724      	adds	r7, #36	; 0x24
 8001810:	46bd      	mov	sp, r7
 8001812:	bd90      	pop	{r4, r7, pc}
 8001814:	ffff8080 	.word	0xffff8080
 8001818:	ffff80c0 	.word	0xffff80c0

0800181c <HAL_PCDEx_PMAConfig>:

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd,
                                       uint16_t ep_addr,
                                       uint16_t ep_kind,
                                       uint32_t pmaadress)
{
 800181c:	b480      	push	{r7}
 800181e:	b087      	sub	sp, #28
 8001820:	af00      	add	r7, sp, #0
 8001822:	60f8      	str	r0, [r7, #12]
 8001824:	607b      	str	r3, [r7, #4]
 8001826:	460b      	mov	r3, r1
 8001828:	817b      	strh	r3, [r7, #10]
 800182a:	4613      	mov	r3, r2
 800182c:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 800182e:	897b      	ldrh	r3, [r7, #10]
 8001830:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001834:	b29b      	uxth	r3, r3
 8001836:	2b00      	cmp	r3, #0
 8001838:	d008      	beq.n	800184c <HAL_PCDEx_PMAConfig+0x30>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800183a:	897b      	ldrh	r3, [r7, #10]
 800183c:	f003 0307 	and.w	r3, r3, #7
 8001840:	015b      	lsls	r3, r3, #5
 8001842:	3328      	adds	r3, #40	; 0x28
 8001844:	68fa      	ldr	r2, [r7, #12]
 8001846:	4413      	add	r3, r2
 8001848:	617b      	str	r3, [r7, #20]
 800184a:	e006      	b.n	800185a <HAL_PCDEx_PMAConfig+0x3e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800184c:	897b      	ldrh	r3, [r7, #10]
 800184e:	015b      	lsls	r3, r3, #5
 8001850:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001854:	68fa      	ldr	r2, [r7, #12]
 8001856:	4413      	add	r3, r2
 8001858:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 800185a:	893b      	ldrh	r3, [r7, #8]
 800185c:	2b00      	cmp	r3, #0
 800185e:	d107      	bne.n	8001870 <HAL_PCDEx_PMAConfig+0x54>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8001860:	697b      	ldr	r3, [r7, #20]
 8001862:	2200      	movs	r2, #0
 8001864:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	b29a      	uxth	r2, r3
 800186a:	697b      	ldr	r3, [r7, #20]
 800186c:	80da      	strh	r2, [r3, #6]
 800186e:	e00b      	b.n	8001888 <HAL_PCDEx_PMAConfig+0x6c>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8001870:	697b      	ldr	r3, [r7, #20]
 8001872:	2201      	movs	r2, #1
 8001874:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	b29a      	uxth	r2, r3
 800187a:	697b      	ldr	r3, [r7, #20]
 800187c:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	0c1b      	lsrs	r3, r3, #16
 8001882:	b29a      	uxth	r2, r3
 8001884:	697b      	ldr	r3, [r7, #20]
 8001886:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8001888:	2300      	movs	r3, #0
}
 800188a:	4618      	mov	r0, r3
 800188c:	371c      	adds	r7, #28
 800188e:	46bd      	mov	sp, r7
 8001890:	bc80      	pop	{r7}
 8001892:	4770      	bx	lr

08001894 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	b086      	sub	sp, #24
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d101      	bne.n	80018a6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80018a2:	2301      	movs	r3, #1
 80018a4:	e26c      	b.n	8001d80 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	f003 0301 	and.w	r3, r3, #1
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	f000 8087 	beq.w	80019c2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80018b4:	4b92      	ldr	r3, [pc, #584]	; (8001b00 <HAL_RCC_OscConfig+0x26c>)
 80018b6:	685b      	ldr	r3, [r3, #4]
 80018b8:	f003 030c 	and.w	r3, r3, #12
 80018bc:	2b04      	cmp	r3, #4
 80018be:	d00c      	beq.n	80018da <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80018c0:	4b8f      	ldr	r3, [pc, #572]	; (8001b00 <HAL_RCC_OscConfig+0x26c>)
 80018c2:	685b      	ldr	r3, [r3, #4]
 80018c4:	f003 030c 	and.w	r3, r3, #12
 80018c8:	2b08      	cmp	r3, #8
 80018ca:	d112      	bne.n	80018f2 <HAL_RCC_OscConfig+0x5e>
 80018cc:	4b8c      	ldr	r3, [pc, #560]	; (8001b00 <HAL_RCC_OscConfig+0x26c>)
 80018ce:	685b      	ldr	r3, [r3, #4]
 80018d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80018d8:	d10b      	bne.n	80018f2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018da:	4b89      	ldr	r3, [pc, #548]	; (8001b00 <HAL_RCC_OscConfig+0x26c>)
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d06c      	beq.n	80019c0 <HAL_RCC_OscConfig+0x12c>
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	685b      	ldr	r3, [r3, #4]
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d168      	bne.n	80019c0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80018ee:	2301      	movs	r3, #1
 80018f0:	e246      	b.n	8001d80 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	685b      	ldr	r3, [r3, #4]
 80018f6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80018fa:	d106      	bne.n	800190a <HAL_RCC_OscConfig+0x76>
 80018fc:	4b80      	ldr	r3, [pc, #512]	; (8001b00 <HAL_RCC_OscConfig+0x26c>)
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	4a7f      	ldr	r2, [pc, #508]	; (8001b00 <HAL_RCC_OscConfig+0x26c>)
 8001902:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001906:	6013      	str	r3, [r2, #0]
 8001908:	e02e      	b.n	8001968 <HAL_RCC_OscConfig+0xd4>
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	685b      	ldr	r3, [r3, #4]
 800190e:	2b00      	cmp	r3, #0
 8001910:	d10c      	bne.n	800192c <HAL_RCC_OscConfig+0x98>
 8001912:	4b7b      	ldr	r3, [pc, #492]	; (8001b00 <HAL_RCC_OscConfig+0x26c>)
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	4a7a      	ldr	r2, [pc, #488]	; (8001b00 <HAL_RCC_OscConfig+0x26c>)
 8001918:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800191c:	6013      	str	r3, [r2, #0]
 800191e:	4b78      	ldr	r3, [pc, #480]	; (8001b00 <HAL_RCC_OscConfig+0x26c>)
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	4a77      	ldr	r2, [pc, #476]	; (8001b00 <HAL_RCC_OscConfig+0x26c>)
 8001924:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001928:	6013      	str	r3, [r2, #0]
 800192a:	e01d      	b.n	8001968 <HAL_RCC_OscConfig+0xd4>
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	685b      	ldr	r3, [r3, #4]
 8001930:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001934:	d10c      	bne.n	8001950 <HAL_RCC_OscConfig+0xbc>
 8001936:	4b72      	ldr	r3, [pc, #456]	; (8001b00 <HAL_RCC_OscConfig+0x26c>)
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	4a71      	ldr	r2, [pc, #452]	; (8001b00 <HAL_RCC_OscConfig+0x26c>)
 800193c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001940:	6013      	str	r3, [r2, #0]
 8001942:	4b6f      	ldr	r3, [pc, #444]	; (8001b00 <HAL_RCC_OscConfig+0x26c>)
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	4a6e      	ldr	r2, [pc, #440]	; (8001b00 <HAL_RCC_OscConfig+0x26c>)
 8001948:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800194c:	6013      	str	r3, [r2, #0]
 800194e:	e00b      	b.n	8001968 <HAL_RCC_OscConfig+0xd4>
 8001950:	4b6b      	ldr	r3, [pc, #428]	; (8001b00 <HAL_RCC_OscConfig+0x26c>)
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	4a6a      	ldr	r2, [pc, #424]	; (8001b00 <HAL_RCC_OscConfig+0x26c>)
 8001956:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800195a:	6013      	str	r3, [r2, #0]
 800195c:	4b68      	ldr	r3, [pc, #416]	; (8001b00 <HAL_RCC_OscConfig+0x26c>)
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	4a67      	ldr	r2, [pc, #412]	; (8001b00 <HAL_RCC_OscConfig+0x26c>)
 8001962:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001966:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	685b      	ldr	r3, [r3, #4]
 800196c:	2b00      	cmp	r3, #0
 800196e:	d013      	beq.n	8001998 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001970:	f7fe fdc6 	bl	8000500 <HAL_GetTick>
 8001974:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001976:	e008      	b.n	800198a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001978:	f7fe fdc2 	bl	8000500 <HAL_GetTick>
 800197c:	4602      	mov	r2, r0
 800197e:	693b      	ldr	r3, [r7, #16]
 8001980:	1ad3      	subs	r3, r2, r3
 8001982:	2b64      	cmp	r3, #100	; 0x64
 8001984:	d901      	bls.n	800198a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001986:	2303      	movs	r3, #3
 8001988:	e1fa      	b.n	8001d80 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800198a:	4b5d      	ldr	r3, [pc, #372]	; (8001b00 <HAL_RCC_OscConfig+0x26c>)
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001992:	2b00      	cmp	r3, #0
 8001994:	d0f0      	beq.n	8001978 <HAL_RCC_OscConfig+0xe4>
 8001996:	e014      	b.n	80019c2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001998:	f7fe fdb2 	bl	8000500 <HAL_GetTick>
 800199c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800199e:	e008      	b.n	80019b2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80019a0:	f7fe fdae 	bl	8000500 <HAL_GetTick>
 80019a4:	4602      	mov	r2, r0
 80019a6:	693b      	ldr	r3, [r7, #16]
 80019a8:	1ad3      	subs	r3, r2, r3
 80019aa:	2b64      	cmp	r3, #100	; 0x64
 80019ac:	d901      	bls.n	80019b2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80019ae:	2303      	movs	r3, #3
 80019b0:	e1e6      	b.n	8001d80 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80019b2:	4b53      	ldr	r3, [pc, #332]	; (8001b00 <HAL_RCC_OscConfig+0x26c>)
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d1f0      	bne.n	80019a0 <HAL_RCC_OscConfig+0x10c>
 80019be:	e000      	b.n	80019c2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019c0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	f003 0302 	and.w	r3, r3, #2
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d063      	beq.n	8001a96 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80019ce:	4b4c      	ldr	r3, [pc, #304]	; (8001b00 <HAL_RCC_OscConfig+0x26c>)
 80019d0:	685b      	ldr	r3, [r3, #4]
 80019d2:	f003 030c 	and.w	r3, r3, #12
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d00b      	beq.n	80019f2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80019da:	4b49      	ldr	r3, [pc, #292]	; (8001b00 <HAL_RCC_OscConfig+0x26c>)
 80019dc:	685b      	ldr	r3, [r3, #4]
 80019de:	f003 030c 	and.w	r3, r3, #12
 80019e2:	2b08      	cmp	r3, #8
 80019e4:	d11c      	bne.n	8001a20 <HAL_RCC_OscConfig+0x18c>
 80019e6:	4b46      	ldr	r3, [pc, #280]	; (8001b00 <HAL_RCC_OscConfig+0x26c>)
 80019e8:	685b      	ldr	r3, [r3, #4]
 80019ea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d116      	bne.n	8001a20 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80019f2:	4b43      	ldr	r3, [pc, #268]	; (8001b00 <HAL_RCC_OscConfig+0x26c>)
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f003 0302 	and.w	r3, r3, #2
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d005      	beq.n	8001a0a <HAL_RCC_OscConfig+0x176>
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	691b      	ldr	r3, [r3, #16]
 8001a02:	2b01      	cmp	r3, #1
 8001a04:	d001      	beq.n	8001a0a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001a06:	2301      	movs	r3, #1
 8001a08:	e1ba      	b.n	8001d80 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a0a:	4b3d      	ldr	r3, [pc, #244]	; (8001b00 <HAL_RCC_OscConfig+0x26c>)
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	695b      	ldr	r3, [r3, #20]
 8001a16:	00db      	lsls	r3, r3, #3
 8001a18:	4939      	ldr	r1, [pc, #228]	; (8001b00 <HAL_RCC_OscConfig+0x26c>)
 8001a1a:	4313      	orrs	r3, r2
 8001a1c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a1e:	e03a      	b.n	8001a96 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	691b      	ldr	r3, [r3, #16]
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d020      	beq.n	8001a6a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001a28:	4b36      	ldr	r3, [pc, #216]	; (8001b04 <HAL_RCC_OscConfig+0x270>)
 8001a2a:	2201      	movs	r2, #1
 8001a2c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a2e:	f7fe fd67 	bl	8000500 <HAL_GetTick>
 8001a32:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a34:	e008      	b.n	8001a48 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a36:	f7fe fd63 	bl	8000500 <HAL_GetTick>
 8001a3a:	4602      	mov	r2, r0
 8001a3c:	693b      	ldr	r3, [r7, #16]
 8001a3e:	1ad3      	subs	r3, r2, r3
 8001a40:	2b02      	cmp	r3, #2
 8001a42:	d901      	bls.n	8001a48 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001a44:	2303      	movs	r3, #3
 8001a46:	e19b      	b.n	8001d80 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a48:	4b2d      	ldr	r3, [pc, #180]	; (8001b00 <HAL_RCC_OscConfig+0x26c>)
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	f003 0302 	and.w	r3, r3, #2
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d0f0      	beq.n	8001a36 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a54:	4b2a      	ldr	r3, [pc, #168]	; (8001b00 <HAL_RCC_OscConfig+0x26c>)
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	695b      	ldr	r3, [r3, #20]
 8001a60:	00db      	lsls	r3, r3, #3
 8001a62:	4927      	ldr	r1, [pc, #156]	; (8001b00 <HAL_RCC_OscConfig+0x26c>)
 8001a64:	4313      	orrs	r3, r2
 8001a66:	600b      	str	r3, [r1, #0]
 8001a68:	e015      	b.n	8001a96 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001a6a:	4b26      	ldr	r3, [pc, #152]	; (8001b04 <HAL_RCC_OscConfig+0x270>)
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a70:	f7fe fd46 	bl	8000500 <HAL_GetTick>
 8001a74:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a76:	e008      	b.n	8001a8a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a78:	f7fe fd42 	bl	8000500 <HAL_GetTick>
 8001a7c:	4602      	mov	r2, r0
 8001a7e:	693b      	ldr	r3, [r7, #16]
 8001a80:	1ad3      	subs	r3, r2, r3
 8001a82:	2b02      	cmp	r3, #2
 8001a84:	d901      	bls.n	8001a8a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001a86:	2303      	movs	r3, #3
 8001a88:	e17a      	b.n	8001d80 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a8a:	4b1d      	ldr	r3, [pc, #116]	; (8001b00 <HAL_RCC_OscConfig+0x26c>)
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	f003 0302 	and.w	r3, r3, #2
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d1f0      	bne.n	8001a78 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	f003 0308 	and.w	r3, r3, #8
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d03a      	beq.n	8001b18 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	699b      	ldr	r3, [r3, #24]
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d019      	beq.n	8001ade <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001aaa:	4b17      	ldr	r3, [pc, #92]	; (8001b08 <HAL_RCC_OscConfig+0x274>)
 8001aac:	2201      	movs	r2, #1
 8001aae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ab0:	f7fe fd26 	bl	8000500 <HAL_GetTick>
 8001ab4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ab6:	e008      	b.n	8001aca <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ab8:	f7fe fd22 	bl	8000500 <HAL_GetTick>
 8001abc:	4602      	mov	r2, r0
 8001abe:	693b      	ldr	r3, [r7, #16]
 8001ac0:	1ad3      	subs	r3, r2, r3
 8001ac2:	2b02      	cmp	r3, #2
 8001ac4:	d901      	bls.n	8001aca <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001ac6:	2303      	movs	r3, #3
 8001ac8:	e15a      	b.n	8001d80 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001aca:	4b0d      	ldr	r3, [pc, #52]	; (8001b00 <HAL_RCC_OscConfig+0x26c>)
 8001acc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ace:	f003 0302 	and.w	r3, r3, #2
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d0f0      	beq.n	8001ab8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001ad6:	2001      	movs	r0, #1
 8001ad8:	f000 faa8 	bl	800202c <RCC_Delay>
 8001adc:	e01c      	b.n	8001b18 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001ade:	4b0a      	ldr	r3, [pc, #40]	; (8001b08 <HAL_RCC_OscConfig+0x274>)
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ae4:	f7fe fd0c 	bl	8000500 <HAL_GetTick>
 8001ae8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001aea:	e00f      	b.n	8001b0c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001aec:	f7fe fd08 	bl	8000500 <HAL_GetTick>
 8001af0:	4602      	mov	r2, r0
 8001af2:	693b      	ldr	r3, [r7, #16]
 8001af4:	1ad3      	subs	r3, r2, r3
 8001af6:	2b02      	cmp	r3, #2
 8001af8:	d908      	bls.n	8001b0c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001afa:	2303      	movs	r3, #3
 8001afc:	e140      	b.n	8001d80 <HAL_RCC_OscConfig+0x4ec>
 8001afe:	bf00      	nop
 8001b00:	40021000 	.word	0x40021000
 8001b04:	42420000 	.word	0x42420000
 8001b08:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b0c:	4b9e      	ldr	r3, [pc, #632]	; (8001d88 <HAL_RCC_OscConfig+0x4f4>)
 8001b0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b10:	f003 0302 	and.w	r3, r3, #2
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d1e9      	bne.n	8001aec <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	f003 0304 	and.w	r3, r3, #4
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	f000 80a6 	beq.w	8001c72 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001b26:	2300      	movs	r3, #0
 8001b28:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001b2a:	4b97      	ldr	r3, [pc, #604]	; (8001d88 <HAL_RCC_OscConfig+0x4f4>)
 8001b2c:	69db      	ldr	r3, [r3, #28]
 8001b2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d10d      	bne.n	8001b52 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b36:	4b94      	ldr	r3, [pc, #592]	; (8001d88 <HAL_RCC_OscConfig+0x4f4>)
 8001b38:	69db      	ldr	r3, [r3, #28]
 8001b3a:	4a93      	ldr	r2, [pc, #588]	; (8001d88 <HAL_RCC_OscConfig+0x4f4>)
 8001b3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b40:	61d3      	str	r3, [r2, #28]
 8001b42:	4b91      	ldr	r3, [pc, #580]	; (8001d88 <HAL_RCC_OscConfig+0x4f4>)
 8001b44:	69db      	ldr	r3, [r3, #28]
 8001b46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b4a:	60bb      	str	r3, [r7, #8]
 8001b4c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001b4e:	2301      	movs	r3, #1
 8001b50:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b52:	4b8e      	ldr	r3, [pc, #568]	; (8001d8c <HAL_RCC_OscConfig+0x4f8>)
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d118      	bne.n	8001b90 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001b5e:	4b8b      	ldr	r3, [pc, #556]	; (8001d8c <HAL_RCC_OscConfig+0x4f8>)
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	4a8a      	ldr	r2, [pc, #552]	; (8001d8c <HAL_RCC_OscConfig+0x4f8>)
 8001b64:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b68:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b6a:	f7fe fcc9 	bl	8000500 <HAL_GetTick>
 8001b6e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b70:	e008      	b.n	8001b84 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b72:	f7fe fcc5 	bl	8000500 <HAL_GetTick>
 8001b76:	4602      	mov	r2, r0
 8001b78:	693b      	ldr	r3, [r7, #16]
 8001b7a:	1ad3      	subs	r3, r2, r3
 8001b7c:	2b64      	cmp	r3, #100	; 0x64
 8001b7e:	d901      	bls.n	8001b84 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001b80:	2303      	movs	r3, #3
 8001b82:	e0fd      	b.n	8001d80 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b84:	4b81      	ldr	r3, [pc, #516]	; (8001d8c <HAL_RCC_OscConfig+0x4f8>)
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d0f0      	beq.n	8001b72 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	68db      	ldr	r3, [r3, #12]
 8001b94:	2b01      	cmp	r3, #1
 8001b96:	d106      	bne.n	8001ba6 <HAL_RCC_OscConfig+0x312>
 8001b98:	4b7b      	ldr	r3, [pc, #492]	; (8001d88 <HAL_RCC_OscConfig+0x4f4>)
 8001b9a:	6a1b      	ldr	r3, [r3, #32]
 8001b9c:	4a7a      	ldr	r2, [pc, #488]	; (8001d88 <HAL_RCC_OscConfig+0x4f4>)
 8001b9e:	f043 0301 	orr.w	r3, r3, #1
 8001ba2:	6213      	str	r3, [r2, #32]
 8001ba4:	e02d      	b.n	8001c02 <HAL_RCC_OscConfig+0x36e>
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	68db      	ldr	r3, [r3, #12]
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d10c      	bne.n	8001bc8 <HAL_RCC_OscConfig+0x334>
 8001bae:	4b76      	ldr	r3, [pc, #472]	; (8001d88 <HAL_RCC_OscConfig+0x4f4>)
 8001bb0:	6a1b      	ldr	r3, [r3, #32]
 8001bb2:	4a75      	ldr	r2, [pc, #468]	; (8001d88 <HAL_RCC_OscConfig+0x4f4>)
 8001bb4:	f023 0301 	bic.w	r3, r3, #1
 8001bb8:	6213      	str	r3, [r2, #32]
 8001bba:	4b73      	ldr	r3, [pc, #460]	; (8001d88 <HAL_RCC_OscConfig+0x4f4>)
 8001bbc:	6a1b      	ldr	r3, [r3, #32]
 8001bbe:	4a72      	ldr	r2, [pc, #456]	; (8001d88 <HAL_RCC_OscConfig+0x4f4>)
 8001bc0:	f023 0304 	bic.w	r3, r3, #4
 8001bc4:	6213      	str	r3, [r2, #32]
 8001bc6:	e01c      	b.n	8001c02 <HAL_RCC_OscConfig+0x36e>
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	68db      	ldr	r3, [r3, #12]
 8001bcc:	2b05      	cmp	r3, #5
 8001bce:	d10c      	bne.n	8001bea <HAL_RCC_OscConfig+0x356>
 8001bd0:	4b6d      	ldr	r3, [pc, #436]	; (8001d88 <HAL_RCC_OscConfig+0x4f4>)
 8001bd2:	6a1b      	ldr	r3, [r3, #32]
 8001bd4:	4a6c      	ldr	r2, [pc, #432]	; (8001d88 <HAL_RCC_OscConfig+0x4f4>)
 8001bd6:	f043 0304 	orr.w	r3, r3, #4
 8001bda:	6213      	str	r3, [r2, #32]
 8001bdc:	4b6a      	ldr	r3, [pc, #424]	; (8001d88 <HAL_RCC_OscConfig+0x4f4>)
 8001bde:	6a1b      	ldr	r3, [r3, #32]
 8001be0:	4a69      	ldr	r2, [pc, #420]	; (8001d88 <HAL_RCC_OscConfig+0x4f4>)
 8001be2:	f043 0301 	orr.w	r3, r3, #1
 8001be6:	6213      	str	r3, [r2, #32]
 8001be8:	e00b      	b.n	8001c02 <HAL_RCC_OscConfig+0x36e>
 8001bea:	4b67      	ldr	r3, [pc, #412]	; (8001d88 <HAL_RCC_OscConfig+0x4f4>)
 8001bec:	6a1b      	ldr	r3, [r3, #32]
 8001bee:	4a66      	ldr	r2, [pc, #408]	; (8001d88 <HAL_RCC_OscConfig+0x4f4>)
 8001bf0:	f023 0301 	bic.w	r3, r3, #1
 8001bf4:	6213      	str	r3, [r2, #32]
 8001bf6:	4b64      	ldr	r3, [pc, #400]	; (8001d88 <HAL_RCC_OscConfig+0x4f4>)
 8001bf8:	6a1b      	ldr	r3, [r3, #32]
 8001bfa:	4a63      	ldr	r2, [pc, #396]	; (8001d88 <HAL_RCC_OscConfig+0x4f4>)
 8001bfc:	f023 0304 	bic.w	r3, r3, #4
 8001c00:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	68db      	ldr	r3, [r3, #12]
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d015      	beq.n	8001c36 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c0a:	f7fe fc79 	bl	8000500 <HAL_GetTick>
 8001c0e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c10:	e00a      	b.n	8001c28 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c12:	f7fe fc75 	bl	8000500 <HAL_GetTick>
 8001c16:	4602      	mov	r2, r0
 8001c18:	693b      	ldr	r3, [r7, #16]
 8001c1a:	1ad3      	subs	r3, r2, r3
 8001c1c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c20:	4293      	cmp	r3, r2
 8001c22:	d901      	bls.n	8001c28 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001c24:	2303      	movs	r3, #3
 8001c26:	e0ab      	b.n	8001d80 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c28:	4b57      	ldr	r3, [pc, #348]	; (8001d88 <HAL_RCC_OscConfig+0x4f4>)
 8001c2a:	6a1b      	ldr	r3, [r3, #32]
 8001c2c:	f003 0302 	and.w	r3, r3, #2
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d0ee      	beq.n	8001c12 <HAL_RCC_OscConfig+0x37e>
 8001c34:	e014      	b.n	8001c60 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c36:	f7fe fc63 	bl	8000500 <HAL_GetTick>
 8001c3a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c3c:	e00a      	b.n	8001c54 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c3e:	f7fe fc5f 	bl	8000500 <HAL_GetTick>
 8001c42:	4602      	mov	r2, r0
 8001c44:	693b      	ldr	r3, [r7, #16]
 8001c46:	1ad3      	subs	r3, r2, r3
 8001c48:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c4c:	4293      	cmp	r3, r2
 8001c4e:	d901      	bls.n	8001c54 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001c50:	2303      	movs	r3, #3
 8001c52:	e095      	b.n	8001d80 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c54:	4b4c      	ldr	r3, [pc, #304]	; (8001d88 <HAL_RCC_OscConfig+0x4f4>)
 8001c56:	6a1b      	ldr	r3, [r3, #32]
 8001c58:	f003 0302 	and.w	r3, r3, #2
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d1ee      	bne.n	8001c3e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001c60:	7dfb      	ldrb	r3, [r7, #23]
 8001c62:	2b01      	cmp	r3, #1
 8001c64:	d105      	bne.n	8001c72 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c66:	4b48      	ldr	r3, [pc, #288]	; (8001d88 <HAL_RCC_OscConfig+0x4f4>)
 8001c68:	69db      	ldr	r3, [r3, #28]
 8001c6a:	4a47      	ldr	r2, [pc, #284]	; (8001d88 <HAL_RCC_OscConfig+0x4f4>)
 8001c6c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001c70:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	69db      	ldr	r3, [r3, #28]
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	f000 8081 	beq.w	8001d7e <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001c7c:	4b42      	ldr	r3, [pc, #264]	; (8001d88 <HAL_RCC_OscConfig+0x4f4>)
 8001c7e:	685b      	ldr	r3, [r3, #4]
 8001c80:	f003 030c 	and.w	r3, r3, #12
 8001c84:	2b08      	cmp	r3, #8
 8001c86:	d061      	beq.n	8001d4c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	69db      	ldr	r3, [r3, #28]
 8001c8c:	2b02      	cmp	r3, #2
 8001c8e:	d146      	bne.n	8001d1e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c90:	4b3f      	ldr	r3, [pc, #252]	; (8001d90 <HAL_RCC_OscConfig+0x4fc>)
 8001c92:	2200      	movs	r2, #0
 8001c94:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c96:	f7fe fc33 	bl	8000500 <HAL_GetTick>
 8001c9a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c9c:	e008      	b.n	8001cb0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c9e:	f7fe fc2f 	bl	8000500 <HAL_GetTick>
 8001ca2:	4602      	mov	r2, r0
 8001ca4:	693b      	ldr	r3, [r7, #16]
 8001ca6:	1ad3      	subs	r3, r2, r3
 8001ca8:	2b02      	cmp	r3, #2
 8001caa:	d901      	bls.n	8001cb0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001cac:	2303      	movs	r3, #3
 8001cae:	e067      	b.n	8001d80 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001cb0:	4b35      	ldr	r3, [pc, #212]	; (8001d88 <HAL_RCC_OscConfig+0x4f4>)
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d1f0      	bne.n	8001c9e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	6a1b      	ldr	r3, [r3, #32]
 8001cc0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001cc4:	d108      	bne.n	8001cd8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001cc6:	4b30      	ldr	r3, [pc, #192]	; (8001d88 <HAL_RCC_OscConfig+0x4f4>)
 8001cc8:	685b      	ldr	r3, [r3, #4]
 8001cca:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	689b      	ldr	r3, [r3, #8]
 8001cd2:	492d      	ldr	r1, [pc, #180]	; (8001d88 <HAL_RCC_OscConfig+0x4f4>)
 8001cd4:	4313      	orrs	r3, r2
 8001cd6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001cd8:	4b2b      	ldr	r3, [pc, #172]	; (8001d88 <HAL_RCC_OscConfig+0x4f4>)
 8001cda:	685b      	ldr	r3, [r3, #4]
 8001cdc:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	6a19      	ldr	r1, [r3, #32]
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ce8:	430b      	orrs	r3, r1
 8001cea:	4927      	ldr	r1, [pc, #156]	; (8001d88 <HAL_RCC_OscConfig+0x4f4>)
 8001cec:	4313      	orrs	r3, r2
 8001cee:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001cf0:	4b27      	ldr	r3, [pc, #156]	; (8001d90 <HAL_RCC_OscConfig+0x4fc>)
 8001cf2:	2201      	movs	r2, #1
 8001cf4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cf6:	f7fe fc03 	bl	8000500 <HAL_GetTick>
 8001cfa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001cfc:	e008      	b.n	8001d10 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001cfe:	f7fe fbff 	bl	8000500 <HAL_GetTick>
 8001d02:	4602      	mov	r2, r0
 8001d04:	693b      	ldr	r3, [r7, #16]
 8001d06:	1ad3      	subs	r3, r2, r3
 8001d08:	2b02      	cmp	r3, #2
 8001d0a:	d901      	bls.n	8001d10 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001d0c:	2303      	movs	r3, #3
 8001d0e:	e037      	b.n	8001d80 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001d10:	4b1d      	ldr	r3, [pc, #116]	; (8001d88 <HAL_RCC_OscConfig+0x4f4>)
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d0f0      	beq.n	8001cfe <HAL_RCC_OscConfig+0x46a>
 8001d1c:	e02f      	b.n	8001d7e <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d1e:	4b1c      	ldr	r3, [pc, #112]	; (8001d90 <HAL_RCC_OscConfig+0x4fc>)
 8001d20:	2200      	movs	r2, #0
 8001d22:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d24:	f7fe fbec 	bl	8000500 <HAL_GetTick>
 8001d28:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d2a:	e008      	b.n	8001d3e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d2c:	f7fe fbe8 	bl	8000500 <HAL_GetTick>
 8001d30:	4602      	mov	r2, r0
 8001d32:	693b      	ldr	r3, [r7, #16]
 8001d34:	1ad3      	subs	r3, r2, r3
 8001d36:	2b02      	cmp	r3, #2
 8001d38:	d901      	bls.n	8001d3e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001d3a:	2303      	movs	r3, #3
 8001d3c:	e020      	b.n	8001d80 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d3e:	4b12      	ldr	r3, [pc, #72]	; (8001d88 <HAL_RCC_OscConfig+0x4f4>)
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d1f0      	bne.n	8001d2c <HAL_RCC_OscConfig+0x498>
 8001d4a:	e018      	b.n	8001d7e <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	69db      	ldr	r3, [r3, #28]
 8001d50:	2b01      	cmp	r3, #1
 8001d52:	d101      	bne.n	8001d58 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001d54:	2301      	movs	r3, #1
 8001d56:	e013      	b.n	8001d80 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001d58:	4b0b      	ldr	r3, [pc, #44]	; (8001d88 <HAL_RCC_OscConfig+0x4f4>)
 8001d5a:	685b      	ldr	r3, [r3, #4]
 8001d5c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	6a1b      	ldr	r3, [r3, #32]
 8001d68:	429a      	cmp	r2, r3
 8001d6a:	d106      	bne.n	8001d7a <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d76:	429a      	cmp	r2, r3
 8001d78:	d001      	beq.n	8001d7e <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001d7a:	2301      	movs	r3, #1
 8001d7c:	e000      	b.n	8001d80 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001d7e:	2300      	movs	r3, #0
}
 8001d80:	4618      	mov	r0, r3
 8001d82:	3718      	adds	r7, #24
 8001d84:	46bd      	mov	sp, r7
 8001d86:	bd80      	pop	{r7, pc}
 8001d88:	40021000 	.word	0x40021000
 8001d8c:	40007000 	.word	0x40007000
 8001d90:	42420060 	.word	0x42420060

08001d94 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b084      	sub	sp, #16
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
 8001d9c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d101      	bne.n	8001da8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001da4:	2301      	movs	r3, #1
 8001da6:	e0d0      	b.n	8001f4a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001da8:	4b6a      	ldr	r3, [pc, #424]	; (8001f54 <HAL_RCC_ClockConfig+0x1c0>)
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	f003 0307 	and.w	r3, r3, #7
 8001db0:	683a      	ldr	r2, [r7, #0]
 8001db2:	429a      	cmp	r2, r3
 8001db4:	d910      	bls.n	8001dd8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001db6:	4b67      	ldr	r3, [pc, #412]	; (8001f54 <HAL_RCC_ClockConfig+0x1c0>)
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f023 0207 	bic.w	r2, r3, #7
 8001dbe:	4965      	ldr	r1, [pc, #404]	; (8001f54 <HAL_RCC_ClockConfig+0x1c0>)
 8001dc0:	683b      	ldr	r3, [r7, #0]
 8001dc2:	4313      	orrs	r3, r2
 8001dc4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001dc6:	4b63      	ldr	r3, [pc, #396]	; (8001f54 <HAL_RCC_ClockConfig+0x1c0>)
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	f003 0307 	and.w	r3, r3, #7
 8001dce:	683a      	ldr	r2, [r7, #0]
 8001dd0:	429a      	cmp	r2, r3
 8001dd2:	d001      	beq.n	8001dd8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001dd4:	2301      	movs	r3, #1
 8001dd6:	e0b8      	b.n	8001f4a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	f003 0302 	and.w	r3, r3, #2
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d020      	beq.n	8001e26 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	f003 0304 	and.w	r3, r3, #4
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d005      	beq.n	8001dfc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001df0:	4b59      	ldr	r3, [pc, #356]	; (8001f58 <HAL_RCC_ClockConfig+0x1c4>)
 8001df2:	685b      	ldr	r3, [r3, #4]
 8001df4:	4a58      	ldr	r2, [pc, #352]	; (8001f58 <HAL_RCC_ClockConfig+0x1c4>)
 8001df6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001dfa:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	f003 0308 	and.w	r3, r3, #8
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d005      	beq.n	8001e14 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001e08:	4b53      	ldr	r3, [pc, #332]	; (8001f58 <HAL_RCC_ClockConfig+0x1c4>)
 8001e0a:	685b      	ldr	r3, [r3, #4]
 8001e0c:	4a52      	ldr	r2, [pc, #328]	; (8001f58 <HAL_RCC_ClockConfig+0x1c4>)
 8001e0e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001e12:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e14:	4b50      	ldr	r3, [pc, #320]	; (8001f58 <HAL_RCC_ClockConfig+0x1c4>)
 8001e16:	685b      	ldr	r3, [r3, #4]
 8001e18:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	689b      	ldr	r3, [r3, #8]
 8001e20:	494d      	ldr	r1, [pc, #308]	; (8001f58 <HAL_RCC_ClockConfig+0x1c4>)
 8001e22:	4313      	orrs	r3, r2
 8001e24:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f003 0301 	and.w	r3, r3, #1
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d040      	beq.n	8001eb4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	685b      	ldr	r3, [r3, #4]
 8001e36:	2b01      	cmp	r3, #1
 8001e38:	d107      	bne.n	8001e4a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e3a:	4b47      	ldr	r3, [pc, #284]	; (8001f58 <HAL_RCC_ClockConfig+0x1c4>)
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d115      	bne.n	8001e72 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e46:	2301      	movs	r3, #1
 8001e48:	e07f      	b.n	8001f4a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	685b      	ldr	r3, [r3, #4]
 8001e4e:	2b02      	cmp	r3, #2
 8001e50:	d107      	bne.n	8001e62 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e52:	4b41      	ldr	r3, [pc, #260]	; (8001f58 <HAL_RCC_ClockConfig+0x1c4>)
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d109      	bne.n	8001e72 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e5e:	2301      	movs	r3, #1
 8001e60:	e073      	b.n	8001f4a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e62:	4b3d      	ldr	r3, [pc, #244]	; (8001f58 <HAL_RCC_ClockConfig+0x1c4>)
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f003 0302 	and.w	r3, r3, #2
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d101      	bne.n	8001e72 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e6e:	2301      	movs	r3, #1
 8001e70:	e06b      	b.n	8001f4a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001e72:	4b39      	ldr	r3, [pc, #228]	; (8001f58 <HAL_RCC_ClockConfig+0x1c4>)
 8001e74:	685b      	ldr	r3, [r3, #4]
 8001e76:	f023 0203 	bic.w	r2, r3, #3
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	685b      	ldr	r3, [r3, #4]
 8001e7e:	4936      	ldr	r1, [pc, #216]	; (8001f58 <HAL_RCC_ClockConfig+0x1c4>)
 8001e80:	4313      	orrs	r3, r2
 8001e82:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001e84:	f7fe fb3c 	bl	8000500 <HAL_GetTick>
 8001e88:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e8a:	e00a      	b.n	8001ea2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e8c:	f7fe fb38 	bl	8000500 <HAL_GetTick>
 8001e90:	4602      	mov	r2, r0
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	1ad3      	subs	r3, r2, r3
 8001e96:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e9a:	4293      	cmp	r3, r2
 8001e9c:	d901      	bls.n	8001ea2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001e9e:	2303      	movs	r3, #3
 8001ea0:	e053      	b.n	8001f4a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ea2:	4b2d      	ldr	r3, [pc, #180]	; (8001f58 <HAL_RCC_ClockConfig+0x1c4>)
 8001ea4:	685b      	ldr	r3, [r3, #4]
 8001ea6:	f003 020c 	and.w	r2, r3, #12
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	685b      	ldr	r3, [r3, #4]
 8001eae:	009b      	lsls	r3, r3, #2
 8001eb0:	429a      	cmp	r2, r3
 8001eb2:	d1eb      	bne.n	8001e8c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001eb4:	4b27      	ldr	r3, [pc, #156]	; (8001f54 <HAL_RCC_ClockConfig+0x1c0>)
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	f003 0307 	and.w	r3, r3, #7
 8001ebc:	683a      	ldr	r2, [r7, #0]
 8001ebe:	429a      	cmp	r2, r3
 8001ec0:	d210      	bcs.n	8001ee4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ec2:	4b24      	ldr	r3, [pc, #144]	; (8001f54 <HAL_RCC_ClockConfig+0x1c0>)
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	f023 0207 	bic.w	r2, r3, #7
 8001eca:	4922      	ldr	r1, [pc, #136]	; (8001f54 <HAL_RCC_ClockConfig+0x1c0>)
 8001ecc:	683b      	ldr	r3, [r7, #0]
 8001ece:	4313      	orrs	r3, r2
 8001ed0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ed2:	4b20      	ldr	r3, [pc, #128]	; (8001f54 <HAL_RCC_ClockConfig+0x1c0>)
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f003 0307 	and.w	r3, r3, #7
 8001eda:	683a      	ldr	r2, [r7, #0]
 8001edc:	429a      	cmp	r2, r3
 8001ede:	d001      	beq.n	8001ee4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001ee0:	2301      	movs	r3, #1
 8001ee2:	e032      	b.n	8001f4a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	f003 0304 	and.w	r3, r3, #4
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d008      	beq.n	8001f02 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001ef0:	4b19      	ldr	r3, [pc, #100]	; (8001f58 <HAL_RCC_ClockConfig+0x1c4>)
 8001ef2:	685b      	ldr	r3, [r3, #4]
 8001ef4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	68db      	ldr	r3, [r3, #12]
 8001efc:	4916      	ldr	r1, [pc, #88]	; (8001f58 <HAL_RCC_ClockConfig+0x1c4>)
 8001efe:	4313      	orrs	r3, r2
 8001f00:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f003 0308 	and.w	r3, r3, #8
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d009      	beq.n	8001f22 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001f0e:	4b12      	ldr	r3, [pc, #72]	; (8001f58 <HAL_RCC_ClockConfig+0x1c4>)
 8001f10:	685b      	ldr	r3, [r3, #4]
 8001f12:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	691b      	ldr	r3, [r3, #16]
 8001f1a:	00db      	lsls	r3, r3, #3
 8001f1c:	490e      	ldr	r1, [pc, #56]	; (8001f58 <HAL_RCC_ClockConfig+0x1c4>)
 8001f1e:	4313      	orrs	r3, r2
 8001f20:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001f22:	f000 f821 	bl	8001f68 <HAL_RCC_GetSysClockFreq>
 8001f26:	4601      	mov	r1, r0
 8001f28:	4b0b      	ldr	r3, [pc, #44]	; (8001f58 <HAL_RCC_ClockConfig+0x1c4>)
 8001f2a:	685b      	ldr	r3, [r3, #4]
 8001f2c:	091b      	lsrs	r3, r3, #4
 8001f2e:	f003 030f 	and.w	r3, r3, #15
 8001f32:	4a0a      	ldr	r2, [pc, #40]	; (8001f5c <HAL_RCC_ClockConfig+0x1c8>)
 8001f34:	5cd3      	ldrb	r3, [r2, r3]
 8001f36:	fa21 f303 	lsr.w	r3, r1, r3
 8001f3a:	4a09      	ldr	r2, [pc, #36]	; (8001f60 <HAL_RCC_ClockConfig+0x1cc>)
 8001f3c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001f3e:	4b09      	ldr	r3, [pc, #36]	; (8001f64 <HAL_RCC_ClockConfig+0x1d0>)
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	4618      	mov	r0, r3
 8001f44:	f7fe fa9a 	bl	800047c <HAL_InitTick>

  return HAL_OK;
 8001f48:	2300      	movs	r3, #0
}
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	3710      	adds	r7, #16
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	bd80      	pop	{r7, pc}
 8001f52:	bf00      	nop
 8001f54:	40022000 	.word	0x40022000
 8001f58:	40021000 	.word	0x40021000
 8001f5c:	080063c0 	.word	0x080063c0
 8001f60:	20000000 	.word	0x20000000
 8001f64:	20000004 	.word	0x20000004

08001f68 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f68:	b490      	push	{r4, r7}
 8001f6a:	b08a      	sub	sp, #40	; 0x28
 8001f6c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001f6e:	4b2a      	ldr	r3, [pc, #168]	; (8002018 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001f70:	1d3c      	adds	r4, r7, #4
 8001f72:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001f74:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001f78:	4b28      	ldr	r3, [pc, #160]	; (800201c <HAL_RCC_GetSysClockFreq+0xb4>)
 8001f7a:	881b      	ldrh	r3, [r3, #0]
 8001f7c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001f7e:	2300      	movs	r3, #0
 8001f80:	61fb      	str	r3, [r7, #28]
 8001f82:	2300      	movs	r3, #0
 8001f84:	61bb      	str	r3, [r7, #24]
 8001f86:	2300      	movs	r3, #0
 8001f88:	627b      	str	r3, [r7, #36]	; 0x24
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001f8e:	2300      	movs	r3, #0
 8001f90:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001f92:	4b23      	ldr	r3, [pc, #140]	; (8002020 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001f94:	685b      	ldr	r3, [r3, #4]
 8001f96:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001f98:	69fb      	ldr	r3, [r7, #28]
 8001f9a:	f003 030c 	and.w	r3, r3, #12
 8001f9e:	2b04      	cmp	r3, #4
 8001fa0:	d002      	beq.n	8001fa8 <HAL_RCC_GetSysClockFreq+0x40>
 8001fa2:	2b08      	cmp	r3, #8
 8001fa4:	d003      	beq.n	8001fae <HAL_RCC_GetSysClockFreq+0x46>
 8001fa6:	e02d      	b.n	8002004 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001fa8:	4b1e      	ldr	r3, [pc, #120]	; (8002024 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001faa:	623b      	str	r3, [r7, #32]
      break;
 8001fac:	e02d      	b.n	800200a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001fae:	69fb      	ldr	r3, [r7, #28]
 8001fb0:	0c9b      	lsrs	r3, r3, #18
 8001fb2:	f003 030f 	and.w	r3, r3, #15
 8001fb6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001fba:	4413      	add	r3, r2
 8001fbc:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001fc0:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001fc2:	69fb      	ldr	r3, [r7, #28]
 8001fc4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d013      	beq.n	8001ff4 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001fcc:	4b14      	ldr	r3, [pc, #80]	; (8002020 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001fce:	685b      	ldr	r3, [r3, #4]
 8001fd0:	0c5b      	lsrs	r3, r3, #17
 8001fd2:	f003 0301 	and.w	r3, r3, #1
 8001fd6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001fda:	4413      	add	r3, r2
 8001fdc:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001fe0:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001fe2:	697b      	ldr	r3, [r7, #20]
 8001fe4:	4a0f      	ldr	r2, [pc, #60]	; (8002024 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001fe6:	fb02 f203 	mul.w	r2, r2, r3
 8001fea:	69bb      	ldr	r3, [r7, #24]
 8001fec:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ff0:	627b      	str	r3, [r7, #36]	; 0x24
 8001ff2:	e004      	b.n	8001ffe <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001ff4:	697b      	ldr	r3, [r7, #20]
 8001ff6:	4a0c      	ldr	r2, [pc, #48]	; (8002028 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001ff8:	fb02 f303 	mul.w	r3, r2, r3
 8001ffc:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001ffe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002000:	623b      	str	r3, [r7, #32]
      break;
 8002002:	e002      	b.n	800200a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002004:	4b07      	ldr	r3, [pc, #28]	; (8002024 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002006:	623b      	str	r3, [r7, #32]
      break;
 8002008:	bf00      	nop
    }
  }
  return sysclockfreq;
 800200a:	6a3b      	ldr	r3, [r7, #32]
}
 800200c:	4618      	mov	r0, r3
 800200e:	3728      	adds	r7, #40	; 0x28
 8002010:	46bd      	mov	sp, r7
 8002012:	bc90      	pop	{r4, r7}
 8002014:	4770      	bx	lr
 8002016:	bf00      	nop
 8002018:	08006368 	.word	0x08006368
 800201c:	08006378 	.word	0x08006378
 8002020:	40021000 	.word	0x40021000
 8002024:	007a1200 	.word	0x007a1200
 8002028:	003d0900 	.word	0x003d0900

0800202c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800202c:	b480      	push	{r7}
 800202e:	b085      	sub	sp, #20
 8002030:	af00      	add	r7, sp, #0
 8002032:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002034:	4b0a      	ldr	r3, [pc, #40]	; (8002060 <RCC_Delay+0x34>)
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	4a0a      	ldr	r2, [pc, #40]	; (8002064 <RCC_Delay+0x38>)
 800203a:	fba2 2303 	umull	r2, r3, r2, r3
 800203e:	0a5b      	lsrs	r3, r3, #9
 8002040:	687a      	ldr	r2, [r7, #4]
 8002042:	fb02 f303 	mul.w	r3, r2, r3
 8002046:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002048:	bf00      	nop
  }
  while (Delay --);
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	1e5a      	subs	r2, r3, #1
 800204e:	60fa      	str	r2, [r7, #12]
 8002050:	2b00      	cmp	r3, #0
 8002052:	d1f9      	bne.n	8002048 <RCC_Delay+0x1c>
}
 8002054:	bf00      	nop
 8002056:	3714      	adds	r7, #20
 8002058:	46bd      	mov	sp, r7
 800205a:	bc80      	pop	{r7}
 800205c:	4770      	bx	lr
 800205e:	bf00      	nop
 8002060:	20000000 	.word	0x20000000
 8002064:	10624dd3 	.word	0x10624dd3

08002068 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	b086      	sub	sp, #24
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002070:	2300      	movs	r3, #0
 8002072:	613b      	str	r3, [r7, #16]
 8002074:	2300      	movs	r3, #0
 8002076:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	f003 0301 	and.w	r3, r3, #1
 8002080:	2b00      	cmp	r3, #0
 8002082:	d07d      	beq.n	8002180 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8002084:	2300      	movs	r3, #0
 8002086:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002088:	4b4f      	ldr	r3, [pc, #316]	; (80021c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800208a:	69db      	ldr	r3, [r3, #28]
 800208c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002090:	2b00      	cmp	r3, #0
 8002092:	d10d      	bne.n	80020b0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002094:	4b4c      	ldr	r3, [pc, #304]	; (80021c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002096:	69db      	ldr	r3, [r3, #28]
 8002098:	4a4b      	ldr	r2, [pc, #300]	; (80021c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800209a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800209e:	61d3      	str	r3, [r2, #28]
 80020a0:	4b49      	ldr	r3, [pc, #292]	; (80021c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80020a2:	69db      	ldr	r3, [r3, #28]
 80020a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020a8:	60bb      	str	r3, [r7, #8]
 80020aa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80020ac:	2301      	movs	r3, #1
 80020ae:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020b0:	4b46      	ldr	r3, [pc, #280]	; (80021cc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d118      	bne.n	80020ee <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80020bc:	4b43      	ldr	r3, [pc, #268]	; (80021cc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	4a42      	ldr	r2, [pc, #264]	; (80021cc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80020c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020c6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80020c8:	f7fe fa1a 	bl	8000500 <HAL_GetTick>
 80020cc:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020ce:	e008      	b.n	80020e2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80020d0:	f7fe fa16 	bl	8000500 <HAL_GetTick>
 80020d4:	4602      	mov	r2, r0
 80020d6:	693b      	ldr	r3, [r7, #16]
 80020d8:	1ad3      	subs	r3, r2, r3
 80020da:	2b64      	cmp	r3, #100	; 0x64
 80020dc:	d901      	bls.n	80020e2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80020de:	2303      	movs	r3, #3
 80020e0:	e06d      	b.n	80021be <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020e2:	4b3a      	ldr	r3, [pc, #232]	; (80021cc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d0f0      	beq.n	80020d0 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80020ee:	4b36      	ldr	r3, [pc, #216]	; (80021c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80020f0:	6a1b      	ldr	r3, [r3, #32]
 80020f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80020f6:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d02e      	beq.n	800215c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	685b      	ldr	r3, [r3, #4]
 8002102:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002106:	68fa      	ldr	r2, [r7, #12]
 8002108:	429a      	cmp	r2, r3
 800210a:	d027      	beq.n	800215c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800210c:	4b2e      	ldr	r3, [pc, #184]	; (80021c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800210e:	6a1b      	ldr	r3, [r3, #32]
 8002110:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002114:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002116:	4b2e      	ldr	r3, [pc, #184]	; (80021d0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002118:	2201      	movs	r2, #1
 800211a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800211c:	4b2c      	ldr	r3, [pc, #176]	; (80021d0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800211e:	2200      	movs	r2, #0
 8002120:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002122:	4a29      	ldr	r2, [pc, #164]	; (80021c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	f003 0301 	and.w	r3, r3, #1
 800212e:	2b00      	cmp	r3, #0
 8002130:	d014      	beq.n	800215c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002132:	f7fe f9e5 	bl	8000500 <HAL_GetTick>
 8002136:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002138:	e00a      	b.n	8002150 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800213a:	f7fe f9e1 	bl	8000500 <HAL_GetTick>
 800213e:	4602      	mov	r2, r0
 8002140:	693b      	ldr	r3, [r7, #16]
 8002142:	1ad3      	subs	r3, r2, r3
 8002144:	f241 3288 	movw	r2, #5000	; 0x1388
 8002148:	4293      	cmp	r3, r2
 800214a:	d901      	bls.n	8002150 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 800214c:	2303      	movs	r3, #3
 800214e:	e036      	b.n	80021be <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002150:	4b1d      	ldr	r3, [pc, #116]	; (80021c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002152:	6a1b      	ldr	r3, [r3, #32]
 8002154:	f003 0302 	and.w	r3, r3, #2
 8002158:	2b00      	cmp	r3, #0
 800215a:	d0ee      	beq.n	800213a <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800215c:	4b1a      	ldr	r3, [pc, #104]	; (80021c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800215e:	6a1b      	ldr	r3, [r3, #32]
 8002160:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	685b      	ldr	r3, [r3, #4]
 8002168:	4917      	ldr	r1, [pc, #92]	; (80021c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800216a:	4313      	orrs	r3, r2
 800216c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800216e:	7dfb      	ldrb	r3, [r7, #23]
 8002170:	2b01      	cmp	r3, #1
 8002172:	d105      	bne.n	8002180 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002174:	4b14      	ldr	r3, [pc, #80]	; (80021c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002176:	69db      	ldr	r3, [r3, #28]
 8002178:	4a13      	ldr	r2, [pc, #76]	; (80021c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800217a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800217e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f003 0302 	and.w	r3, r3, #2
 8002188:	2b00      	cmp	r3, #0
 800218a:	d008      	beq.n	800219e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800218c:	4b0e      	ldr	r3, [pc, #56]	; (80021c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800218e:	685b      	ldr	r3, [r3, #4]
 8002190:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	689b      	ldr	r3, [r3, #8]
 8002198:	490b      	ldr	r1, [pc, #44]	; (80021c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800219a:	4313      	orrs	r3, r2
 800219c:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f003 0310 	and.w	r3, r3, #16
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d008      	beq.n	80021bc <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80021aa:	4b07      	ldr	r3, [pc, #28]	; (80021c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80021ac:	685b      	ldr	r3, [r3, #4]
 80021ae:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	68db      	ldr	r3, [r3, #12]
 80021b6:	4904      	ldr	r1, [pc, #16]	; (80021c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80021b8:	4313      	orrs	r3, r2
 80021ba:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80021bc:	2300      	movs	r3, #0
}
 80021be:	4618      	mov	r0, r3
 80021c0:	3718      	adds	r7, #24
 80021c2:	46bd      	mov	sp, r7
 80021c4:	bd80      	pop	{r7, pc}
 80021c6:	bf00      	nop
 80021c8:	40021000 	.word	0x40021000
 80021cc:	40007000 	.word	0x40007000
 80021d0:	42420440 	.word	0x42420440

080021d4 <USB_CoreInit>:
  * @param  cfg : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80021d4:	b084      	sub	sp, #16
 80021d6:	b480      	push	{r7}
 80021d8:	b083      	sub	sp, #12
 80021da:	af00      	add	r7, sp, #0
 80021dc:	6078      	str	r0, [r7, #4]
 80021de:	f107 0014 	add.w	r0, r7, #20
 80021e2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80021e6:	2300      	movs	r3, #0
}
 80021e8:	4618      	mov	r0, r3
 80021ea:	370c      	adds	r7, #12
 80021ec:	46bd      	mov	sp, r7
 80021ee:	bc80      	pop	{r7}
 80021f0:	b004      	add	sp, #16
 80021f2:	4770      	bx	lr

080021f4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 80021f4:	b480      	push	{r7}
 80021f6:	b085      	sub	sp, #20
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	6078      	str	r0, [r7, #4]
  uint16_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80021fc:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8002200:	81fb      	strh	r3, [r7, #14]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR |= winterruptmask;
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002208:	b29a      	uxth	r2, r3
 800220a:	89fb      	ldrh	r3, [r7, #14]
 800220c:	4313      	orrs	r3, r2
 800220e:	b29a      	uxth	r2, r3
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8002216:	2300      	movs	r3, #0
}
 8002218:	4618      	mov	r0, r3
 800221a:	3714      	adds	r7, #20
 800221c:	46bd      	mov	sp, r7
 800221e:	bc80      	pop	{r7}
 8002220:	4770      	bx	lr

08002222 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8002222:	b480      	push	{r7}
 8002224:	b085      	sub	sp, #20
 8002226:	af00      	add	r7, sp, #0
 8002228:	6078      	str	r0, [r7, #4]
  uint16_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800222a:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 800222e:	81fb      	strh	r3, [r7, #14]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= ~winterruptmask;
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002236:	b29b      	uxth	r3, r3
 8002238:	b21a      	sxth	r2, r3
 800223a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800223e:	43db      	mvns	r3, r3
 8002240:	b21b      	sxth	r3, r3
 8002242:	4013      	ands	r3, r2
 8002244:	b21b      	sxth	r3, r3
 8002246:	b29a      	uxth	r2, r3
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800224e:	2300      	movs	r3, #0
}
 8002250:	4618      	mov	r0, r3
 8002252:	3714      	adds	r7, #20
 8002254:	46bd      	mov	sp, r7
 8002256:	bc80      	pop	{r7}
 8002258:	4770      	bx	lr

0800225a <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE: Peripheral mode mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 800225a:	b480      	push	{r7}
 800225c:	b083      	sub	sp, #12
 800225e:	af00      	add	r7, sp, #0
 8002260:	6078      	str	r0, [r7, #4]
 8002262:	460b      	mov	r3, r1
 8002264:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8002266:	2300      	movs	r3, #0
}
 8002268:	4618      	mov	r0, r3
 800226a:	370c      	adds	r7, #12
 800226c:	46bd      	mov	sp, r7
 800226e:	bc80      	pop	{r7}
 8002270:	4770      	bx	lr

08002272 <USB_DevInit>:
  * @param  cfg  : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8002272:	b084      	sub	sp, #16
 8002274:	b580      	push	{r7, lr}
 8002276:	b082      	sub	sp, #8
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
 800227c:	f107 0014 	add.w	r0, r7, #20
 8002280:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /*CNTR_FRES = 1*/
  USBx->CNTR = USB_CNTR_FRES;
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	2201      	movs	r2, #1
 8002288:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*CNTR_FRES = 0*/
  USBx->CNTR = 0;
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	2200      	movs	r2, #0
 8002290:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*Clear pending interrupts*/
  USBx->ISTR = 0;
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	2200      	movs	r2, #0
 8002298:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	2200      	movs	r2, #0
 80022a0:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  /* Enable USB Device Interrupt mask */
  (void)USB_EnableGlobalInt(USBx);
 80022a4:	6878      	ldr	r0, [r7, #4]
 80022a6:	f7ff ffa5 	bl	80021f4 <USB_EnableGlobalInt>

  return HAL_OK;
 80022aa:	2300      	movs	r3, #0
}
 80022ac:	4618      	mov	r0, r3
 80022ae:	3708      	adds	r7, #8
 80022b0:	46bd      	mov	sp, r7
 80022b2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80022b6:	b004      	add	sp, #16
 80022b8:	4770      	bx	lr

080022ba <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_TypeDef *USBx, uint32_t num)
{
 80022ba:	b480      	push	{r7}
 80022bc:	b083      	sub	sp, #12
 80022be:	af00      	add	r7, sp, #0
 80022c0:	6078      	str	r0, [r7, #4]
 80022c2:	6039      	str	r1, [r7, #0]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80022c4:	2300      	movs	r3, #0
}
 80022c6:	4618      	mov	r0, r3
 80022c8:	370c      	adds	r7, #12
 80022ca:	46bd      	mov	sp, r7
 80022cc:	bc80      	pop	{r7}
 80022ce:	4770      	bx	lr

080022d0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_TypeDef *USBx)
{
 80022d0:	b480      	push	{r7}
 80022d2:	b083      	sub	sp, #12
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80022d8:	2300      	movs	r3, #0
}
 80022da:	4618      	mov	r0, r3
 80022dc:	370c      	adds	r7, #12
 80022de:	46bd      	mov	sp, r7
 80022e0:	bc80      	pop	{r7}
 80022e2:	4770      	bx	lr

080022e4 <USB_ActivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80022e4:	b490      	push	{r4, r7}
 80022e6:	b084      	sub	sp, #16
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
 80022ec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 80022ee:	2300      	movs	r3, #0
 80022f0:	73fb      	strb	r3, [r7, #15]
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80022f2:	687a      	ldr	r2, [r7, #4]
 80022f4:	683b      	ldr	r3, [r7, #0]
 80022f6:	781b      	ldrb	r3, [r3, #0]
 80022f8:	009b      	lsls	r3, r3, #2
 80022fa:	4413      	add	r3, r2
 80022fc:	881b      	ldrh	r3, [r3, #0]
 80022fe:	b29b      	uxth	r3, r3
 8002300:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8002304:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002308:	81bb      	strh	r3, [r7, #12]

  /* initialize Endpoint */
  switch (ep->type)
 800230a:	683b      	ldr	r3, [r7, #0]
 800230c:	78db      	ldrb	r3, [r3, #3]
 800230e:	2b03      	cmp	r3, #3
 8002310:	d819      	bhi.n	8002346 <USB_ActivateEndpoint+0x62>
 8002312:	a201      	add	r2, pc, #4	; (adr r2, 8002318 <USB_ActivateEndpoint+0x34>)
 8002314:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002318:	08002329 	.word	0x08002329
 800231c:	0800233d 	.word	0x0800233d
 8002320:	0800234d 	.word	0x0800234d
 8002324:	08002333 	.word	0x08002333
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8002328:	89bb      	ldrh	r3, [r7, #12]
 800232a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800232e:	81bb      	strh	r3, [r7, #12]
      break;
 8002330:	e00d      	b.n	800234e <USB_ActivateEndpoint+0x6a>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8002332:	89bb      	ldrh	r3, [r7, #12]
 8002334:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8002338:	81bb      	strh	r3, [r7, #12]
      break;
 800233a:	e008      	b.n	800234e <USB_ActivateEndpoint+0x6a>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 800233c:	89bb      	ldrh	r3, [r7, #12]
 800233e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002342:	81bb      	strh	r3, [r7, #12]
      break;
 8002344:	e003      	b.n	800234e <USB_ActivateEndpoint+0x6a>

    default:
      ret = HAL_ERROR;
 8002346:	2301      	movs	r3, #1
 8002348:	73fb      	strb	r3, [r7, #15]
      break;
 800234a:	e000      	b.n	800234e <USB_ActivateEndpoint+0x6a>
      break;
 800234c:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX);
 800234e:	687a      	ldr	r2, [r7, #4]
 8002350:	683b      	ldr	r3, [r7, #0]
 8002352:	781b      	ldrb	r3, [r3, #0]
 8002354:	009b      	lsls	r3, r3, #2
 8002356:	441a      	add	r2, r3
 8002358:	89bb      	ldrh	r3, [r7, #12]
 800235a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800235e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002362:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002366:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800236a:	b29b      	uxth	r3, r3
 800236c:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800236e:	687a      	ldr	r2, [r7, #4]
 8002370:	683b      	ldr	r3, [r7, #0]
 8002372:	781b      	ldrb	r3, [r3, #0]
 8002374:	009b      	lsls	r3, r3, #2
 8002376:	4413      	add	r3, r2
 8002378:	881b      	ldrh	r3, [r3, #0]
 800237a:	b29b      	uxth	r3, r3
 800237c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002380:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002384:	b29a      	uxth	r2, r3
 8002386:	683b      	ldr	r3, [r7, #0]
 8002388:	781b      	ldrb	r3, [r3, #0]
 800238a:	b29b      	uxth	r3, r3
 800238c:	4313      	orrs	r3, r2
 800238e:	b29c      	uxth	r4, r3
 8002390:	687a      	ldr	r2, [r7, #4]
 8002392:	683b      	ldr	r3, [r7, #0]
 8002394:	781b      	ldrb	r3, [r3, #0]
 8002396:	009b      	lsls	r3, r3, #2
 8002398:	441a      	add	r2, r3
 800239a:	4b8a      	ldr	r3, [pc, #552]	; (80025c4 <USB_ActivateEndpoint+0x2e0>)
 800239c:	4323      	orrs	r3, r4
 800239e:	b29b      	uxth	r3, r3
 80023a0:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 80023a2:	683b      	ldr	r3, [r7, #0]
 80023a4:	7b1b      	ldrb	r3, [r3, #12]
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	f040 8112 	bne.w	80025d0 <USB_ActivateEndpoint+0x2ec>
  {
    if (ep->is_in != 0U)
 80023ac:	683b      	ldr	r3, [r7, #0]
 80023ae:	785b      	ldrb	r3, [r3, #1]
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d067      	beq.n	8002484 <USB_ActivateEndpoint+0x1a0>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80023b4:	687c      	ldr	r4, [r7, #4]
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80023bc:	b29b      	uxth	r3, r3
 80023be:	441c      	add	r4, r3
 80023c0:	683b      	ldr	r3, [r7, #0]
 80023c2:	781b      	ldrb	r3, [r3, #0]
 80023c4:	011b      	lsls	r3, r3, #4
 80023c6:	4423      	add	r3, r4
 80023c8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80023cc:	461c      	mov	r4, r3
 80023ce:	683b      	ldr	r3, [r7, #0]
 80023d0:	88db      	ldrh	r3, [r3, #6]
 80023d2:	085b      	lsrs	r3, r3, #1
 80023d4:	b29b      	uxth	r3, r3
 80023d6:	005b      	lsls	r3, r3, #1
 80023d8:	b29b      	uxth	r3, r3
 80023da:	8023      	strh	r3, [r4, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80023dc:	687a      	ldr	r2, [r7, #4]
 80023de:	683b      	ldr	r3, [r7, #0]
 80023e0:	781b      	ldrb	r3, [r3, #0]
 80023e2:	009b      	lsls	r3, r3, #2
 80023e4:	4413      	add	r3, r2
 80023e6:	881b      	ldrh	r3, [r3, #0]
 80023e8:	b29c      	uxth	r4, r3
 80023ea:	4623      	mov	r3, r4
 80023ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d014      	beq.n	800241e <USB_ActivateEndpoint+0x13a>
 80023f4:	687a      	ldr	r2, [r7, #4]
 80023f6:	683b      	ldr	r3, [r7, #0]
 80023f8:	781b      	ldrb	r3, [r3, #0]
 80023fa:	009b      	lsls	r3, r3, #2
 80023fc:	4413      	add	r3, r2
 80023fe:	881b      	ldrh	r3, [r3, #0]
 8002400:	b29b      	uxth	r3, r3
 8002402:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002406:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800240a:	b29c      	uxth	r4, r3
 800240c:	687a      	ldr	r2, [r7, #4]
 800240e:	683b      	ldr	r3, [r7, #0]
 8002410:	781b      	ldrb	r3, [r3, #0]
 8002412:	009b      	lsls	r3, r3, #2
 8002414:	441a      	add	r2, r3
 8002416:	4b6c      	ldr	r3, [pc, #432]	; (80025c8 <USB_ActivateEndpoint+0x2e4>)
 8002418:	4323      	orrs	r3, r4
 800241a:	b29b      	uxth	r3, r3
 800241c:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800241e:	683b      	ldr	r3, [r7, #0]
 8002420:	78db      	ldrb	r3, [r3, #3]
 8002422:	2b01      	cmp	r3, #1
 8002424:	d018      	beq.n	8002458 <USB_ActivateEndpoint+0x174>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8002426:	687a      	ldr	r2, [r7, #4]
 8002428:	683b      	ldr	r3, [r7, #0]
 800242a:	781b      	ldrb	r3, [r3, #0]
 800242c:	009b      	lsls	r3, r3, #2
 800242e:	4413      	add	r3, r2
 8002430:	881b      	ldrh	r3, [r3, #0]
 8002432:	b29b      	uxth	r3, r3
 8002434:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002438:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800243c:	b29c      	uxth	r4, r3
 800243e:	f084 0320 	eor.w	r3, r4, #32
 8002442:	b29c      	uxth	r4, r3
 8002444:	687a      	ldr	r2, [r7, #4]
 8002446:	683b      	ldr	r3, [r7, #0]
 8002448:	781b      	ldrb	r3, [r3, #0]
 800244a:	009b      	lsls	r3, r3, #2
 800244c:	441a      	add	r2, r3
 800244e:	4b5d      	ldr	r3, [pc, #372]	; (80025c4 <USB_ActivateEndpoint+0x2e0>)
 8002450:	4323      	orrs	r3, r4
 8002452:	b29b      	uxth	r3, r3
 8002454:	8013      	strh	r3, [r2, #0]
 8002456:	e22b      	b.n	80028b0 <USB_ActivateEndpoint+0x5cc>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8002458:	687a      	ldr	r2, [r7, #4]
 800245a:	683b      	ldr	r3, [r7, #0]
 800245c:	781b      	ldrb	r3, [r3, #0]
 800245e:	009b      	lsls	r3, r3, #2
 8002460:	4413      	add	r3, r2
 8002462:	881b      	ldrh	r3, [r3, #0]
 8002464:	b29b      	uxth	r3, r3
 8002466:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800246a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800246e:	b29c      	uxth	r4, r3
 8002470:	687a      	ldr	r2, [r7, #4]
 8002472:	683b      	ldr	r3, [r7, #0]
 8002474:	781b      	ldrb	r3, [r3, #0]
 8002476:	009b      	lsls	r3, r3, #2
 8002478:	441a      	add	r2, r3
 800247a:	4b52      	ldr	r3, [pc, #328]	; (80025c4 <USB_ActivateEndpoint+0x2e0>)
 800247c:	4323      	orrs	r3, r4
 800247e:	b29b      	uxth	r3, r3
 8002480:	8013      	strh	r3, [r2, #0]
 8002482:	e215      	b.n	80028b0 <USB_ActivateEndpoint+0x5cc>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8002484:	687c      	ldr	r4, [r7, #4]
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800248c:	b29b      	uxth	r3, r3
 800248e:	441c      	add	r4, r3
 8002490:	683b      	ldr	r3, [r7, #0]
 8002492:	781b      	ldrb	r3, [r3, #0]
 8002494:	011b      	lsls	r3, r3, #4
 8002496:	4423      	add	r3, r4
 8002498:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 800249c:	461c      	mov	r4, r3
 800249e:	683b      	ldr	r3, [r7, #0]
 80024a0:	88db      	ldrh	r3, [r3, #6]
 80024a2:	085b      	lsrs	r3, r3, #1
 80024a4:	b29b      	uxth	r3, r3
 80024a6:	005b      	lsls	r3, r3, #1
 80024a8:	b29b      	uxth	r3, r3
 80024aa:	8023      	strh	r3, [r4, #0]
      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80024ac:	687c      	ldr	r4, [r7, #4]
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80024b4:	b29b      	uxth	r3, r3
 80024b6:	441c      	add	r4, r3
 80024b8:	683b      	ldr	r3, [r7, #0]
 80024ba:	781b      	ldrb	r3, [r3, #0]
 80024bc:	011b      	lsls	r3, r3, #4
 80024be:	4423      	add	r3, r4
 80024c0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80024c4:	461c      	mov	r4, r3
 80024c6:	683b      	ldr	r3, [r7, #0]
 80024c8:	691b      	ldr	r3, [r3, #16]
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d10e      	bne.n	80024ec <USB_ActivateEndpoint+0x208>
 80024ce:	8823      	ldrh	r3, [r4, #0]
 80024d0:	b29b      	uxth	r3, r3
 80024d2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80024d6:	b29b      	uxth	r3, r3
 80024d8:	8023      	strh	r3, [r4, #0]
 80024da:	8823      	ldrh	r3, [r4, #0]
 80024dc:	b29b      	uxth	r3, r3
 80024de:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80024e2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80024e6:	b29b      	uxth	r3, r3
 80024e8:	8023      	strh	r3, [r4, #0]
 80024ea:	e02d      	b.n	8002548 <USB_ActivateEndpoint+0x264>
 80024ec:	683b      	ldr	r3, [r7, #0]
 80024ee:	691b      	ldr	r3, [r3, #16]
 80024f0:	2b3e      	cmp	r3, #62	; 0x3e
 80024f2:	d812      	bhi.n	800251a <USB_ActivateEndpoint+0x236>
 80024f4:	683b      	ldr	r3, [r7, #0]
 80024f6:	691b      	ldr	r3, [r3, #16]
 80024f8:	085b      	lsrs	r3, r3, #1
 80024fa:	60bb      	str	r3, [r7, #8]
 80024fc:	683b      	ldr	r3, [r7, #0]
 80024fe:	691b      	ldr	r3, [r3, #16]
 8002500:	f003 0301 	and.w	r3, r3, #1
 8002504:	2b00      	cmp	r3, #0
 8002506:	d002      	beq.n	800250e <USB_ActivateEndpoint+0x22a>
 8002508:	68bb      	ldr	r3, [r7, #8]
 800250a:	3301      	adds	r3, #1
 800250c:	60bb      	str	r3, [r7, #8]
 800250e:	68bb      	ldr	r3, [r7, #8]
 8002510:	b29b      	uxth	r3, r3
 8002512:	029b      	lsls	r3, r3, #10
 8002514:	b29b      	uxth	r3, r3
 8002516:	8023      	strh	r3, [r4, #0]
 8002518:	e016      	b.n	8002548 <USB_ActivateEndpoint+0x264>
 800251a:	683b      	ldr	r3, [r7, #0]
 800251c:	691b      	ldr	r3, [r3, #16]
 800251e:	095b      	lsrs	r3, r3, #5
 8002520:	60bb      	str	r3, [r7, #8]
 8002522:	683b      	ldr	r3, [r7, #0]
 8002524:	691b      	ldr	r3, [r3, #16]
 8002526:	f003 031f 	and.w	r3, r3, #31
 800252a:	2b00      	cmp	r3, #0
 800252c:	d102      	bne.n	8002534 <USB_ActivateEndpoint+0x250>
 800252e:	68bb      	ldr	r3, [r7, #8]
 8002530:	3b01      	subs	r3, #1
 8002532:	60bb      	str	r3, [r7, #8]
 8002534:	68bb      	ldr	r3, [r7, #8]
 8002536:	b29b      	uxth	r3, r3
 8002538:	029b      	lsls	r3, r3, #10
 800253a:	b29b      	uxth	r3, r3
 800253c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002540:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002544:	b29b      	uxth	r3, r3
 8002546:	8023      	strh	r3, [r4, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8002548:	687a      	ldr	r2, [r7, #4]
 800254a:	683b      	ldr	r3, [r7, #0]
 800254c:	781b      	ldrb	r3, [r3, #0]
 800254e:	009b      	lsls	r3, r3, #2
 8002550:	4413      	add	r3, r2
 8002552:	881b      	ldrh	r3, [r3, #0]
 8002554:	b29c      	uxth	r4, r3
 8002556:	4623      	mov	r3, r4
 8002558:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800255c:	2b00      	cmp	r3, #0
 800255e:	d014      	beq.n	800258a <USB_ActivateEndpoint+0x2a6>
 8002560:	687a      	ldr	r2, [r7, #4]
 8002562:	683b      	ldr	r3, [r7, #0]
 8002564:	781b      	ldrb	r3, [r3, #0]
 8002566:	009b      	lsls	r3, r3, #2
 8002568:	4413      	add	r3, r2
 800256a:	881b      	ldrh	r3, [r3, #0]
 800256c:	b29b      	uxth	r3, r3
 800256e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002572:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002576:	b29c      	uxth	r4, r3
 8002578:	687a      	ldr	r2, [r7, #4]
 800257a:	683b      	ldr	r3, [r7, #0]
 800257c:	781b      	ldrb	r3, [r3, #0]
 800257e:	009b      	lsls	r3, r3, #2
 8002580:	441a      	add	r2, r3
 8002582:	4b12      	ldr	r3, [pc, #72]	; (80025cc <USB_ActivateEndpoint+0x2e8>)
 8002584:	4323      	orrs	r3, r4
 8002586:	b29b      	uxth	r3, r3
 8002588:	8013      	strh	r3, [r2, #0]
      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800258a:	687a      	ldr	r2, [r7, #4]
 800258c:	683b      	ldr	r3, [r7, #0]
 800258e:	781b      	ldrb	r3, [r3, #0]
 8002590:	009b      	lsls	r3, r3, #2
 8002592:	4413      	add	r3, r2
 8002594:	881b      	ldrh	r3, [r3, #0]
 8002596:	b29b      	uxth	r3, r3
 8002598:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800259c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80025a0:	b29c      	uxth	r4, r3
 80025a2:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 80025a6:	b29c      	uxth	r4, r3
 80025a8:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 80025ac:	b29c      	uxth	r4, r3
 80025ae:	687a      	ldr	r2, [r7, #4]
 80025b0:	683b      	ldr	r3, [r7, #0]
 80025b2:	781b      	ldrb	r3, [r3, #0]
 80025b4:	009b      	lsls	r3, r3, #2
 80025b6:	441a      	add	r2, r3
 80025b8:	4b02      	ldr	r3, [pc, #8]	; (80025c4 <USB_ActivateEndpoint+0x2e0>)
 80025ba:	4323      	orrs	r3, r4
 80025bc:	b29b      	uxth	r3, r3
 80025be:	8013      	strh	r3, [r2, #0]
 80025c0:	e176      	b.n	80028b0 <USB_ActivateEndpoint+0x5cc>
 80025c2:	bf00      	nop
 80025c4:	ffff8080 	.word	0xffff8080
 80025c8:	ffff80c0 	.word	0xffff80c0
 80025cc:	ffffc080 	.word	0xffffc080
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 80025d0:	687a      	ldr	r2, [r7, #4]
 80025d2:	683b      	ldr	r3, [r7, #0]
 80025d4:	781b      	ldrb	r3, [r3, #0]
 80025d6:	009b      	lsls	r3, r3, #2
 80025d8:	4413      	add	r3, r2
 80025da:	881b      	ldrh	r3, [r3, #0]
 80025dc:	b29b      	uxth	r3, r3
 80025de:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80025e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80025e6:	b29c      	uxth	r4, r3
 80025e8:	687a      	ldr	r2, [r7, #4]
 80025ea:	683b      	ldr	r3, [r7, #0]
 80025ec:	781b      	ldrb	r3, [r3, #0]
 80025ee:	009b      	lsls	r3, r3, #2
 80025f0:	441a      	add	r2, r3
 80025f2:	4b96      	ldr	r3, [pc, #600]	; (800284c <USB_ActivateEndpoint+0x568>)
 80025f4:	4323      	orrs	r3, r4
 80025f6:	b29b      	uxth	r3, r3
 80025f8:	8013      	strh	r3, [r2, #0]
    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 80025fa:	687c      	ldr	r4, [r7, #4]
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002602:	b29b      	uxth	r3, r3
 8002604:	441c      	add	r4, r3
 8002606:	683b      	ldr	r3, [r7, #0]
 8002608:	781b      	ldrb	r3, [r3, #0]
 800260a:	011b      	lsls	r3, r3, #4
 800260c:	4423      	add	r3, r4
 800260e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002612:	461c      	mov	r4, r3
 8002614:	683b      	ldr	r3, [r7, #0]
 8002616:	891b      	ldrh	r3, [r3, #8]
 8002618:	085b      	lsrs	r3, r3, #1
 800261a:	b29b      	uxth	r3, r3
 800261c:	005b      	lsls	r3, r3, #1
 800261e:	b29b      	uxth	r3, r3
 8002620:	8023      	strh	r3, [r4, #0]
 8002622:	687c      	ldr	r4, [r7, #4]
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800262a:	b29b      	uxth	r3, r3
 800262c:	441c      	add	r4, r3
 800262e:	683b      	ldr	r3, [r7, #0]
 8002630:	781b      	ldrb	r3, [r3, #0]
 8002632:	011b      	lsls	r3, r3, #4
 8002634:	4423      	add	r3, r4
 8002636:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 800263a:	461c      	mov	r4, r3
 800263c:	683b      	ldr	r3, [r7, #0]
 800263e:	895b      	ldrh	r3, [r3, #10]
 8002640:	085b      	lsrs	r3, r3, #1
 8002642:	b29b      	uxth	r3, r3
 8002644:	005b      	lsls	r3, r3, #1
 8002646:	b29b      	uxth	r3, r3
 8002648:	8023      	strh	r3, [r4, #0]

    if (ep->is_in == 0U)
 800264a:	683b      	ldr	r3, [r7, #0]
 800264c:	785b      	ldrb	r3, [r3, #1]
 800264e:	2b00      	cmp	r3, #0
 8002650:	f040 8088 	bne.w	8002764 <USB_ActivateEndpoint+0x480>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8002654:	687a      	ldr	r2, [r7, #4]
 8002656:	683b      	ldr	r3, [r7, #0]
 8002658:	781b      	ldrb	r3, [r3, #0]
 800265a:	009b      	lsls	r3, r3, #2
 800265c:	4413      	add	r3, r2
 800265e:	881b      	ldrh	r3, [r3, #0]
 8002660:	b29c      	uxth	r4, r3
 8002662:	4623      	mov	r3, r4
 8002664:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002668:	2b00      	cmp	r3, #0
 800266a:	d014      	beq.n	8002696 <USB_ActivateEndpoint+0x3b2>
 800266c:	687a      	ldr	r2, [r7, #4]
 800266e:	683b      	ldr	r3, [r7, #0]
 8002670:	781b      	ldrb	r3, [r3, #0]
 8002672:	009b      	lsls	r3, r3, #2
 8002674:	4413      	add	r3, r2
 8002676:	881b      	ldrh	r3, [r3, #0]
 8002678:	b29b      	uxth	r3, r3
 800267a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800267e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002682:	b29c      	uxth	r4, r3
 8002684:	687a      	ldr	r2, [r7, #4]
 8002686:	683b      	ldr	r3, [r7, #0]
 8002688:	781b      	ldrb	r3, [r3, #0]
 800268a:	009b      	lsls	r3, r3, #2
 800268c:	441a      	add	r2, r3
 800268e:	4b70      	ldr	r3, [pc, #448]	; (8002850 <USB_ActivateEndpoint+0x56c>)
 8002690:	4323      	orrs	r3, r4
 8002692:	b29b      	uxth	r3, r3
 8002694:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8002696:	687a      	ldr	r2, [r7, #4]
 8002698:	683b      	ldr	r3, [r7, #0]
 800269a:	781b      	ldrb	r3, [r3, #0]
 800269c:	009b      	lsls	r3, r3, #2
 800269e:	4413      	add	r3, r2
 80026a0:	881b      	ldrh	r3, [r3, #0]
 80026a2:	b29c      	uxth	r4, r3
 80026a4:	4623      	mov	r3, r4
 80026a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d014      	beq.n	80026d8 <USB_ActivateEndpoint+0x3f4>
 80026ae:	687a      	ldr	r2, [r7, #4]
 80026b0:	683b      	ldr	r3, [r7, #0]
 80026b2:	781b      	ldrb	r3, [r3, #0]
 80026b4:	009b      	lsls	r3, r3, #2
 80026b6:	4413      	add	r3, r2
 80026b8:	881b      	ldrh	r3, [r3, #0]
 80026ba:	b29b      	uxth	r3, r3
 80026bc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80026c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80026c4:	b29c      	uxth	r4, r3
 80026c6:	687a      	ldr	r2, [r7, #4]
 80026c8:	683b      	ldr	r3, [r7, #0]
 80026ca:	781b      	ldrb	r3, [r3, #0]
 80026cc:	009b      	lsls	r3, r3, #2
 80026ce:	441a      	add	r2, r3
 80026d0:	4b60      	ldr	r3, [pc, #384]	; (8002854 <USB_ActivateEndpoint+0x570>)
 80026d2:	4323      	orrs	r3, r4
 80026d4:	b29b      	uxth	r3, r3
 80026d6:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out */
      PCD_TX_DTOG(USBx, ep->num);
 80026d8:	687a      	ldr	r2, [r7, #4]
 80026da:	683b      	ldr	r3, [r7, #0]
 80026dc:	781b      	ldrb	r3, [r3, #0]
 80026de:	009b      	lsls	r3, r3, #2
 80026e0:	4413      	add	r3, r2
 80026e2:	881b      	ldrh	r3, [r3, #0]
 80026e4:	b29b      	uxth	r3, r3
 80026e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80026ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80026ee:	b29c      	uxth	r4, r3
 80026f0:	687a      	ldr	r2, [r7, #4]
 80026f2:	683b      	ldr	r3, [r7, #0]
 80026f4:	781b      	ldrb	r3, [r3, #0]
 80026f6:	009b      	lsls	r3, r3, #2
 80026f8:	441a      	add	r2, r3
 80026fa:	4b56      	ldr	r3, [pc, #344]	; (8002854 <USB_ActivateEndpoint+0x570>)
 80026fc:	4323      	orrs	r3, r4
 80026fe:	b29b      	uxth	r3, r3
 8002700:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8002702:	687a      	ldr	r2, [r7, #4]
 8002704:	683b      	ldr	r3, [r7, #0]
 8002706:	781b      	ldrb	r3, [r3, #0]
 8002708:	009b      	lsls	r3, r3, #2
 800270a:	4413      	add	r3, r2
 800270c:	881b      	ldrh	r3, [r3, #0]
 800270e:	b29b      	uxth	r3, r3
 8002710:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002714:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002718:	b29c      	uxth	r4, r3
 800271a:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 800271e:	b29c      	uxth	r4, r3
 8002720:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8002724:	b29c      	uxth	r4, r3
 8002726:	687a      	ldr	r2, [r7, #4]
 8002728:	683b      	ldr	r3, [r7, #0]
 800272a:	781b      	ldrb	r3, [r3, #0]
 800272c:	009b      	lsls	r3, r3, #2
 800272e:	441a      	add	r2, r3
 8002730:	4b49      	ldr	r3, [pc, #292]	; (8002858 <USB_ActivateEndpoint+0x574>)
 8002732:	4323      	orrs	r3, r4
 8002734:	b29b      	uxth	r3, r3
 8002736:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8002738:	687a      	ldr	r2, [r7, #4]
 800273a:	683b      	ldr	r3, [r7, #0]
 800273c:	781b      	ldrb	r3, [r3, #0]
 800273e:	009b      	lsls	r3, r3, #2
 8002740:	4413      	add	r3, r2
 8002742:	881b      	ldrh	r3, [r3, #0]
 8002744:	b29b      	uxth	r3, r3
 8002746:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800274a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800274e:	b29c      	uxth	r4, r3
 8002750:	687a      	ldr	r2, [r7, #4]
 8002752:	683b      	ldr	r3, [r7, #0]
 8002754:	781b      	ldrb	r3, [r3, #0]
 8002756:	009b      	lsls	r3, r3, #2
 8002758:	441a      	add	r2, r3
 800275a:	4b3f      	ldr	r3, [pc, #252]	; (8002858 <USB_ActivateEndpoint+0x574>)
 800275c:	4323      	orrs	r3, r4
 800275e:	b29b      	uxth	r3, r3
 8002760:	8013      	strh	r3, [r2, #0]
 8002762:	e0a5      	b.n	80028b0 <USB_ActivateEndpoint+0x5cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8002764:	687a      	ldr	r2, [r7, #4]
 8002766:	683b      	ldr	r3, [r7, #0]
 8002768:	781b      	ldrb	r3, [r3, #0]
 800276a:	009b      	lsls	r3, r3, #2
 800276c:	4413      	add	r3, r2
 800276e:	881b      	ldrh	r3, [r3, #0]
 8002770:	b29c      	uxth	r4, r3
 8002772:	4623      	mov	r3, r4
 8002774:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002778:	2b00      	cmp	r3, #0
 800277a:	d014      	beq.n	80027a6 <USB_ActivateEndpoint+0x4c2>
 800277c:	687a      	ldr	r2, [r7, #4]
 800277e:	683b      	ldr	r3, [r7, #0]
 8002780:	781b      	ldrb	r3, [r3, #0]
 8002782:	009b      	lsls	r3, r3, #2
 8002784:	4413      	add	r3, r2
 8002786:	881b      	ldrh	r3, [r3, #0]
 8002788:	b29b      	uxth	r3, r3
 800278a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800278e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002792:	b29c      	uxth	r4, r3
 8002794:	687a      	ldr	r2, [r7, #4]
 8002796:	683b      	ldr	r3, [r7, #0]
 8002798:	781b      	ldrb	r3, [r3, #0]
 800279a:	009b      	lsls	r3, r3, #2
 800279c:	441a      	add	r2, r3
 800279e:	4b2c      	ldr	r3, [pc, #176]	; (8002850 <USB_ActivateEndpoint+0x56c>)
 80027a0:	4323      	orrs	r3, r4
 80027a2:	b29b      	uxth	r3, r3
 80027a4:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80027a6:	687a      	ldr	r2, [r7, #4]
 80027a8:	683b      	ldr	r3, [r7, #0]
 80027aa:	781b      	ldrb	r3, [r3, #0]
 80027ac:	009b      	lsls	r3, r3, #2
 80027ae:	4413      	add	r3, r2
 80027b0:	881b      	ldrh	r3, [r3, #0]
 80027b2:	b29c      	uxth	r4, r3
 80027b4:	4623      	mov	r3, r4
 80027b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d014      	beq.n	80027e8 <USB_ActivateEndpoint+0x504>
 80027be:	687a      	ldr	r2, [r7, #4]
 80027c0:	683b      	ldr	r3, [r7, #0]
 80027c2:	781b      	ldrb	r3, [r3, #0]
 80027c4:	009b      	lsls	r3, r3, #2
 80027c6:	4413      	add	r3, r2
 80027c8:	881b      	ldrh	r3, [r3, #0]
 80027ca:	b29b      	uxth	r3, r3
 80027cc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80027d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80027d4:	b29c      	uxth	r4, r3
 80027d6:	687a      	ldr	r2, [r7, #4]
 80027d8:	683b      	ldr	r3, [r7, #0]
 80027da:	781b      	ldrb	r3, [r3, #0]
 80027dc:	009b      	lsls	r3, r3, #2
 80027de:	441a      	add	r2, r3
 80027e0:	4b1c      	ldr	r3, [pc, #112]	; (8002854 <USB_ActivateEndpoint+0x570>)
 80027e2:	4323      	orrs	r3, r4
 80027e4:	b29b      	uxth	r3, r3
 80027e6:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 80027e8:	687a      	ldr	r2, [r7, #4]
 80027ea:	683b      	ldr	r3, [r7, #0]
 80027ec:	781b      	ldrb	r3, [r3, #0]
 80027ee:	009b      	lsls	r3, r3, #2
 80027f0:	4413      	add	r3, r2
 80027f2:	881b      	ldrh	r3, [r3, #0]
 80027f4:	b29b      	uxth	r3, r3
 80027f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80027fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80027fe:	b29c      	uxth	r4, r3
 8002800:	687a      	ldr	r2, [r7, #4]
 8002802:	683b      	ldr	r3, [r7, #0]
 8002804:	781b      	ldrb	r3, [r3, #0]
 8002806:	009b      	lsls	r3, r3, #2
 8002808:	441a      	add	r2, r3
 800280a:	4b11      	ldr	r3, [pc, #68]	; (8002850 <USB_ActivateEndpoint+0x56c>)
 800280c:	4323      	orrs	r3, r4
 800280e:	b29b      	uxth	r3, r3
 8002810:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8002812:	683b      	ldr	r3, [r7, #0]
 8002814:	78db      	ldrb	r3, [r3, #3]
 8002816:	2b01      	cmp	r3, #1
 8002818:	d020      	beq.n	800285c <USB_ActivateEndpoint+0x578>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800281a:	687a      	ldr	r2, [r7, #4]
 800281c:	683b      	ldr	r3, [r7, #0]
 800281e:	781b      	ldrb	r3, [r3, #0]
 8002820:	009b      	lsls	r3, r3, #2
 8002822:	4413      	add	r3, r2
 8002824:	881b      	ldrh	r3, [r3, #0]
 8002826:	b29b      	uxth	r3, r3
 8002828:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800282c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002830:	b29c      	uxth	r4, r3
 8002832:	f084 0320 	eor.w	r3, r4, #32
 8002836:	b29c      	uxth	r4, r3
 8002838:	687a      	ldr	r2, [r7, #4]
 800283a:	683b      	ldr	r3, [r7, #0]
 800283c:	781b      	ldrb	r3, [r3, #0]
 800283e:	009b      	lsls	r3, r3, #2
 8002840:	441a      	add	r2, r3
 8002842:	4b05      	ldr	r3, [pc, #20]	; (8002858 <USB_ActivateEndpoint+0x574>)
 8002844:	4323      	orrs	r3, r4
 8002846:	b29b      	uxth	r3, r3
 8002848:	8013      	strh	r3, [r2, #0]
 800284a:	e01c      	b.n	8002886 <USB_ActivateEndpoint+0x5a2>
 800284c:	ffff8180 	.word	0xffff8180
 8002850:	ffffc080 	.word	0xffffc080
 8002854:	ffff80c0 	.word	0xffff80c0
 8002858:	ffff8080 	.word	0xffff8080
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800285c:	687a      	ldr	r2, [r7, #4]
 800285e:	683b      	ldr	r3, [r7, #0]
 8002860:	781b      	ldrb	r3, [r3, #0]
 8002862:	009b      	lsls	r3, r3, #2
 8002864:	4413      	add	r3, r2
 8002866:	881b      	ldrh	r3, [r3, #0]
 8002868:	b29b      	uxth	r3, r3
 800286a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800286e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002872:	b29c      	uxth	r4, r3
 8002874:	687a      	ldr	r2, [r7, #4]
 8002876:	683b      	ldr	r3, [r7, #0]
 8002878:	781b      	ldrb	r3, [r3, #0]
 800287a:	009b      	lsls	r3, r3, #2
 800287c:	441a      	add	r2, r3
 800287e:	4b0f      	ldr	r3, [pc, #60]	; (80028bc <USB_ActivateEndpoint+0x5d8>)
 8002880:	4323      	orrs	r3, r4
 8002882:	b29b      	uxth	r3, r3
 8002884:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8002886:	687a      	ldr	r2, [r7, #4]
 8002888:	683b      	ldr	r3, [r7, #0]
 800288a:	781b      	ldrb	r3, [r3, #0]
 800288c:	009b      	lsls	r3, r3, #2
 800288e:	4413      	add	r3, r2
 8002890:	881b      	ldrh	r3, [r3, #0]
 8002892:	b29b      	uxth	r3, r3
 8002894:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002898:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800289c:	b29c      	uxth	r4, r3
 800289e:	687a      	ldr	r2, [r7, #4]
 80028a0:	683b      	ldr	r3, [r7, #0]
 80028a2:	781b      	ldrb	r3, [r3, #0]
 80028a4:	009b      	lsls	r3, r3, #2
 80028a6:	441a      	add	r2, r3
 80028a8:	4b04      	ldr	r3, [pc, #16]	; (80028bc <USB_ActivateEndpoint+0x5d8>)
 80028aa:	4323      	orrs	r3, r4
 80028ac:	b29b      	uxth	r3, r3
 80028ae:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 80028b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80028b2:	4618      	mov	r0, r3
 80028b4:	3710      	adds	r7, #16
 80028b6:	46bd      	mov	sp, r7
 80028b8:	bc90      	pop	{r4, r7}
 80028ba:	4770      	bx	lr
 80028bc:	ffff8080 	.word	0xffff8080

080028c0 <USB_DeactivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80028c0:	b490      	push	{r4, r7}
 80028c2:	b082      	sub	sp, #8
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6078      	str	r0, [r7, #4]
 80028c8:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80028ca:	683b      	ldr	r3, [r7, #0]
 80028cc:	7b1b      	ldrb	r3, [r3, #12]
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d171      	bne.n	80029b6 <USB_DeactivateEndpoint+0xf6>
  {
    if (ep->is_in != 0U)
 80028d2:	683b      	ldr	r3, [r7, #0]
 80028d4:	785b      	ldrb	r3, [r3, #1]
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d036      	beq.n	8002948 <USB_DeactivateEndpoint+0x88>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80028da:	687a      	ldr	r2, [r7, #4]
 80028dc:	683b      	ldr	r3, [r7, #0]
 80028de:	781b      	ldrb	r3, [r3, #0]
 80028e0:	009b      	lsls	r3, r3, #2
 80028e2:	4413      	add	r3, r2
 80028e4:	881b      	ldrh	r3, [r3, #0]
 80028e6:	b29c      	uxth	r4, r3
 80028e8:	4623      	mov	r3, r4
 80028ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d014      	beq.n	800291c <USB_DeactivateEndpoint+0x5c>
 80028f2:	687a      	ldr	r2, [r7, #4]
 80028f4:	683b      	ldr	r3, [r7, #0]
 80028f6:	781b      	ldrb	r3, [r3, #0]
 80028f8:	009b      	lsls	r3, r3, #2
 80028fa:	4413      	add	r3, r2
 80028fc:	881b      	ldrh	r3, [r3, #0]
 80028fe:	b29b      	uxth	r3, r3
 8002900:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002904:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002908:	b29c      	uxth	r4, r3
 800290a:	687a      	ldr	r2, [r7, #4]
 800290c:	683b      	ldr	r3, [r7, #0]
 800290e:	781b      	ldrb	r3, [r3, #0]
 8002910:	009b      	lsls	r3, r3, #2
 8002912:	441a      	add	r2, r3
 8002914:	4b6b      	ldr	r3, [pc, #428]	; (8002ac4 <USB_DeactivateEndpoint+0x204>)
 8002916:	4323      	orrs	r3, r4
 8002918:	b29b      	uxth	r3, r3
 800291a:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800291c:	687a      	ldr	r2, [r7, #4]
 800291e:	683b      	ldr	r3, [r7, #0]
 8002920:	781b      	ldrb	r3, [r3, #0]
 8002922:	009b      	lsls	r3, r3, #2
 8002924:	4413      	add	r3, r2
 8002926:	881b      	ldrh	r3, [r3, #0]
 8002928:	b29b      	uxth	r3, r3
 800292a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800292e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002932:	b29c      	uxth	r4, r3
 8002934:	687a      	ldr	r2, [r7, #4]
 8002936:	683b      	ldr	r3, [r7, #0]
 8002938:	781b      	ldrb	r3, [r3, #0]
 800293a:	009b      	lsls	r3, r3, #2
 800293c:	441a      	add	r2, r3
 800293e:	4b62      	ldr	r3, [pc, #392]	; (8002ac8 <USB_DeactivateEndpoint+0x208>)
 8002940:	4323      	orrs	r3, r4
 8002942:	b29b      	uxth	r3, r3
 8002944:	8013      	strh	r3, [r2, #0]
 8002946:	e144      	b.n	8002bd2 <USB_DeactivateEndpoint+0x312>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8002948:	687a      	ldr	r2, [r7, #4]
 800294a:	683b      	ldr	r3, [r7, #0]
 800294c:	781b      	ldrb	r3, [r3, #0]
 800294e:	009b      	lsls	r3, r3, #2
 8002950:	4413      	add	r3, r2
 8002952:	881b      	ldrh	r3, [r3, #0]
 8002954:	b29c      	uxth	r4, r3
 8002956:	4623      	mov	r3, r4
 8002958:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800295c:	2b00      	cmp	r3, #0
 800295e:	d014      	beq.n	800298a <USB_DeactivateEndpoint+0xca>
 8002960:	687a      	ldr	r2, [r7, #4]
 8002962:	683b      	ldr	r3, [r7, #0]
 8002964:	781b      	ldrb	r3, [r3, #0]
 8002966:	009b      	lsls	r3, r3, #2
 8002968:	4413      	add	r3, r2
 800296a:	881b      	ldrh	r3, [r3, #0]
 800296c:	b29b      	uxth	r3, r3
 800296e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002972:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002976:	b29c      	uxth	r4, r3
 8002978:	687a      	ldr	r2, [r7, #4]
 800297a:	683b      	ldr	r3, [r7, #0]
 800297c:	781b      	ldrb	r3, [r3, #0]
 800297e:	009b      	lsls	r3, r3, #2
 8002980:	441a      	add	r2, r3
 8002982:	4b52      	ldr	r3, [pc, #328]	; (8002acc <USB_DeactivateEndpoint+0x20c>)
 8002984:	4323      	orrs	r3, r4
 8002986:	b29b      	uxth	r3, r3
 8002988:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800298a:	687a      	ldr	r2, [r7, #4]
 800298c:	683b      	ldr	r3, [r7, #0]
 800298e:	781b      	ldrb	r3, [r3, #0]
 8002990:	009b      	lsls	r3, r3, #2
 8002992:	4413      	add	r3, r2
 8002994:	881b      	ldrh	r3, [r3, #0]
 8002996:	b29b      	uxth	r3, r3
 8002998:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800299c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80029a0:	b29c      	uxth	r4, r3
 80029a2:	687a      	ldr	r2, [r7, #4]
 80029a4:	683b      	ldr	r3, [r7, #0]
 80029a6:	781b      	ldrb	r3, [r3, #0]
 80029a8:	009b      	lsls	r3, r3, #2
 80029aa:	441a      	add	r2, r3
 80029ac:	4b46      	ldr	r3, [pc, #280]	; (8002ac8 <USB_DeactivateEndpoint+0x208>)
 80029ae:	4323      	orrs	r3, r4
 80029b0:	b29b      	uxth	r3, r3
 80029b2:	8013      	strh	r3, [r2, #0]
 80029b4:	e10d      	b.n	8002bd2 <USB_DeactivateEndpoint+0x312>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 80029b6:	683b      	ldr	r3, [r7, #0]
 80029b8:	785b      	ldrb	r3, [r3, #1]
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	f040 8088 	bne.w	8002ad0 <USB_DeactivateEndpoint+0x210>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80029c0:	687a      	ldr	r2, [r7, #4]
 80029c2:	683b      	ldr	r3, [r7, #0]
 80029c4:	781b      	ldrb	r3, [r3, #0]
 80029c6:	009b      	lsls	r3, r3, #2
 80029c8:	4413      	add	r3, r2
 80029ca:	881b      	ldrh	r3, [r3, #0]
 80029cc:	b29c      	uxth	r4, r3
 80029ce:	4623      	mov	r3, r4
 80029d0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d014      	beq.n	8002a02 <USB_DeactivateEndpoint+0x142>
 80029d8:	687a      	ldr	r2, [r7, #4]
 80029da:	683b      	ldr	r3, [r7, #0]
 80029dc:	781b      	ldrb	r3, [r3, #0]
 80029de:	009b      	lsls	r3, r3, #2
 80029e0:	4413      	add	r3, r2
 80029e2:	881b      	ldrh	r3, [r3, #0]
 80029e4:	b29b      	uxth	r3, r3
 80029e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80029ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80029ee:	b29c      	uxth	r4, r3
 80029f0:	687a      	ldr	r2, [r7, #4]
 80029f2:	683b      	ldr	r3, [r7, #0]
 80029f4:	781b      	ldrb	r3, [r3, #0]
 80029f6:	009b      	lsls	r3, r3, #2
 80029f8:	441a      	add	r2, r3
 80029fa:	4b34      	ldr	r3, [pc, #208]	; (8002acc <USB_DeactivateEndpoint+0x20c>)
 80029fc:	4323      	orrs	r3, r4
 80029fe:	b29b      	uxth	r3, r3
 8002a00:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8002a02:	687a      	ldr	r2, [r7, #4]
 8002a04:	683b      	ldr	r3, [r7, #0]
 8002a06:	781b      	ldrb	r3, [r3, #0]
 8002a08:	009b      	lsls	r3, r3, #2
 8002a0a:	4413      	add	r3, r2
 8002a0c:	881b      	ldrh	r3, [r3, #0]
 8002a0e:	b29c      	uxth	r4, r3
 8002a10:	4623      	mov	r3, r4
 8002a12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d014      	beq.n	8002a44 <USB_DeactivateEndpoint+0x184>
 8002a1a:	687a      	ldr	r2, [r7, #4]
 8002a1c:	683b      	ldr	r3, [r7, #0]
 8002a1e:	781b      	ldrb	r3, [r3, #0]
 8002a20:	009b      	lsls	r3, r3, #2
 8002a22:	4413      	add	r3, r2
 8002a24:	881b      	ldrh	r3, [r3, #0]
 8002a26:	b29b      	uxth	r3, r3
 8002a28:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002a2c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a30:	b29c      	uxth	r4, r3
 8002a32:	687a      	ldr	r2, [r7, #4]
 8002a34:	683b      	ldr	r3, [r7, #0]
 8002a36:	781b      	ldrb	r3, [r3, #0]
 8002a38:	009b      	lsls	r3, r3, #2
 8002a3a:	441a      	add	r2, r3
 8002a3c:	4b21      	ldr	r3, [pc, #132]	; (8002ac4 <USB_DeactivateEndpoint+0x204>)
 8002a3e:	4323      	orrs	r3, r4
 8002a40:	b29b      	uxth	r3, r3
 8002a42:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8002a44:	687a      	ldr	r2, [r7, #4]
 8002a46:	683b      	ldr	r3, [r7, #0]
 8002a48:	781b      	ldrb	r3, [r3, #0]
 8002a4a:	009b      	lsls	r3, r3, #2
 8002a4c:	4413      	add	r3, r2
 8002a4e:	881b      	ldrh	r3, [r3, #0]
 8002a50:	b29b      	uxth	r3, r3
 8002a52:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002a56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a5a:	b29c      	uxth	r4, r3
 8002a5c:	687a      	ldr	r2, [r7, #4]
 8002a5e:	683b      	ldr	r3, [r7, #0]
 8002a60:	781b      	ldrb	r3, [r3, #0]
 8002a62:	009b      	lsls	r3, r3, #2
 8002a64:	441a      	add	r2, r3
 8002a66:	4b17      	ldr	r3, [pc, #92]	; (8002ac4 <USB_DeactivateEndpoint+0x204>)
 8002a68:	4323      	orrs	r3, r4
 8002a6a:	b29b      	uxth	r3, r3
 8002a6c:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8002a6e:	687a      	ldr	r2, [r7, #4]
 8002a70:	683b      	ldr	r3, [r7, #0]
 8002a72:	781b      	ldrb	r3, [r3, #0]
 8002a74:	009b      	lsls	r3, r3, #2
 8002a76:	4413      	add	r3, r2
 8002a78:	881b      	ldrh	r3, [r3, #0]
 8002a7a:	b29b      	uxth	r3, r3
 8002a7c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002a80:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a84:	b29c      	uxth	r4, r3
 8002a86:	687a      	ldr	r2, [r7, #4]
 8002a88:	683b      	ldr	r3, [r7, #0]
 8002a8a:	781b      	ldrb	r3, [r3, #0]
 8002a8c:	009b      	lsls	r3, r3, #2
 8002a8e:	441a      	add	r2, r3
 8002a90:	4b0d      	ldr	r3, [pc, #52]	; (8002ac8 <USB_DeactivateEndpoint+0x208>)
 8002a92:	4323      	orrs	r3, r4
 8002a94:	b29b      	uxth	r3, r3
 8002a96:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8002a98:	687a      	ldr	r2, [r7, #4]
 8002a9a:	683b      	ldr	r3, [r7, #0]
 8002a9c:	781b      	ldrb	r3, [r3, #0]
 8002a9e:	009b      	lsls	r3, r3, #2
 8002aa0:	4413      	add	r3, r2
 8002aa2:	881b      	ldrh	r3, [r3, #0]
 8002aa4:	b29b      	uxth	r3, r3
 8002aa6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002aaa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002aae:	b29c      	uxth	r4, r3
 8002ab0:	687a      	ldr	r2, [r7, #4]
 8002ab2:	683b      	ldr	r3, [r7, #0]
 8002ab4:	781b      	ldrb	r3, [r3, #0]
 8002ab6:	009b      	lsls	r3, r3, #2
 8002ab8:	441a      	add	r2, r3
 8002aba:	4b03      	ldr	r3, [pc, #12]	; (8002ac8 <USB_DeactivateEndpoint+0x208>)
 8002abc:	4323      	orrs	r3, r4
 8002abe:	b29b      	uxth	r3, r3
 8002ac0:	8013      	strh	r3, [r2, #0]
 8002ac2:	e086      	b.n	8002bd2 <USB_DeactivateEndpoint+0x312>
 8002ac4:	ffff80c0 	.word	0xffff80c0
 8002ac8:	ffff8080 	.word	0xffff8080
 8002acc:	ffffc080 	.word	0xffffc080
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8002ad0:	687a      	ldr	r2, [r7, #4]
 8002ad2:	683b      	ldr	r3, [r7, #0]
 8002ad4:	781b      	ldrb	r3, [r3, #0]
 8002ad6:	009b      	lsls	r3, r3, #2
 8002ad8:	4413      	add	r3, r2
 8002ada:	881b      	ldrh	r3, [r3, #0]
 8002adc:	b29c      	uxth	r4, r3
 8002ade:	4623      	mov	r3, r4
 8002ae0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d014      	beq.n	8002b12 <USB_DeactivateEndpoint+0x252>
 8002ae8:	687a      	ldr	r2, [r7, #4]
 8002aea:	683b      	ldr	r3, [r7, #0]
 8002aec:	781b      	ldrb	r3, [r3, #0]
 8002aee:	009b      	lsls	r3, r3, #2
 8002af0:	4413      	add	r3, r2
 8002af2:	881b      	ldrh	r3, [r3, #0]
 8002af4:	b29b      	uxth	r3, r3
 8002af6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002afa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002afe:	b29c      	uxth	r4, r3
 8002b00:	687a      	ldr	r2, [r7, #4]
 8002b02:	683b      	ldr	r3, [r7, #0]
 8002b04:	781b      	ldrb	r3, [r3, #0]
 8002b06:	009b      	lsls	r3, r3, #2
 8002b08:	441a      	add	r2, r3
 8002b0a:	4b35      	ldr	r3, [pc, #212]	; (8002be0 <USB_DeactivateEndpoint+0x320>)
 8002b0c:	4323      	orrs	r3, r4
 8002b0e:	b29b      	uxth	r3, r3
 8002b10:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8002b12:	687a      	ldr	r2, [r7, #4]
 8002b14:	683b      	ldr	r3, [r7, #0]
 8002b16:	781b      	ldrb	r3, [r3, #0]
 8002b18:	009b      	lsls	r3, r3, #2
 8002b1a:	4413      	add	r3, r2
 8002b1c:	881b      	ldrh	r3, [r3, #0]
 8002b1e:	b29c      	uxth	r4, r3
 8002b20:	4623      	mov	r3, r4
 8002b22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d014      	beq.n	8002b54 <USB_DeactivateEndpoint+0x294>
 8002b2a:	687a      	ldr	r2, [r7, #4]
 8002b2c:	683b      	ldr	r3, [r7, #0]
 8002b2e:	781b      	ldrb	r3, [r3, #0]
 8002b30:	009b      	lsls	r3, r3, #2
 8002b32:	4413      	add	r3, r2
 8002b34:	881b      	ldrh	r3, [r3, #0]
 8002b36:	b29b      	uxth	r3, r3
 8002b38:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002b3c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b40:	b29c      	uxth	r4, r3
 8002b42:	687a      	ldr	r2, [r7, #4]
 8002b44:	683b      	ldr	r3, [r7, #0]
 8002b46:	781b      	ldrb	r3, [r3, #0]
 8002b48:	009b      	lsls	r3, r3, #2
 8002b4a:	441a      	add	r2, r3
 8002b4c:	4b25      	ldr	r3, [pc, #148]	; (8002be4 <USB_DeactivateEndpoint+0x324>)
 8002b4e:	4323      	orrs	r3, r4
 8002b50:	b29b      	uxth	r3, r3
 8002b52:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8002b54:	687a      	ldr	r2, [r7, #4]
 8002b56:	683b      	ldr	r3, [r7, #0]
 8002b58:	781b      	ldrb	r3, [r3, #0]
 8002b5a:	009b      	lsls	r3, r3, #2
 8002b5c:	4413      	add	r3, r2
 8002b5e:	881b      	ldrh	r3, [r3, #0]
 8002b60:	b29b      	uxth	r3, r3
 8002b62:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002b66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b6a:	b29c      	uxth	r4, r3
 8002b6c:	687a      	ldr	r2, [r7, #4]
 8002b6e:	683b      	ldr	r3, [r7, #0]
 8002b70:	781b      	ldrb	r3, [r3, #0]
 8002b72:	009b      	lsls	r3, r3, #2
 8002b74:	441a      	add	r2, r3
 8002b76:	4b1a      	ldr	r3, [pc, #104]	; (8002be0 <USB_DeactivateEndpoint+0x320>)
 8002b78:	4323      	orrs	r3, r4
 8002b7a:	b29b      	uxth	r3, r3
 8002b7c:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8002b7e:	687a      	ldr	r2, [r7, #4]
 8002b80:	683b      	ldr	r3, [r7, #0]
 8002b82:	781b      	ldrb	r3, [r3, #0]
 8002b84:	009b      	lsls	r3, r3, #2
 8002b86:	4413      	add	r3, r2
 8002b88:	881b      	ldrh	r3, [r3, #0]
 8002b8a:	b29b      	uxth	r3, r3
 8002b8c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002b90:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002b94:	b29c      	uxth	r4, r3
 8002b96:	687a      	ldr	r2, [r7, #4]
 8002b98:	683b      	ldr	r3, [r7, #0]
 8002b9a:	781b      	ldrb	r3, [r3, #0]
 8002b9c:	009b      	lsls	r3, r3, #2
 8002b9e:	441a      	add	r2, r3
 8002ba0:	4b11      	ldr	r3, [pc, #68]	; (8002be8 <USB_DeactivateEndpoint+0x328>)
 8002ba2:	4323      	orrs	r3, r4
 8002ba4:	b29b      	uxth	r3, r3
 8002ba6:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8002ba8:	687a      	ldr	r2, [r7, #4]
 8002baa:	683b      	ldr	r3, [r7, #0]
 8002bac:	781b      	ldrb	r3, [r3, #0]
 8002bae:	009b      	lsls	r3, r3, #2
 8002bb0:	4413      	add	r3, r2
 8002bb2:	881b      	ldrh	r3, [r3, #0]
 8002bb4:	b29b      	uxth	r3, r3
 8002bb6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002bba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002bbe:	b29c      	uxth	r4, r3
 8002bc0:	687a      	ldr	r2, [r7, #4]
 8002bc2:	683b      	ldr	r3, [r7, #0]
 8002bc4:	781b      	ldrb	r3, [r3, #0]
 8002bc6:	009b      	lsls	r3, r3, #2
 8002bc8:	441a      	add	r2, r3
 8002bca:	4b07      	ldr	r3, [pc, #28]	; (8002be8 <USB_DeactivateEndpoint+0x328>)
 8002bcc:	4323      	orrs	r3, r4
 8002bce:	b29b      	uxth	r3, r3
 8002bd0:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8002bd2:	2300      	movs	r3, #0
}
 8002bd4:	4618      	mov	r0, r3
 8002bd6:	3708      	adds	r7, #8
 8002bd8:	46bd      	mov	sp, r7
 8002bda:	bc90      	pop	{r4, r7}
 8002bdc:	4770      	bx	lr
 8002bde:	bf00      	nop
 8002be0:	ffffc080 	.word	0xffffc080
 8002be4:	ffff80c0 	.word	0xffff80c0
 8002be8:	ffff8080 	.word	0xffff8080

08002bec <USB_EPStartXfer>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8002bec:	b590      	push	{r4, r7, lr}
 8002bee:	b08d      	sub	sp, #52	; 0x34
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	6078      	str	r0, [r7, #4]
 8002bf4:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint32_t len;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8002bf6:	683b      	ldr	r3, [r7, #0]
 8002bf8:	785b      	ldrb	r3, [r3, #1]
 8002bfa:	2b01      	cmp	r3, #1
 8002bfc:	f040 8160 	bne.w	8002ec0 <USB_EPStartXfer+0x2d4>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8002c00:	683b      	ldr	r3, [r7, #0]
 8002c02:	699a      	ldr	r2, [r3, #24]
 8002c04:	683b      	ldr	r3, [r7, #0]
 8002c06:	691b      	ldr	r3, [r3, #16]
 8002c08:	429a      	cmp	r2, r3
 8002c0a:	d909      	bls.n	8002c20 <USB_EPStartXfer+0x34>
    {
      len = ep->maxpacket;
 8002c0c:	683b      	ldr	r3, [r7, #0]
 8002c0e:	691b      	ldr	r3, [r3, #16]
 8002c10:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len -= len;
 8002c12:	683b      	ldr	r3, [r7, #0]
 8002c14:	699a      	ldr	r2, [r3, #24]
 8002c16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c18:	1ad2      	subs	r2, r2, r3
 8002c1a:	683b      	ldr	r3, [r7, #0]
 8002c1c:	619a      	str	r2, [r3, #24]
 8002c1e:	e005      	b.n	8002c2c <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 8002c20:	683b      	ldr	r3, [r7, #0]
 8002c22:	699b      	ldr	r3, [r3, #24]
 8002c24:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len = 0U;
 8002c26:	683b      	ldr	r3, [r7, #0]
 8002c28:	2200      	movs	r2, #0
 8002c2a:	619a      	str	r2, [r3, #24]
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8002c2c:	683b      	ldr	r3, [r7, #0]
 8002c2e:	7b1b      	ldrb	r3, [r3, #12]
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d119      	bne.n	8002c68 <USB_EPStartXfer+0x7c>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8002c34:	683b      	ldr	r3, [r7, #0]
 8002c36:	6959      	ldr	r1, [r3, #20]
 8002c38:	683b      	ldr	r3, [r7, #0]
 8002c3a:	88da      	ldrh	r2, [r3, #6]
 8002c3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c3e:	b29b      	uxth	r3, r3
 8002c40:	6878      	ldr	r0, [r7, #4]
 8002c42:	f000 fba2 	bl	800338a <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8002c46:	687c      	ldr	r4, [r7, #4]
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002c4e:	b29b      	uxth	r3, r3
 8002c50:	441c      	add	r4, r3
 8002c52:	683b      	ldr	r3, [r7, #0]
 8002c54:	781b      	ldrb	r3, [r3, #0]
 8002c56:	011b      	lsls	r3, r3, #4
 8002c58:	4423      	add	r3, r4
 8002c5a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002c5e:	461c      	mov	r4, r3
 8002c60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c62:	b29b      	uxth	r3, r3
 8002c64:	8023      	strh	r3, [r4, #0]
 8002c66:	e10f      	b.n	8002e88 <USB_EPStartXfer+0x29c>
    }
    else
    {
      /* Write the data to the USB endpoint */
      if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8002c68:	687a      	ldr	r2, [r7, #4]
 8002c6a:	683b      	ldr	r3, [r7, #0]
 8002c6c:	781b      	ldrb	r3, [r3, #0]
 8002c6e:	009b      	lsls	r3, r3, #2
 8002c70:	4413      	add	r3, r2
 8002c72:	881b      	ldrh	r3, [r3, #0]
 8002c74:	b29b      	uxth	r3, r3
 8002c76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d065      	beq.n	8002d4a <USB_EPStartXfer+0x15e>
      {
        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8002c7e:	687c      	ldr	r4, [r7, #4]
 8002c80:	683b      	ldr	r3, [r7, #0]
 8002c82:	785b      	ldrb	r3, [r3, #1]
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d148      	bne.n	8002d1a <USB_EPStartXfer+0x12e>
 8002c88:	687c      	ldr	r4, [r7, #4]
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002c90:	b29b      	uxth	r3, r3
 8002c92:	441c      	add	r4, r3
 8002c94:	683b      	ldr	r3, [r7, #0]
 8002c96:	781b      	ldrb	r3, [r3, #0]
 8002c98:	011b      	lsls	r3, r3, #4
 8002c9a:	4423      	add	r3, r4
 8002c9c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002ca0:	461c      	mov	r4, r3
 8002ca2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d10e      	bne.n	8002cc6 <USB_EPStartXfer+0xda>
 8002ca8:	8823      	ldrh	r3, [r4, #0]
 8002caa:	b29b      	uxth	r3, r3
 8002cac:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002cb0:	b29b      	uxth	r3, r3
 8002cb2:	8023      	strh	r3, [r4, #0]
 8002cb4:	8823      	ldrh	r3, [r4, #0]
 8002cb6:	b29b      	uxth	r3, r3
 8002cb8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002cbc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002cc0:	b29b      	uxth	r3, r3
 8002cc2:	8023      	strh	r3, [r4, #0]
 8002cc4:	e03d      	b.n	8002d42 <USB_EPStartXfer+0x156>
 8002cc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cc8:	2b3e      	cmp	r3, #62	; 0x3e
 8002cca:	d810      	bhi.n	8002cee <USB_EPStartXfer+0x102>
 8002ccc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cce:	085b      	lsrs	r3, r3, #1
 8002cd0:	627b      	str	r3, [r7, #36]	; 0x24
 8002cd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cd4:	f003 0301 	and.w	r3, r3, #1
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d002      	beq.n	8002ce2 <USB_EPStartXfer+0xf6>
 8002cdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cde:	3301      	adds	r3, #1
 8002ce0:	627b      	str	r3, [r7, #36]	; 0x24
 8002ce2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ce4:	b29b      	uxth	r3, r3
 8002ce6:	029b      	lsls	r3, r3, #10
 8002ce8:	b29b      	uxth	r3, r3
 8002cea:	8023      	strh	r3, [r4, #0]
 8002cec:	e029      	b.n	8002d42 <USB_EPStartXfer+0x156>
 8002cee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cf0:	095b      	lsrs	r3, r3, #5
 8002cf2:	627b      	str	r3, [r7, #36]	; 0x24
 8002cf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cf6:	f003 031f 	and.w	r3, r3, #31
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d102      	bne.n	8002d04 <USB_EPStartXfer+0x118>
 8002cfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d00:	3b01      	subs	r3, #1
 8002d02:	627b      	str	r3, [r7, #36]	; 0x24
 8002d04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d06:	b29b      	uxth	r3, r3
 8002d08:	029b      	lsls	r3, r3, #10
 8002d0a:	b29b      	uxth	r3, r3
 8002d0c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002d10:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002d14:	b29b      	uxth	r3, r3
 8002d16:	8023      	strh	r3, [r4, #0]
 8002d18:	e013      	b.n	8002d42 <USB_EPStartXfer+0x156>
 8002d1a:	683b      	ldr	r3, [r7, #0]
 8002d1c:	785b      	ldrb	r3, [r3, #1]
 8002d1e:	2b01      	cmp	r3, #1
 8002d20:	d10f      	bne.n	8002d42 <USB_EPStartXfer+0x156>
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002d28:	b29b      	uxth	r3, r3
 8002d2a:	441c      	add	r4, r3
 8002d2c:	683b      	ldr	r3, [r7, #0]
 8002d2e:	781b      	ldrb	r3, [r3, #0]
 8002d30:	011b      	lsls	r3, r3, #4
 8002d32:	4423      	add	r3, r4
 8002d34:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002d38:	60fb      	str	r3, [r7, #12]
 8002d3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d3c:	b29a      	uxth	r2, r3
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	801a      	strh	r2, [r3, #0]
        pmabuffer = ep->pmaaddr1;
 8002d42:	683b      	ldr	r3, [r7, #0]
 8002d44:	895b      	ldrh	r3, [r3, #10]
 8002d46:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8002d48:	e063      	b.n	8002e12 <USB_EPStartXfer+0x226>
      }
      else
      {
        /* Set the Double buffer counter for pmabuffer0 */
        PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8002d4a:	683b      	ldr	r3, [r7, #0]
 8002d4c:	785b      	ldrb	r3, [r3, #1]
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d148      	bne.n	8002de4 <USB_EPStartXfer+0x1f8>
 8002d52:	687c      	ldr	r4, [r7, #4]
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002d5a:	b29b      	uxth	r3, r3
 8002d5c:	441c      	add	r4, r3
 8002d5e:	683b      	ldr	r3, [r7, #0]
 8002d60:	781b      	ldrb	r3, [r3, #0]
 8002d62:	011b      	lsls	r3, r3, #4
 8002d64:	4423      	add	r3, r4
 8002d66:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002d6a:	461c      	mov	r4, r3
 8002d6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d10e      	bne.n	8002d90 <USB_EPStartXfer+0x1a4>
 8002d72:	8823      	ldrh	r3, [r4, #0]
 8002d74:	b29b      	uxth	r3, r3
 8002d76:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002d7a:	b29b      	uxth	r3, r3
 8002d7c:	8023      	strh	r3, [r4, #0]
 8002d7e:	8823      	ldrh	r3, [r4, #0]
 8002d80:	b29b      	uxth	r3, r3
 8002d82:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002d86:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002d8a:	b29b      	uxth	r3, r3
 8002d8c:	8023      	strh	r3, [r4, #0]
 8002d8e:	e03d      	b.n	8002e0c <USB_EPStartXfer+0x220>
 8002d90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d92:	2b3e      	cmp	r3, #62	; 0x3e
 8002d94:	d810      	bhi.n	8002db8 <USB_EPStartXfer+0x1cc>
 8002d96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d98:	085b      	lsrs	r3, r3, #1
 8002d9a:	623b      	str	r3, [r7, #32]
 8002d9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d9e:	f003 0301 	and.w	r3, r3, #1
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d002      	beq.n	8002dac <USB_EPStartXfer+0x1c0>
 8002da6:	6a3b      	ldr	r3, [r7, #32]
 8002da8:	3301      	adds	r3, #1
 8002daa:	623b      	str	r3, [r7, #32]
 8002dac:	6a3b      	ldr	r3, [r7, #32]
 8002dae:	b29b      	uxth	r3, r3
 8002db0:	029b      	lsls	r3, r3, #10
 8002db2:	b29b      	uxth	r3, r3
 8002db4:	8023      	strh	r3, [r4, #0]
 8002db6:	e029      	b.n	8002e0c <USB_EPStartXfer+0x220>
 8002db8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dba:	095b      	lsrs	r3, r3, #5
 8002dbc:	623b      	str	r3, [r7, #32]
 8002dbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dc0:	f003 031f 	and.w	r3, r3, #31
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d102      	bne.n	8002dce <USB_EPStartXfer+0x1e2>
 8002dc8:	6a3b      	ldr	r3, [r7, #32]
 8002dca:	3b01      	subs	r3, #1
 8002dcc:	623b      	str	r3, [r7, #32]
 8002dce:	6a3b      	ldr	r3, [r7, #32]
 8002dd0:	b29b      	uxth	r3, r3
 8002dd2:	029b      	lsls	r3, r3, #10
 8002dd4:	b29b      	uxth	r3, r3
 8002dd6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002dda:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002dde:	b29b      	uxth	r3, r3
 8002de0:	8023      	strh	r3, [r4, #0]
 8002de2:	e013      	b.n	8002e0c <USB_EPStartXfer+0x220>
 8002de4:	683b      	ldr	r3, [r7, #0]
 8002de6:	785b      	ldrb	r3, [r3, #1]
 8002de8:	2b01      	cmp	r3, #1
 8002dea:	d10f      	bne.n	8002e0c <USB_EPStartXfer+0x220>
 8002dec:	687c      	ldr	r4, [r7, #4]
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002df4:	b29b      	uxth	r3, r3
 8002df6:	441c      	add	r4, r3
 8002df8:	683b      	ldr	r3, [r7, #0]
 8002dfa:	781b      	ldrb	r3, [r3, #0]
 8002dfc:	011b      	lsls	r3, r3, #4
 8002dfe:	4423      	add	r3, r4
 8002e00:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002e04:	461c      	mov	r4, r3
 8002e06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e08:	b29b      	uxth	r3, r3
 8002e0a:	8023      	strh	r3, [r4, #0]
        pmabuffer = ep->pmaaddr0;
 8002e0c:	683b      	ldr	r3, [r7, #0]
 8002e0e:	891b      	ldrh	r3, [r3, #8]
 8002e10:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }
      USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8002e12:	683b      	ldr	r3, [r7, #0]
 8002e14:	6959      	ldr	r1, [r3, #20]
 8002e16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e18:	b29b      	uxth	r3, r3
 8002e1a:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8002e1c:	6878      	ldr	r0, [r7, #4]
 8002e1e:	f000 fab4 	bl	800338a <USB_WritePMA>
      PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 8002e22:	683b      	ldr	r3, [r7, #0]
 8002e24:	785b      	ldrb	r3, [r3, #1]
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d115      	bne.n	8002e56 <USB_EPStartXfer+0x26a>
 8002e2a:	687a      	ldr	r2, [r7, #4]
 8002e2c:	683b      	ldr	r3, [r7, #0]
 8002e2e:	781b      	ldrb	r3, [r3, #0]
 8002e30:	009b      	lsls	r3, r3, #2
 8002e32:	4413      	add	r3, r2
 8002e34:	881b      	ldrh	r3, [r3, #0]
 8002e36:	b29b      	uxth	r3, r3
 8002e38:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002e3c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e40:	b29c      	uxth	r4, r3
 8002e42:	687a      	ldr	r2, [r7, #4]
 8002e44:	683b      	ldr	r3, [r7, #0]
 8002e46:	781b      	ldrb	r3, [r3, #0]
 8002e48:	009b      	lsls	r3, r3, #2
 8002e4a:	441a      	add	r2, r3
 8002e4c:	4b9a      	ldr	r3, [pc, #616]	; (80030b8 <USB_EPStartXfer+0x4cc>)
 8002e4e:	4323      	orrs	r3, r4
 8002e50:	b29b      	uxth	r3, r3
 8002e52:	8013      	strh	r3, [r2, #0]
 8002e54:	e018      	b.n	8002e88 <USB_EPStartXfer+0x29c>
 8002e56:	683b      	ldr	r3, [r7, #0]
 8002e58:	785b      	ldrb	r3, [r3, #1]
 8002e5a:	2b01      	cmp	r3, #1
 8002e5c:	d114      	bne.n	8002e88 <USB_EPStartXfer+0x29c>
 8002e5e:	687a      	ldr	r2, [r7, #4]
 8002e60:	683b      	ldr	r3, [r7, #0]
 8002e62:	781b      	ldrb	r3, [r3, #0]
 8002e64:	009b      	lsls	r3, r3, #2
 8002e66:	4413      	add	r3, r2
 8002e68:	881b      	ldrh	r3, [r3, #0]
 8002e6a:	b29b      	uxth	r3, r3
 8002e6c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002e70:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e74:	b29c      	uxth	r4, r3
 8002e76:	687a      	ldr	r2, [r7, #4]
 8002e78:	683b      	ldr	r3, [r7, #0]
 8002e7a:	781b      	ldrb	r3, [r3, #0]
 8002e7c:	009b      	lsls	r3, r3, #2
 8002e7e:	441a      	add	r2, r3
 8002e80:	4b8e      	ldr	r3, [pc, #568]	; (80030bc <USB_EPStartXfer+0x4d0>)
 8002e82:	4323      	orrs	r3, r4
 8002e84:	b29b      	uxth	r3, r3
 8002e86:	8013      	strh	r3, [r2, #0]
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8002e88:	687a      	ldr	r2, [r7, #4]
 8002e8a:	683b      	ldr	r3, [r7, #0]
 8002e8c:	781b      	ldrb	r3, [r3, #0]
 8002e8e:	009b      	lsls	r3, r3, #2
 8002e90:	4413      	add	r3, r2
 8002e92:	881b      	ldrh	r3, [r3, #0]
 8002e94:	b29b      	uxth	r3, r3
 8002e96:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002e9a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002e9e:	b29c      	uxth	r4, r3
 8002ea0:	f084 0310 	eor.w	r3, r4, #16
 8002ea4:	b29c      	uxth	r4, r3
 8002ea6:	f084 0320 	eor.w	r3, r4, #32
 8002eaa:	b29c      	uxth	r4, r3
 8002eac:	687a      	ldr	r2, [r7, #4]
 8002eae:	683b      	ldr	r3, [r7, #0]
 8002eb0:	781b      	ldrb	r3, [r3, #0]
 8002eb2:	009b      	lsls	r3, r3, #2
 8002eb4:	441a      	add	r2, r3
 8002eb6:	4b82      	ldr	r3, [pc, #520]	; (80030c0 <USB_EPStartXfer+0x4d4>)
 8002eb8:	4323      	orrs	r3, r4
 8002eba:	b29b      	uxth	r3, r3
 8002ebc:	8013      	strh	r3, [r2, #0]
 8002ebe:	e146      	b.n	800314e <USB_EPStartXfer+0x562>
  }
  else /* OUT endpoint */
  {
    /* Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8002ec0:	683b      	ldr	r3, [r7, #0]
 8002ec2:	699a      	ldr	r2, [r3, #24]
 8002ec4:	683b      	ldr	r3, [r7, #0]
 8002ec6:	691b      	ldr	r3, [r3, #16]
 8002ec8:	429a      	cmp	r2, r3
 8002eca:	d909      	bls.n	8002ee0 <USB_EPStartXfer+0x2f4>
    {
      len = ep->maxpacket;
 8002ecc:	683b      	ldr	r3, [r7, #0]
 8002ece:	691b      	ldr	r3, [r3, #16]
 8002ed0:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len -= len;
 8002ed2:	683b      	ldr	r3, [r7, #0]
 8002ed4:	699a      	ldr	r2, [r3, #24]
 8002ed6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ed8:	1ad2      	subs	r2, r2, r3
 8002eda:	683b      	ldr	r3, [r7, #0]
 8002edc:	619a      	str	r2, [r3, #24]
 8002ede:	e005      	b.n	8002eec <USB_EPStartXfer+0x300>
    }
    else
    {
      len = ep->xfer_len;
 8002ee0:	683b      	ldr	r3, [r7, #0]
 8002ee2:	699b      	ldr	r3, [r3, #24]
 8002ee4:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len = 0U;
 8002ee6:	683b      	ldr	r3, [r7, #0]
 8002ee8:	2200      	movs	r2, #0
 8002eea:	619a      	str	r2, [r3, #24]
    }

    /* configure and validate Rx endpoint */
    if (ep->doublebuffer == 0U)
 8002eec:	683b      	ldr	r3, [r7, #0]
 8002eee:	7b1b      	ldrb	r3, [r3, #12]
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d148      	bne.n	8002f86 <USB_EPStartXfer+0x39a>
    {
      /*Set RX buffer count*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8002ef4:	687c      	ldr	r4, [r7, #4]
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002efc:	b29b      	uxth	r3, r3
 8002efe:	441c      	add	r4, r3
 8002f00:	683b      	ldr	r3, [r7, #0]
 8002f02:	781b      	ldrb	r3, [r3, #0]
 8002f04:	011b      	lsls	r3, r3, #4
 8002f06:	4423      	add	r3, r4
 8002f08:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002f0c:	461c      	mov	r4, r3
 8002f0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d10e      	bne.n	8002f32 <USB_EPStartXfer+0x346>
 8002f14:	8823      	ldrh	r3, [r4, #0]
 8002f16:	b29b      	uxth	r3, r3
 8002f18:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002f1c:	b29b      	uxth	r3, r3
 8002f1e:	8023      	strh	r3, [r4, #0]
 8002f20:	8823      	ldrh	r3, [r4, #0]
 8002f22:	b29b      	uxth	r3, r3
 8002f24:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002f28:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002f2c:	b29b      	uxth	r3, r3
 8002f2e:	8023      	strh	r3, [r4, #0]
 8002f30:	e0f2      	b.n	8003118 <USB_EPStartXfer+0x52c>
 8002f32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f34:	2b3e      	cmp	r3, #62	; 0x3e
 8002f36:	d810      	bhi.n	8002f5a <USB_EPStartXfer+0x36e>
 8002f38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f3a:	085b      	lsrs	r3, r3, #1
 8002f3c:	61fb      	str	r3, [r7, #28]
 8002f3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f40:	f003 0301 	and.w	r3, r3, #1
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d002      	beq.n	8002f4e <USB_EPStartXfer+0x362>
 8002f48:	69fb      	ldr	r3, [r7, #28]
 8002f4a:	3301      	adds	r3, #1
 8002f4c:	61fb      	str	r3, [r7, #28]
 8002f4e:	69fb      	ldr	r3, [r7, #28]
 8002f50:	b29b      	uxth	r3, r3
 8002f52:	029b      	lsls	r3, r3, #10
 8002f54:	b29b      	uxth	r3, r3
 8002f56:	8023      	strh	r3, [r4, #0]
 8002f58:	e0de      	b.n	8003118 <USB_EPStartXfer+0x52c>
 8002f5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f5c:	095b      	lsrs	r3, r3, #5
 8002f5e:	61fb      	str	r3, [r7, #28]
 8002f60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f62:	f003 031f 	and.w	r3, r3, #31
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d102      	bne.n	8002f70 <USB_EPStartXfer+0x384>
 8002f6a:	69fb      	ldr	r3, [r7, #28]
 8002f6c:	3b01      	subs	r3, #1
 8002f6e:	61fb      	str	r3, [r7, #28]
 8002f70:	69fb      	ldr	r3, [r7, #28]
 8002f72:	b29b      	uxth	r3, r3
 8002f74:	029b      	lsls	r3, r3, #10
 8002f76:	b29b      	uxth	r3, r3
 8002f78:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002f7c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002f80:	b29b      	uxth	r3, r3
 8002f82:	8023      	strh	r3, [r4, #0]
 8002f84:	e0c8      	b.n	8003118 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /*Set the Double buffer counter*/
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8002f86:	683b      	ldr	r3, [r7, #0]
 8002f88:	785b      	ldrb	r3, [r3, #1]
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d148      	bne.n	8003020 <USB_EPStartXfer+0x434>
 8002f8e:	687c      	ldr	r4, [r7, #4]
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002f96:	b29b      	uxth	r3, r3
 8002f98:	441c      	add	r4, r3
 8002f9a:	683b      	ldr	r3, [r7, #0]
 8002f9c:	781b      	ldrb	r3, [r3, #0]
 8002f9e:	011b      	lsls	r3, r3, #4
 8002fa0:	4423      	add	r3, r4
 8002fa2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002fa6:	461c      	mov	r4, r3
 8002fa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d10e      	bne.n	8002fcc <USB_EPStartXfer+0x3e0>
 8002fae:	8823      	ldrh	r3, [r4, #0]
 8002fb0:	b29b      	uxth	r3, r3
 8002fb2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002fb6:	b29b      	uxth	r3, r3
 8002fb8:	8023      	strh	r3, [r4, #0]
 8002fba:	8823      	ldrh	r3, [r4, #0]
 8002fbc:	b29b      	uxth	r3, r3
 8002fbe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002fc2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002fc6:	b29b      	uxth	r3, r3
 8002fc8:	8023      	strh	r3, [r4, #0]
 8002fca:	e03d      	b.n	8003048 <USB_EPStartXfer+0x45c>
 8002fcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fce:	2b3e      	cmp	r3, #62	; 0x3e
 8002fd0:	d810      	bhi.n	8002ff4 <USB_EPStartXfer+0x408>
 8002fd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fd4:	085b      	lsrs	r3, r3, #1
 8002fd6:	61bb      	str	r3, [r7, #24]
 8002fd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fda:	f003 0301 	and.w	r3, r3, #1
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d002      	beq.n	8002fe8 <USB_EPStartXfer+0x3fc>
 8002fe2:	69bb      	ldr	r3, [r7, #24]
 8002fe4:	3301      	adds	r3, #1
 8002fe6:	61bb      	str	r3, [r7, #24]
 8002fe8:	69bb      	ldr	r3, [r7, #24]
 8002fea:	b29b      	uxth	r3, r3
 8002fec:	029b      	lsls	r3, r3, #10
 8002fee:	b29b      	uxth	r3, r3
 8002ff0:	8023      	strh	r3, [r4, #0]
 8002ff2:	e029      	b.n	8003048 <USB_EPStartXfer+0x45c>
 8002ff4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ff6:	095b      	lsrs	r3, r3, #5
 8002ff8:	61bb      	str	r3, [r7, #24]
 8002ffa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ffc:	f003 031f 	and.w	r3, r3, #31
 8003000:	2b00      	cmp	r3, #0
 8003002:	d102      	bne.n	800300a <USB_EPStartXfer+0x41e>
 8003004:	69bb      	ldr	r3, [r7, #24]
 8003006:	3b01      	subs	r3, #1
 8003008:	61bb      	str	r3, [r7, #24]
 800300a:	69bb      	ldr	r3, [r7, #24]
 800300c:	b29b      	uxth	r3, r3
 800300e:	029b      	lsls	r3, r3, #10
 8003010:	b29b      	uxth	r3, r3
 8003012:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003016:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800301a:	b29b      	uxth	r3, r3
 800301c:	8023      	strh	r3, [r4, #0]
 800301e:	e013      	b.n	8003048 <USB_EPStartXfer+0x45c>
 8003020:	683b      	ldr	r3, [r7, #0]
 8003022:	785b      	ldrb	r3, [r3, #1]
 8003024:	2b01      	cmp	r3, #1
 8003026:	d10f      	bne.n	8003048 <USB_EPStartXfer+0x45c>
 8003028:	687c      	ldr	r4, [r7, #4]
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003030:	b29b      	uxth	r3, r3
 8003032:	441c      	add	r4, r3
 8003034:	683b      	ldr	r3, [r7, #0]
 8003036:	781b      	ldrb	r3, [r3, #0]
 8003038:	011b      	lsls	r3, r3, #4
 800303a:	4423      	add	r3, r4
 800303c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003040:	461c      	mov	r4, r3
 8003042:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003044:	b29b      	uxth	r3, r3
 8003046:	8023      	strh	r3, [r4, #0]
 8003048:	687c      	ldr	r4, [r7, #4]
 800304a:	683b      	ldr	r3, [r7, #0]
 800304c:	785b      	ldrb	r3, [r3, #1]
 800304e:	2b00      	cmp	r3, #0
 8003050:	d14e      	bne.n	80030f0 <USB_EPStartXfer+0x504>
 8003052:	687c      	ldr	r4, [r7, #4]
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800305a:	b29b      	uxth	r3, r3
 800305c:	441c      	add	r4, r3
 800305e:	683b      	ldr	r3, [r7, #0]
 8003060:	781b      	ldrb	r3, [r3, #0]
 8003062:	011b      	lsls	r3, r3, #4
 8003064:	4423      	add	r3, r4
 8003066:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800306a:	461c      	mov	r4, r3
 800306c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800306e:	2b00      	cmp	r3, #0
 8003070:	d10e      	bne.n	8003090 <USB_EPStartXfer+0x4a4>
 8003072:	8823      	ldrh	r3, [r4, #0]
 8003074:	b29b      	uxth	r3, r3
 8003076:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800307a:	b29b      	uxth	r3, r3
 800307c:	8023      	strh	r3, [r4, #0]
 800307e:	8823      	ldrh	r3, [r4, #0]
 8003080:	b29b      	uxth	r3, r3
 8003082:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003086:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800308a:	b29b      	uxth	r3, r3
 800308c:	8023      	strh	r3, [r4, #0]
 800308e:	e043      	b.n	8003118 <USB_EPStartXfer+0x52c>
 8003090:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003092:	2b3e      	cmp	r3, #62	; 0x3e
 8003094:	d816      	bhi.n	80030c4 <USB_EPStartXfer+0x4d8>
 8003096:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003098:	085b      	lsrs	r3, r3, #1
 800309a:	617b      	str	r3, [r7, #20]
 800309c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800309e:	f003 0301 	and.w	r3, r3, #1
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d002      	beq.n	80030ac <USB_EPStartXfer+0x4c0>
 80030a6:	697b      	ldr	r3, [r7, #20]
 80030a8:	3301      	adds	r3, #1
 80030aa:	617b      	str	r3, [r7, #20]
 80030ac:	697b      	ldr	r3, [r7, #20]
 80030ae:	b29b      	uxth	r3, r3
 80030b0:	029b      	lsls	r3, r3, #10
 80030b2:	b29b      	uxth	r3, r3
 80030b4:	8023      	strh	r3, [r4, #0]
 80030b6:	e02f      	b.n	8003118 <USB_EPStartXfer+0x52c>
 80030b8:	ffff80c0 	.word	0xffff80c0
 80030bc:	ffffc080 	.word	0xffffc080
 80030c0:	ffff8080 	.word	0xffff8080
 80030c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030c6:	095b      	lsrs	r3, r3, #5
 80030c8:	617b      	str	r3, [r7, #20]
 80030ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030cc:	f003 031f 	and.w	r3, r3, #31
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d102      	bne.n	80030da <USB_EPStartXfer+0x4ee>
 80030d4:	697b      	ldr	r3, [r7, #20]
 80030d6:	3b01      	subs	r3, #1
 80030d8:	617b      	str	r3, [r7, #20]
 80030da:	697b      	ldr	r3, [r7, #20]
 80030dc:	b29b      	uxth	r3, r3
 80030de:	029b      	lsls	r3, r3, #10
 80030e0:	b29b      	uxth	r3, r3
 80030e2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80030e6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80030ea:	b29b      	uxth	r3, r3
 80030ec:	8023      	strh	r3, [r4, #0]
 80030ee:	e013      	b.n	8003118 <USB_EPStartXfer+0x52c>
 80030f0:	683b      	ldr	r3, [r7, #0]
 80030f2:	785b      	ldrb	r3, [r3, #1]
 80030f4:	2b01      	cmp	r3, #1
 80030f6:	d10f      	bne.n	8003118 <USB_EPStartXfer+0x52c>
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80030fe:	b29b      	uxth	r3, r3
 8003100:	441c      	add	r4, r3
 8003102:	683b      	ldr	r3, [r7, #0]
 8003104:	781b      	ldrb	r3, [r3, #0]
 8003106:	011b      	lsls	r3, r3, #4
 8003108:	4423      	add	r3, r4
 800310a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800310e:	613b      	str	r3, [r7, #16]
 8003110:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003112:	b29a      	uxth	r2, r3
 8003114:	693b      	ldr	r3, [r7, #16]
 8003116:	801a      	strh	r2, [r3, #0]
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8003118:	687a      	ldr	r2, [r7, #4]
 800311a:	683b      	ldr	r3, [r7, #0]
 800311c:	781b      	ldrb	r3, [r3, #0]
 800311e:	009b      	lsls	r3, r3, #2
 8003120:	4413      	add	r3, r2
 8003122:	881b      	ldrh	r3, [r3, #0]
 8003124:	b29b      	uxth	r3, r3
 8003126:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800312a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800312e:	b29c      	uxth	r4, r3
 8003130:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8003134:	b29c      	uxth	r4, r3
 8003136:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 800313a:	b29c      	uxth	r4, r3
 800313c:	687a      	ldr	r2, [r7, #4]
 800313e:	683b      	ldr	r3, [r7, #0]
 8003140:	781b      	ldrb	r3, [r3, #0]
 8003142:	009b      	lsls	r3, r3, #2
 8003144:	441a      	add	r2, r3
 8003146:	4b04      	ldr	r3, [pc, #16]	; (8003158 <USB_EPStartXfer+0x56c>)
 8003148:	4323      	orrs	r3, r4
 800314a:	b29b      	uxth	r3, r3
 800314c:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800314e:	2300      	movs	r3, #0
}
 8003150:	4618      	mov	r0, r3
 8003152:	3734      	adds	r7, #52	; 0x34
 8003154:	46bd      	mov	sp, r7
 8003156:	bd90      	pop	{r4, r7, pc}
 8003158:	ffff8080 	.word	0xffff8080

0800315c <USB_EPSetStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800315c:	b490      	push	{r4, r7}
 800315e:	b082      	sub	sp, #8
 8003160:	af00      	add	r7, sp, #0
 8003162:	6078      	str	r0, [r7, #4]
 8003164:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8003166:	683b      	ldr	r3, [r7, #0]
 8003168:	785b      	ldrb	r3, [r3, #1]
 800316a:	2b00      	cmp	r3, #0
 800316c:	d018      	beq.n	80031a0 <USB_EPSetStall+0x44>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800316e:	687a      	ldr	r2, [r7, #4]
 8003170:	683b      	ldr	r3, [r7, #0]
 8003172:	781b      	ldrb	r3, [r3, #0]
 8003174:	009b      	lsls	r3, r3, #2
 8003176:	4413      	add	r3, r2
 8003178:	881b      	ldrh	r3, [r3, #0]
 800317a:	b29b      	uxth	r3, r3
 800317c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003180:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003184:	b29c      	uxth	r4, r3
 8003186:	f084 0310 	eor.w	r3, r4, #16
 800318a:	b29c      	uxth	r4, r3
 800318c:	687a      	ldr	r2, [r7, #4]
 800318e:	683b      	ldr	r3, [r7, #0]
 8003190:	781b      	ldrb	r3, [r3, #0]
 8003192:	009b      	lsls	r3, r3, #2
 8003194:	441a      	add	r2, r3
 8003196:	4b11      	ldr	r3, [pc, #68]	; (80031dc <USB_EPSetStall+0x80>)
 8003198:	4323      	orrs	r3, r4
 800319a:	b29b      	uxth	r3, r3
 800319c:	8013      	strh	r3, [r2, #0]
 800319e:	e017      	b.n	80031d0 <USB_EPSetStall+0x74>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 80031a0:	687a      	ldr	r2, [r7, #4]
 80031a2:	683b      	ldr	r3, [r7, #0]
 80031a4:	781b      	ldrb	r3, [r3, #0]
 80031a6:	009b      	lsls	r3, r3, #2
 80031a8:	4413      	add	r3, r2
 80031aa:	881b      	ldrh	r3, [r3, #0]
 80031ac:	b29b      	uxth	r3, r3
 80031ae:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80031b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80031b6:	b29c      	uxth	r4, r3
 80031b8:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 80031bc:	b29c      	uxth	r4, r3
 80031be:	687a      	ldr	r2, [r7, #4]
 80031c0:	683b      	ldr	r3, [r7, #0]
 80031c2:	781b      	ldrb	r3, [r3, #0]
 80031c4:	009b      	lsls	r3, r3, #2
 80031c6:	441a      	add	r2, r3
 80031c8:	4b04      	ldr	r3, [pc, #16]	; (80031dc <USB_EPSetStall+0x80>)
 80031ca:	4323      	orrs	r3, r4
 80031cc:	b29b      	uxth	r3, r3
 80031ce:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80031d0:	2300      	movs	r3, #0
}
 80031d2:	4618      	mov	r0, r3
 80031d4:	3708      	adds	r7, #8
 80031d6:	46bd      	mov	sp, r7
 80031d8:	bc90      	pop	{r4, r7}
 80031da:	4770      	bx	lr
 80031dc:	ffff8080 	.word	0xffff8080

080031e0 <USB_EPClearStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80031e0:	b490      	push	{r4, r7}
 80031e2:	b082      	sub	sp, #8
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	6078      	str	r0, [r7, #4]
 80031e8:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80031ea:	683b      	ldr	r3, [r7, #0]
 80031ec:	7b1b      	ldrb	r3, [r3, #12]
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d17d      	bne.n	80032ee <USB_EPClearStall+0x10e>
  {
    if (ep->is_in != 0U)
 80031f2:	683b      	ldr	r3, [r7, #0]
 80031f4:	785b      	ldrb	r3, [r3, #1]
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d03d      	beq.n	8003276 <USB_EPClearStall+0x96>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80031fa:	687a      	ldr	r2, [r7, #4]
 80031fc:	683b      	ldr	r3, [r7, #0]
 80031fe:	781b      	ldrb	r3, [r3, #0]
 8003200:	009b      	lsls	r3, r3, #2
 8003202:	4413      	add	r3, r2
 8003204:	881b      	ldrh	r3, [r3, #0]
 8003206:	b29c      	uxth	r4, r3
 8003208:	4623      	mov	r3, r4
 800320a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800320e:	2b00      	cmp	r3, #0
 8003210:	d014      	beq.n	800323c <USB_EPClearStall+0x5c>
 8003212:	687a      	ldr	r2, [r7, #4]
 8003214:	683b      	ldr	r3, [r7, #0]
 8003216:	781b      	ldrb	r3, [r3, #0]
 8003218:	009b      	lsls	r3, r3, #2
 800321a:	4413      	add	r3, r2
 800321c:	881b      	ldrh	r3, [r3, #0]
 800321e:	b29b      	uxth	r3, r3
 8003220:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003224:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003228:	b29c      	uxth	r4, r3
 800322a:	687a      	ldr	r2, [r7, #4]
 800322c:	683b      	ldr	r3, [r7, #0]
 800322e:	781b      	ldrb	r3, [r3, #0]
 8003230:	009b      	lsls	r3, r3, #2
 8003232:	441a      	add	r2, r3
 8003234:	4b31      	ldr	r3, [pc, #196]	; (80032fc <USB_EPClearStall+0x11c>)
 8003236:	4323      	orrs	r3, r4
 8003238:	b29b      	uxth	r3, r3
 800323a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800323c:	683b      	ldr	r3, [r7, #0]
 800323e:	78db      	ldrb	r3, [r3, #3]
 8003240:	2b01      	cmp	r3, #1
 8003242:	d054      	beq.n	80032ee <USB_EPClearStall+0x10e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8003244:	687a      	ldr	r2, [r7, #4]
 8003246:	683b      	ldr	r3, [r7, #0]
 8003248:	781b      	ldrb	r3, [r3, #0]
 800324a:	009b      	lsls	r3, r3, #2
 800324c:	4413      	add	r3, r2
 800324e:	881b      	ldrh	r3, [r3, #0]
 8003250:	b29b      	uxth	r3, r3
 8003252:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003256:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800325a:	b29c      	uxth	r4, r3
 800325c:	f084 0320 	eor.w	r3, r4, #32
 8003260:	b29c      	uxth	r4, r3
 8003262:	687a      	ldr	r2, [r7, #4]
 8003264:	683b      	ldr	r3, [r7, #0]
 8003266:	781b      	ldrb	r3, [r3, #0]
 8003268:	009b      	lsls	r3, r3, #2
 800326a:	441a      	add	r2, r3
 800326c:	4b24      	ldr	r3, [pc, #144]	; (8003300 <USB_EPClearStall+0x120>)
 800326e:	4323      	orrs	r3, r4
 8003270:	b29b      	uxth	r3, r3
 8003272:	8013      	strh	r3, [r2, #0]
 8003274:	e03b      	b.n	80032ee <USB_EPClearStall+0x10e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003276:	687a      	ldr	r2, [r7, #4]
 8003278:	683b      	ldr	r3, [r7, #0]
 800327a:	781b      	ldrb	r3, [r3, #0]
 800327c:	009b      	lsls	r3, r3, #2
 800327e:	4413      	add	r3, r2
 8003280:	881b      	ldrh	r3, [r3, #0]
 8003282:	b29c      	uxth	r4, r3
 8003284:	4623      	mov	r3, r4
 8003286:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800328a:	2b00      	cmp	r3, #0
 800328c:	d014      	beq.n	80032b8 <USB_EPClearStall+0xd8>
 800328e:	687a      	ldr	r2, [r7, #4]
 8003290:	683b      	ldr	r3, [r7, #0]
 8003292:	781b      	ldrb	r3, [r3, #0]
 8003294:	009b      	lsls	r3, r3, #2
 8003296:	4413      	add	r3, r2
 8003298:	881b      	ldrh	r3, [r3, #0]
 800329a:	b29b      	uxth	r3, r3
 800329c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80032a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80032a4:	b29c      	uxth	r4, r3
 80032a6:	687a      	ldr	r2, [r7, #4]
 80032a8:	683b      	ldr	r3, [r7, #0]
 80032aa:	781b      	ldrb	r3, [r3, #0]
 80032ac:	009b      	lsls	r3, r3, #2
 80032ae:	441a      	add	r2, r3
 80032b0:	4b14      	ldr	r3, [pc, #80]	; (8003304 <USB_EPClearStall+0x124>)
 80032b2:	4323      	orrs	r3, r4
 80032b4:	b29b      	uxth	r3, r3
 80032b6:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80032b8:	687a      	ldr	r2, [r7, #4]
 80032ba:	683b      	ldr	r3, [r7, #0]
 80032bc:	781b      	ldrb	r3, [r3, #0]
 80032be:	009b      	lsls	r3, r3, #2
 80032c0:	4413      	add	r3, r2
 80032c2:	881b      	ldrh	r3, [r3, #0]
 80032c4:	b29b      	uxth	r3, r3
 80032c6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80032ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80032ce:	b29c      	uxth	r4, r3
 80032d0:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 80032d4:	b29c      	uxth	r4, r3
 80032d6:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 80032da:	b29c      	uxth	r4, r3
 80032dc:	687a      	ldr	r2, [r7, #4]
 80032de:	683b      	ldr	r3, [r7, #0]
 80032e0:	781b      	ldrb	r3, [r3, #0]
 80032e2:	009b      	lsls	r3, r3, #2
 80032e4:	441a      	add	r2, r3
 80032e6:	4b06      	ldr	r3, [pc, #24]	; (8003300 <USB_EPClearStall+0x120>)
 80032e8:	4323      	orrs	r3, r4
 80032ea:	b29b      	uxth	r3, r3
 80032ec:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 80032ee:	2300      	movs	r3, #0
}
 80032f0:	4618      	mov	r0, r3
 80032f2:	3708      	adds	r7, #8
 80032f4:	46bd      	mov	sp, r7
 80032f6:	bc90      	pop	{r4, r7}
 80032f8:	4770      	bx	lr
 80032fa:	bf00      	nop
 80032fc:	ffff80c0 	.word	0xffff80c0
 8003300:	ffff8080 	.word	0xffff8080
 8003304:	ffffc080 	.word	0xffffc080

08003308 <USB_SetDevAddress>:
  * @param  address : new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8003308:	b480      	push	{r7}
 800330a:	b083      	sub	sp, #12
 800330c:	af00      	add	r7, sp, #0
 800330e:	6078      	str	r0, [r7, #4]
 8003310:	460b      	mov	r3, r1
 8003312:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8003314:	78fb      	ldrb	r3, [r7, #3]
 8003316:	2b00      	cmp	r3, #0
 8003318:	d103      	bne.n	8003322 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = USB_DADDR_EF;
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	2280      	movs	r2, #128	; 0x80
 800331e:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8003322:	2300      	movs	r3, #0
}
 8003324:	4618      	mov	r0, r3
 8003326:	370c      	adds	r7, #12
 8003328:	46bd      	mov	sp, r7
 800332a:	bc80      	pop	{r7}
 800332c:	4770      	bx	lr

0800332e <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800332e:	b480      	push	{r7}
 8003330:	b083      	sub	sp, #12
 8003332:	af00      	add	r7, sp, #0
 8003334:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8003336:	2300      	movs	r3, #0
}
 8003338:	4618      	mov	r0, r3
 800333a:	370c      	adds	r7, #12
 800333c:	46bd      	mov	sp, r7
 800333e:	bc80      	pop	{r7}
 8003340:	4770      	bx	lr

08003342 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8003342:	b480      	push	{r7}
 8003344:	b083      	sub	sp, #12
 8003346:	af00      	add	r7, sp, #0
 8003348:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800334a:	2300      	movs	r3, #0
}
 800334c:	4618      	mov	r0, r3
 800334e:	370c      	adds	r7, #12
 8003350:	46bd      	mov	sp, r7
 8003352:	bc80      	pop	{r7}
 8003354:	4770      	bx	lr

08003356 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx : Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8003356:	b480      	push	{r7}
 8003358:	b085      	sub	sp, #20
 800335a:	af00      	add	r7, sp, #0
 800335c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003364:	b29b      	uxth	r3, r3
 8003366:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8003368:	68fb      	ldr	r3, [r7, #12]
}
 800336a:	4618      	mov	r0, r3
 800336c:	3714      	adds	r7, #20
 800336e:	46bd      	mov	sp, r7
 8003370:	bc80      	pop	{r7}
 8003372:	4770      	bx	lr

08003374 <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8003374:	b480      	push	{r7}
 8003376:	b083      	sub	sp, #12
 8003378:	af00      	add	r7, sp, #0
 800337a:	6078      	str	r0, [r7, #4]
 800337c:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800337e:	2300      	movs	r3, #0
}
 8003380:	4618      	mov	r0, r3
 8003382:	370c      	adds	r7, #12
 8003384:	46bd      	mov	sp, r7
 8003386:	bc80      	pop	{r7}
 8003388:	4770      	bx	lr

0800338a <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800338a:	b480      	push	{r7}
 800338c:	b08d      	sub	sp, #52	; 0x34
 800338e:	af00      	add	r7, sp, #0
 8003390:	60f8      	str	r0, [r7, #12]
 8003392:	60b9      	str	r1, [r7, #8]
 8003394:	4611      	mov	r1, r2
 8003396:	461a      	mov	r2, r3
 8003398:	460b      	mov	r3, r1
 800339a:	80fb      	strh	r3, [r7, #6]
 800339c:	4613      	mov	r3, r2
 800339e:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80033a0:	88bb      	ldrh	r3, [r7, #4]
 80033a2:	3301      	adds	r3, #1
 80033a4:	085b      	lsrs	r3, r3, #1
 80033a6:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80033ac:	68bb      	ldr	r3, [r7, #8]
 80033ae:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80033b0:	88fb      	ldrh	r3, [r7, #6]
 80033b2:	005a      	lsls	r2, r3, #1
 80033b4:	69fb      	ldr	r3, [r7, #28]
 80033b6:	4413      	add	r3, r2
 80033b8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80033bc:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 80033be:	6a3b      	ldr	r3, [r7, #32]
 80033c0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80033c2:	e01e      	b.n	8003402 <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 80033c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033c6:	781b      	ldrb	r3, [r3, #0]
 80033c8:	61bb      	str	r3, [r7, #24]
    pBuf++;
 80033ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033cc:	3301      	adds	r3, #1
 80033ce:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 80033d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033d2:	781b      	ldrb	r3, [r3, #0]
 80033d4:	b29b      	uxth	r3, r3
 80033d6:	021b      	lsls	r3, r3, #8
 80033d8:	b29b      	uxth	r3, r3
 80033da:	461a      	mov	r2, r3
 80033dc:	69bb      	ldr	r3, [r7, #24]
 80033de:	4313      	orrs	r3, r2
 80033e0:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 80033e2:	697b      	ldr	r3, [r7, #20]
 80033e4:	b29a      	uxth	r2, r3
 80033e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033e8:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 80033ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033ec:	3302      	adds	r3, #2
 80033ee:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 80033f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033f2:	3302      	adds	r3, #2
 80033f4:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 80033f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033f8:	3301      	adds	r3, #1
 80033fa:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 80033fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033fe:	3b01      	subs	r3, #1
 8003400:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003402:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003404:	2b00      	cmp	r3, #0
 8003406:	d1dd      	bne.n	80033c4 <USB_WritePMA+0x3a>
  }
}
 8003408:	bf00      	nop
 800340a:	3734      	adds	r7, #52	; 0x34
 800340c:	46bd      	mov	sp, r7
 800340e:	bc80      	pop	{r7}
 8003410:	4770      	bx	lr

08003412 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8003412:	b480      	push	{r7}
 8003414:	b08b      	sub	sp, #44	; 0x2c
 8003416:	af00      	add	r7, sp, #0
 8003418:	60f8      	str	r0, [r7, #12]
 800341a:	60b9      	str	r1, [r7, #8]
 800341c:	4611      	mov	r1, r2
 800341e:	461a      	mov	r2, r3
 8003420:	460b      	mov	r3, r1
 8003422:	80fb      	strh	r3, [r7, #6]
 8003424:	4613      	mov	r3, r2
 8003426:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8003428:	88bb      	ldrh	r3, [r7, #4]
 800342a:	085b      	lsrs	r3, r3, #1
 800342c:	b29b      	uxth	r3, r3
 800342e:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8003434:	68bb      	ldr	r3, [r7, #8]
 8003436:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8003438:	88fb      	ldrh	r3, [r7, #6]
 800343a:	005a      	lsls	r2, r3, #1
 800343c:	697b      	ldr	r3, [r7, #20]
 800343e:	4413      	add	r3, r2
 8003440:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003444:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8003446:	69bb      	ldr	r3, [r7, #24]
 8003448:	627b      	str	r3, [r7, #36]	; 0x24
 800344a:	e01b      	b.n	8003484 <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 800344c:	6a3b      	ldr	r3, [r7, #32]
 800344e:	881b      	ldrh	r3, [r3, #0]
 8003450:	b29b      	uxth	r3, r3
 8003452:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8003454:	6a3b      	ldr	r3, [r7, #32]
 8003456:	3302      	adds	r3, #2
 8003458:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800345a:	693b      	ldr	r3, [r7, #16]
 800345c:	b2da      	uxtb	r2, r3
 800345e:	69fb      	ldr	r3, [r7, #28]
 8003460:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8003462:	69fb      	ldr	r3, [r7, #28]
 8003464:	3301      	adds	r3, #1
 8003466:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8003468:	693b      	ldr	r3, [r7, #16]
 800346a:	0a1b      	lsrs	r3, r3, #8
 800346c:	b2da      	uxtb	r2, r3
 800346e:	69fb      	ldr	r3, [r7, #28]
 8003470:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8003472:	69fb      	ldr	r3, [r7, #28]
 8003474:	3301      	adds	r3, #1
 8003476:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8003478:	6a3b      	ldr	r3, [r7, #32]
 800347a:	3302      	adds	r3, #2
 800347c:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 800347e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003480:	3b01      	subs	r3, #1
 8003482:	627b      	str	r3, [r7, #36]	; 0x24
 8003484:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003486:	2b00      	cmp	r3, #0
 8003488:	d1e0      	bne.n	800344c <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 800348a:	88bb      	ldrh	r3, [r7, #4]
 800348c:	f003 0301 	and.w	r3, r3, #1
 8003490:	b29b      	uxth	r3, r3
 8003492:	2b00      	cmp	r3, #0
 8003494:	d007      	beq.n	80034a6 <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 8003496:	6a3b      	ldr	r3, [r7, #32]
 8003498:	881b      	ldrh	r3, [r3, #0]
 800349a:	b29b      	uxth	r3, r3
 800349c:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800349e:	693b      	ldr	r3, [r7, #16]
 80034a0:	b2da      	uxtb	r2, r3
 80034a2:	69fb      	ldr	r3, [r7, #28]
 80034a4:	701a      	strb	r2, [r3, #0]
  }
}
 80034a6:	bf00      	nop
 80034a8:	372c      	adds	r7, #44	; 0x2c
 80034aa:	46bd      	mov	sp, r7
 80034ac:	bc80      	pop	{r7}
 80034ae:	4770      	bx	lr

080034b0 <USBD_MSC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80034b0:	b580      	push	{r7, lr}
 80034b2:	b082      	sub	sp, #8
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	6078      	str	r0, [r7, #4]
 80034b8:	460b      	mov	r3, r1
 80034ba:	70fb      	strb	r3, [r7, #3]
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	7c1b      	ldrb	r3, [r3, #16]
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d115      	bne.n	80034f0 <USBD_MSC_Init+0x40>
  {
    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, MSC_EPOUT_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 80034c4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80034c8:	2202      	movs	r2, #2
 80034ca:	2101      	movs	r1, #1
 80034cc:	6878      	ldr	r0, [r7, #4]
 80034ce:	f002 fd7c 	bl	8005fca <USBD_LL_OpenEP>
    pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 1U;
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	2201      	movs	r2, #1
 80034d6:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

    /* Open EP IN */
    USBD_LL_OpenEP(pdev, MSC_EPIN_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 80034da:	f44f 7300 	mov.w	r3, #512	; 0x200
 80034de:	2202      	movs	r2, #2
 80034e0:	2181      	movs	r1, #129	; 0x81
 80034e2:	6878      	ldr	r0, [r7, #4]
 80034e4:	f002 fd71 	bl	8005fca <USBD_LL_OpenEP>
    pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 1U;
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	2201      	movs	r2, #1
 80034ec:	62da      	str	r2, [r3, #44]	; 0x2c
 80034ee:	e012      	b.n	8003516 <USBD_MSC_Init+0x66>
  }
  else
  {
    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, MSC_EPOUT_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 80034f0:	2340      	movs	r3, #64	; 0x40
 80034f2:	2202      	movs	r2, #2
 80034f4:	2101      	movs	r1, #1
 80034f6:	6878      	ldr	r0, [r7, #4]
 80034f8:	f002 fd67 	bl	8005fca <USBD_LL_OpenEP>
    pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 1U;
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	2201      	movs	r2, #1
 8003500:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

    /* Open EP IN */
    USBD_LL_OpenEP(pdev, MSC_EPIN_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 8003504:	2340      	movs	r3, #64	; 0x40
 8003506:	2202      	movs	r2, #2
 8003508:	2181      	movs	r1, #129	; 0x81
 800350a:	6878      	ldr	r0, [r7, #4]
 800350c:	f002 fd5d 	bl	8005fca <USBD_LL_OpenEP>
    pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 1U;
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	2201      	movs	r2, #1
 8003514:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  pdev->pClassData = USBD_malloc(sizeof(USBD_MSC_BOT_HandleTypeDef));
 8003516:	f44f 701b 	mov.w	r0, #620	; 0x26c
 800351a:	f002 fe95 	bl	8006248 <USBD_static_malloc>
 800351e:	4602      	mov	r2, r0
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800352c:	2b00      	cmp	r3, #0
 800352e:	d101      	bne.n	8003534 <USBD_MSC_Init+0x84>
  {
    return USBD_FAIL;
 8003530:	2302      	movs	r3, #2
 8003532:	e003      	b.n	800353c <USBD_MSC_Init+0x8c>
  }

  /* Init the BOT  layer */
  MSC_BOT_Init(pdev);
 8003534:	6878      	ldr	r0, [r7, #4]
 8003536:	f000 f9d9 	bl	80038ec <MSC_BOT_Init>

  return USBD_OK;
 800353a:	2300      	movs	r3, #0
}
 800353c:	4618      	mov	r0, r3
 800353e:	3708      	adds	r7, #8
 8003540:	46bd      	mov	sp, r7
 8003542:	bd80      	pop	{r7, pc}

08003544 <USBD_MSC_DeInit>:
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_DeInit(USBD_HandleTypeDef *pdev,
                         uint8_t cfgidx)
{
 8003544:	b580      	push	{r7, lr}
 8003546:	b082      	sub	sp, #8
 8003548:	af00      	add	r7, sp, #0
 800354a:	6078      	str	r0, [r7, #4]
 800354c:	460b      	mov	r3, r1
 800354e:	70fb      	strb	r3, [r7, #3]
  /* Close MSC EPs */
  USBD_LL_CloseEP(pdev, MSC_EPOUT_ADDR);
 8003550:	2101      	movs	r1, #1
 8003552:	6878      	ldr	r0, [r7, #4]
 8003554:	f002 fd5f 	bl	8006016 <USBD_LL_CloseEP>
  pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 0U;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	2200      	movs	r2, #0
 800355c:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, MSC_EPIN_ADDR);
 8003560:	2181      	movs	r1, #129	; 0x81
 8003562:	6878      	ldr	r0, [r7, #4]
 8003564:	f002 fd57 	bl	8006016 <USBD_LL_CloseEP>
  pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 0U;
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	2200      	movs	r2, #0
 800356c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* De-Init the BOT layer */
  MSC_BOT_DeInit(pdev);
 800356e:	6878      	ldr	r0, [r7, #4]
 8003570:	f000 fa06 	bl	8003980 <MSC_BOT_DeInit>

  /* Free MSC Class Resources */
  if (pdev->pClassData != NULL)
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800357a:	2b00      	cmp	r3, #0
 800357c:	d009      	beq.n	8003592 <USBD_MSC_DeInit+0x4e>
  {
    USBD_free(pdev->pClassData);
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8003584:	4618      	mov	r0, r3
 8003586:	f002 fe6b 	bl	8006260 <USBD_static_free>
    pdev->pClassData  = NULL;
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	2200      	movs	r2, #0
 800358e:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return USBD_OK;
 8003592:	2300      	movs	r3, #0
}
 8003594:	4618      	mov	r0, r3
 8003596:	3708      	adds	r7, #8
 8003598:	46bd      	mov	sp, r7
 800359a:	bd80      	pop	{r7, pc}

0800359c <USBD_MSC_Setup>:
* @param  pdev: device instance
* @param  req: USB request
* @retval status
*/
uint8_t USBD_MSC_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800359c:	b580      	push	{r7, lr}
 800359e:	b086      	sub	sp, #24
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	6078      	str	r0, [r7, #4]
 80035a4:	6039      	str	r1, [r7, #0]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *) pdev->pClassData;
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80035ac:	613b      	str	r3, [r7, #16]
  uint8_t ret = USBD_OK;
 80035ae:	2300      	movs	r3, #0
 80035b0:	75fb      	strb	r3, [r7, #23]
  uint16_t status_info = 0U;
 80035b2:	2300      	movs	r3, #0
 80035b4:	81fb      	strh	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80035b6:	683b      	ldr	r3, [r7, #0]
 80035b8:	781b      	ldrb	r3, [r3, #0]
 80035ba:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d04d      	beq.n	800365e <USBD_MSC_Setup+0xc2>
 80035c2:	2b20      	cmp	r3, #32
 80035c4:	f040 8113 	bne.w	80037ee <USBD_MSC_Setup+0x252>
  {
    /* Class request */
    case USB_REQ_TYPE_CLASS:
      switch (req->bRequest)
 80035c8:	683b      	ldr	r3, [r7, #0]
 80035ca:	785b      	ldrb	r3, [r3, #1]
 80035cc:	2bfe      	cmp	r3, #254	; 0xfe
 80035ce:	d002      	beq.n	80035d6 <USBD_MSC_Setup+0x3a>
 80035d0:	2bff      	cmp	r3, #255	; 0xff
 80035d2:	d024      	beq.n	800361e <USBD_MSC_Setup+0x82>
 80035d4:	e03b      	b.n	800364e <USBD_MSC_Setup+0xb2>
      {
        case BOT_GET_MAX_LUN:
          if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 80035d6:	683b      	ldr	r3, [r7, #0]
 80035d8:	885b      	ldrh	r3, [r3, #2]
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d118      	bne.n	8003610 <USBD_MSC_Setup+0x74>
 80035de:	683b      	ldr	r3, [r7, #0]
 80035e0:	88db      	ldrh	r3, [r3, #6]
 80035e2:	2b01      	cmp	r3, #1
 80035e4:	d114      	bne.n	8003610 <USBD_MSC_Setup+0x74>
              ((req->bmRequest & 0x80U) == 0x80U))
 80035e6:	683b      	ldr	r3, [r7, #0]
 80035e8:	781b      	ldrb	r3, [r3, #0]
 80035ea:	b25b      	sxtb	r3, r3
          if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	da0f      	bge.n	8003610 <USBD_MSC_Setup+0x74>
          {
            hmsc->max_lun = (uint32_t)((USBD_StorageTypeDef *)pdev->pUserData)->GetMaxLun();
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80035f6:	699b      	ldr	r3, [r3, #24]
 80035f8:	4798      	blx	r3
 80035fa:	4603      	mov	r3, r0
 80035fc:	461a      	mov	r2, r3
 80035fe:	693b      	ldr	r3, [r7, #16]
 8003600:	601a      	str	r2, [r3, #0]
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&hmsc->max_lun, 1U);
 8003602:	693b      	ldr	r3, [r7, #16]
 8003604:	2201      	movs	r2, #1
 8003606:	4619      	mov	r1, r3
 8003608:	6878      	ldr	r0, [r7, #4]
 800360a:	f002 f983 	bl	8005914 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800360e:	e025      	b.n	800365c <USBD_MSC_Setup+0xc0>
            USBD_CtlError(pdev, req);
 8003610:	6839      	ldr	r1, [r7, #0]
 8003612:	6878      	ldr	r0, [r7, #4]
 8003614:	f002 f914 	bl	8005840 <USBD_CtlError>
            ret = USBD_FAIL;
 8003618:	2302      	movs	r3, #2
 800361a:	75fb      	strb	r3, [r7, #23]
          break;
 800361c:	e01e      	b.n	800365c <USBD_MSC_Setup+0xc0>

        case BOT_RESET :
          if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 800361e:	683b      	ldr	r3, [r7, #0]
 8003620:	885b      	ldrh	r3, [r3, #2]
 8003622:	2b00      	cmp	r3, #0
 8003624:	d10c      	bne.n	8003640 <USBD_MSC_Setup+0xa4>
 8003626:	683b      	ldr	r3, [r7, #0]
 8003628:	88db      	ldrh	r3, [r3, #6]
 800362a:	2b00      	cmp	r3, #0
 800362c:	d108      	bne.n	8003640 <USBD_MSC_Setup+0xa4>
              ((req->bmRequest & 0x80U) != 0x80U))
 800362e:	683b      	ldr	r3, [r7, #0]
 8003630:	781b      	ldrb	r3, [r3, #0]
 8003632:	b25b      	sxtb	r3, r3
          if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 8003634:	2b00      	cmp	r3, #0
 8003636:	db03      	blt.n	8003640 <USBD_MSC_Setup+0xa4>
          {
            MSC_BOT_Reset(pdev);
 8003638:	6878      	ldr	r0, [r7, #4]
 800363a:	f000 f987 	bl	800394c <MSC_BOT_Reset>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800363e:	e00d      	b.n	800365c <USBD_MSC_Setup+0xc0>
            USBD_CtlError(pdev, req);
 8003640:	6839      	ldr	r1, [r7, #0]
 8003642:	6878      	ldr	r0, [r7, #4]
 8003644:	f002 f8fc 	bl	8005840 <USBD_CtlError>
            ret = USBD_FAIL;
 8003648:	2302      	movs	r3, #2
 800364a:	75fb      	strb	r3, [r7, #23]
          break;
 800364c:	e006      	b.n	800365c <USBD_MSC_Setup+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800364e:	6839      	ldr	r1, [r7, #0]
 8003650:	6878      	ldr	r0, [r7, #4]
 8003652:	f002 f8f5 	bl	8005840 <USBD_CtlError>
          ret = USBD_FAIL;
 8003656:	2302      	movs	r3, #2
 8003658:	75fb      	strb	r3, [r7, #23]
          break;
 800365a:	bf00      	nop
      }
      break;
 800365c:	e0ce      	b.n	80037fc <USBD_MSC_Setup+0x260>
    /* Interface & Endpoint request */
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800365e:	683b      	ldr	r3, [r7, #0]
 8003660:	785b      	ldrb	r3, [r3, #1]
 8003662:	2b0b      	cmp	r3, #11
 8003664:	f200 80bb 	bhi.w	80037de <USBD_MSC_Setup+0x242>
 8003668:	a201      	add	r2, pc, #4	; (adr r2, 8003670 <USBD_MSC_Setup+0xd4>)
 800366a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800366e:	bf00      	nop
 8003670:	080036a1 	.word	0x080036a1
 8003674:	08003717 	.word	0x08003717
 8003678:	080037df 	.word	0x080037df
 800367c:	080037df 	.word	0x080037df
 8003680:	080037df 	.word	0x080037df
 8003684:	080037df 	.word	0x080037df
 8003688:	080037df 	.word	0x080037df
 800368c:	080037df 	.word	0x080037df
 8003690:	080037df 	.word	0x080037df
 8003694:	080037df 	.word	0x080037df
 8003698:	080036c9 	.word	0x080036c9
 800369c:	080036f1 	.word	0x080036f1
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80036a6:	2b03      	cmp	r3, #3
 80036a8:	d107      	bne.n	80036ba <USBD_MSC_Setup+0x11e>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 80036aa:	f107 030e 	add.w	r3, r7, #14
 80036ae:	2202      	movs	r2, #2
 80036b0:	4619      	mov	r1, r3
 80036b2:	6878      	ldr	r0, [r7, #4]
 80036b4:	f002 f92e 	bl	8005914 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80036b8:	e098      	b.n	80037ec <USBD_MSC_Setup+0x250>
            USBD_CtlError(pdev, req);
 80036ba:	6839      	ldr	r1, [r7, #0]
 80036bc:	6878      	ldr	r0, [r7, #4]
 80036be:	f002 f8bf 	bl	8005840 <USBD_CtlError>
            ret = USBD_FAIL;
 80036c2:	2302      	movs	r3, #2
 80036c4:	75fb      	strb	r3, [r7, #23]
          break;
 80036c6:	e091      	b.n	80037ec <USBD_MSC_Setup+0x250>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80036ce:	2b03      	cmp	r3, #3
 80036d0:	d107      	bne.n	80036e2 <USBD_MSC_Setup+0x146>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&hmsc->interface, 1U);
 80036d2:	693b      	ldr	r3, [r7, #16]
 80036d4:	3304      	adds	r3, #4
 80036d6:	2201      	movs	r2, #1
 80036d8:	4619      	mov	r1, r3
 80036da:	6878      	ldr	r0, [r7, #4]
 80036dc:	f002 f91a 	bl	8005914 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80036e0:	e084      	b.n	80037ec <USBD_MSC_Setup+0x250>
            USBD_CtlError(pdev, req);
 80036e2:	6839      	ldr	r1, [r7, #0]
 80036e4:	6878      	ldr	r0, [r7, #4]
 80036e6:	f002 f8ab 	bl	8005840 <USBD_CtlError>
            ret = USBD_FAIL;
 80036ea:	2302      	movs	r3, #2
 80036ec:	75fb      	strb	r3, [r7, #23]
          break;
 80036ee:	e07d      	b.n	80037ec <USBD_MSC_Setup+0x250>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80036f6:	2b03      	cmp	r3, #3
 80036f8:	d106      	bne.n	8003708 <USBD_MSC_Setup+0x16c>
          {
            hmsc->interface = (uint8_t)(req->wValue);
 80036fa:	683b      	ldr	r3, [r7, #0]
 80036fc:	885b      	ldrh	r3, [r3, #2]
 80036fe:	b2db      	uxtb	r3, r3
 8003700:	461a      	mov	r2, r3
 8003702:	693b      	ldr	r3, [r7, #16]
 8003704:	605a      	str	r2, [r3, #4]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8003706:	e071      	b.n	80037ec <USBD_MSC_Setup+0x250>
            USBD_CtlError(pdev, req);
 8003708:	6839      	ldr	r1, [r7, #0]
 800370a:	6878      	ldr	r0, [r7, #4]
 800370c:	f002 f898 	bl	8005840 <USBD_CtlError>
            ret = USBD_FAIL;
 8003710:	2302      	movs	r3, #2
 8003712:	75fb      	strb	r3, [r7, #23]
          break;
 8003714:	e06a      	b.n	80037ec <USBD_MSC_Setup+0x250>

        case USB_REQ_CLEAR_FEATURE:

          /* Flush the FIFO and Clear the stall status */
          USBD_LL_FlushEP(pdev, (uint8_t)req->wIndex);
 8003716:	683b      	ldr	r3, [r7, #0]
 8003718:	889b      	ldrh	r3, [r3, #4]
 800371a:	b2db      	uxtb	r3, r3
 800371c:	4619      	mov	r1, r3
 800371e:	6878      	ldr	r0, [r7, #4]
 8003720:	f002 fc98 	bl	8006054 <USBD_LL_FlushEP>

          /* Reactivate the EP */
          USBD_LL_CloseEP(pdev, (uint8_t)req->wIndex);
 8003724:	683b      	ldr	r3, [r7, #0]
 8003726:	889b      	ldrh	r3, [r3, #4]
 8003728:	b2db      	uxtb	r3, r3
 800372a:	4619      	mov	r1, r3
 800372c:	6878      	ldr	r0, [r7, #4]
 800372e:	f002 fc72 	bl	8006016 <USBD_LL_CloseEP>
          if ((((uint8_t)req->wIndex) & 0x80U) == 0x80U)
 8003732:	683b      	ldr	r3, [r7, #0]
 8003734:	889b      	ldrh	r3, [r3, #4]
 8003736:	b25b      	sxtb	r3, r3
 8003738:	2b00      	cmp	r3, #0
 800373a:	da23      	bge.n	8003784 <USBD_MSC_Setup+0x1e8>
          {
            pdev->ep_in[(uint8_t)req->wIndex & 0xFU].is_used = 0U;
 800373c:	683b      	ldr	r3, [r7, #0]
 800373e:	889b      	ldrh	r3, [r3, #4]
 8003740:	b2db      	uxtb	r3, r3
 8003742:	f003 020f 	and.w	r2, r3, #15
 8003746:	6879      	ldr	r1, [r7, #4]
 8003748:	4613      	mov	r3, r2
 800374a:	009b      	lsls	r3, r3, #2
 800374c:	4413      	add	r3, r2
 800374e:	009b      	lsls	r3, r3, #2
 8003750:	440b      	add	r3, r1
 8003752:	3318      	adds	r3, #24
 8003754:	2200      	movs	r2, #0
 8003756:	601a      	str	r2, [r3, #0]
            if (pdev->dev_speed == USBD_SPEED_HIGH)
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	7c1b      	ldrb	r3, [r3, #16]
 800375c:	2b00      	cmp	r3, #0
 800375e:	d107      	bne.n	8003770 <USBD_MSC_Setup+0x1d4>
            {
              /* Open EP IN */
              USBD_LL_OpenEP(pdev, MSC_EPIN_ADDR, USBD_EP_TYPE_BULK,
 8003760:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003764:	2202      	movs	r2, #2
 8003766:	2181      	movs	r1, #129	; 0x81
 8003768:	6878      	ldr	r0, [r7, #4]
 800376a:	f002 fc2e 	bl	8005fca <USBD_LL_OpenEP>
 800376e:	e005      	b.n	800377c <USBD_MSC_Setup+0x1e0>
                             MSC_MAX_HS_PACKET);
            }
            else
            {
              /* Open EP IN */
              USBD_LL_OpenEP(pdev, MSC_EPIN_ADDR, USBD_EP_TYPE_BULK,
 8003770:	2340      	movs	r3, #64	; 0x40
 8003772:	2202      	movs	r2, #2
 8003774:	2181      	movs	r1, #129	; 0x81
 8003776:	6878      	ldr	r0, [r7, #4]
 8003778:	f002 fc27 	bl	8005fca <USBD_LL_OpenEP>
                             MSC_MAX_FS_PACKET);
            }
            pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 1U;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	2201      	movs	r2, #1
 8003780:	62da      	str	r2, [r3, #44]	; 0x2c
 8003782:	e024      	b.n	80037ce <USBD_MSC_Setup+0x232>
          }
          else
          {
            pdev->ep_out[(uint8_t)req->wIndex & 0xFU].is_used = 0U;
 8003784:	683b      	ldr	r3, [r7, #0]
 8003786:	889b      	ldrh	r3, [r3, #4]
 8003788:	b2db      	uxtb	r3, r3
 800378a:	f003 020f 	and.w	r2, r3, #15
 800378e:	6879      	ldr	r1, [r7, #4]
 8003790:	4613      	mov	r3, r2
 8003792:	009b      	lsls	r3, r3, #2
 8003794:	4413      	add	r3, r2
 8003796:	009b      	lsls	r3, r3, #2
 8003798:	440b      	add	r3, r1
 800379a:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 800379e:	2200      	movs	r2, #0
 80037a0:	601a      	str	r2, [r3, #0]
            if (pdev->dev_speed == USBD_SPEED_HIGH)
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	7c1b      	ldrb	r3, [r3, #16]
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d107      	bne.n	80037ba <USBD_MSC_Setup+0x21e>
            {
              /* Open EP OUT */
              USBD_LL_OpenEP(pdev, MSC_EPOUT_ADDR, USBD_EP_TYPE_BULK,
 80037aa:	f44f 7300 	mov.w	r3, #512	; 0x200
 80037ae:	2202      	movs	r2, #2
 80037b0:	2101      	movs	r1, #1
 80037b2:	6878      	ldr	r0, [r7, #4]
 80037b4:	f002 fc09 	bl	8005fca <USBD_LL_OpenEP>
 80037b8:	e005      	b.n	80037c6 <USBD_MSC_Setup+0x22a>
                             MSC_MAX_HS_PACKET);
            }
            else
            {
              /* Open EP OUT */
              USBD_LL_OpenEP(pdev, MSC_EPOUT_ADDR, USBD_EP_TYPE_BULK,
 80037ba:	2340      	movs	r3, #64	; 0x40
 80037bc:	2202      	movs	r2, #2
 80037be:	2101      	movs	r1, #1
 80037c0:	6878      	ldr	r0, [r7, #4]
 80037c2:	f002 fc02 	bl	8005fca <USBD_LL_OpenEP>
                             MSC_MAX_FS_PACKET);
            }
            pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 1U;
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	2201      	movs	r2, #1
 80037ca:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
          }

          /* Handle BOT error */
          MSC_BOT_CplClrFeature(pdev, (uint8_t)req->wIndex);
 80037ce:	683b      	ldr	r3, [r7, #0]
 80037d0:	889b      	ldrh	r3, [r3, #4]
 80037d2:	b2db      	uxtb	r3, r3
 80037d4:	4619      	mov	r1, r3
 80037d6:	6878      	ldr	r0, [r7, #4]
 80037d8:	f000 fa50 	bl	8003c7c <MSC_BOT_CplClrFeature>
          break;
 80037dc:	e006      	b.n	80037ec <USBD_MSC_Setup+0x250>

        default:
          USBD_CtlError(pdev, req);
 80037de:	6839      	ldr	r1, [r7, #0]
 80037e0:	6878      	ldr	r0, [r7, #4]
 80037e2:	f002 f82d 	bl	8005840 <USBD_CtlError>
          ret = USBD_FAIL;
 80037e6:	2302      	movs	r3, #2
 80037e8:	75fb      	strb	r3, [r7, #23]
          break;
 80037ea:	bf00      	nop
      }
      break;
 80037ec:	e006      	b.n	80037fc <USBD_MSC_Setup+0x260>

    default:
      USBD_CtlError(pdev, req);
 80037ee:	6839      	ldr	r1, [r7, #0]
 80037f0:	6878      	ldr	r0, [r7, #4]
 80037f2:	f002 f825 	bl	8005840 <USBD_CtlError>
      ret = USBD_FAIL;
 80037f6:	2302      	movs	r3, #2
 80037f8:	75fb      	strb	r3, [r7, #23]
      break;
 80037fa:	bf00      	nop
  }

  return ret;
 80037fc:	7dfb      	ldrb	r3, [r7, #23]
}
 80037fe:	4618      	mov	r0, r3
 8003800:	3718      	adds	r7, #24
 8003802:	46bd      	mov	sp, r7
 8003804:	bd80      	pop	{r7, pc}
 8003806:	bf00      	nop

08003808 <USBD_MSC_DataIn>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
uint8_t USBD_MSC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8003808:	b580      	push	{r7, lr}
 800380a:	b082      	sub	sp, #8
 800380c:	af00      	add	r7, sp, #0
 800380e:	6078      	str	r0, [r7, #4]
 8003810:	460b      	mov	r3, r1
 8003812:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataIn(pdev, epnum);
 8003814:	78fb      	ldrb	r3, [r7, #3]
 8003816:	4619      	mov	r1, r3
 8003818:	6878      	ldr	r0, [r7, #4]
 800381a:	f000 f8c1 	bl	80039a0 <MSC_BOT_DataIn>

  return USBD_OK;
 800381e:	2300      	movs	r3, #0
}
 8003820:	4618      	mov	r0, r3
 8003822:	3708      	adds	r7, #8
 8003824:	46bd      	mov	sp, r7
 8003826:	bd80      	pop	{r7, pc}

08003828 <USBD_MSC_DataOut>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
uint8_t USBD_MSC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8003828:	b580      	push	{r7, lr}
 800382a:	b082      	sub	sp, #8
 800382c:	af00      	add	r7, sp, #0
 800382e:	6078      	str	r0, [r7, #4]
 8003830:	460b      	mov	r3, r1
 8003832:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataOut(pdev, epnum);
 8003834:	78fb      	ldrb	r3, [r7, #3]
 8003836:	4619      	mov	r1, r3
 8003838:	6878      	ldr	r0, [r7, #4]
 800383a:	f000 f8e2 	bl	8003a02 <MSC_BOT_DataOut>

  return USBD_OK;
 800383e:	2300      	movs	r3, #0
}
 8003840:	4618      	mov	r0, r3
 8003842:	3708      	adds	r7, #8
 8003844:	46bd      	mov	sp, r7
 8003846:	bd80      	pop	{r7, pc}

08003848 <USBD_MSC_GetHSCfgDesc>:
*         return configuration descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_MSC_GetHSCfgDesc(uint16_t *length)
{
 8003848:	b480      	push	{r7}
 800384a:	b083      	sub	sp, #12
 800384c:	af00      	add	r7, sp, #0
 800384e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_MSC_CfgHSDesc);
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	2220      	movs	r2, #32
 8003854:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_CfgHSDesc;
 8003856:	4b03      	ldr	r3, [pc, #12]	; (8003864 <USBD_MSC_GetHSCfgDesc+0x1c>)
}
 8003858:	4618      	mov	r0, r3
 800385a:	370c      	adds	r7, #12
 800385c:	46bd      	mov	sp, r7
 800385e:	bc80      	pop	{r7}
 8003860:	4770      	bx	lr
 8003862:	bf00      	nop
 8003864:	20000044 	.word	0x20000044

08003868 <USBD_MSC_GetFSCfgDesc>:
*         return configuration descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_MSC_GetFSCfgDesc(uint16_t *length)
{
 8003868:	b480      	push	{r7}
 800386a:	b083      	sub	sp, #12
 800386c:	af00      	add	r7, sp, #0
 800386e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_MSC_CfgFSDesc);
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	2220      	movs	r2, #32
 8003874:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_CfgFSDesc;
 8003876:	4b03      	ldr	r3, [pc, #12]	; (8003884 <USBD_MSC_GetFSCfgDesc+0x1c>)
}
 8003878:	4618      	mov	r0, r3
 800387a:	370c      	adds	r7, #12
 800387c:	46bd      	mov	sp, r7
 800387e:	bc80      	pop	{r7}
 8003880:	4770      	bx	lr
 8003882:	bf00      	nop
 8003884:	20000064 	.word	0x20000064

08003888 <USBD_MSC_GetOtherSpeedCfgDesc>:
*         return other speed configuration descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_MSC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8003888:	b480      	push	{r7}
 800388a:	b083      	sub	sp, #12
 800388c:	af00      	add	r7, sp, #0
 800388e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_MSC_OtherSpeedCfgDesc);
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	2220      	movs	r2, #32
 8003894:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_OtherSpeedCfgDesc;
 8003896:	4b03      	ldr	r3, [pc, #12]	; (80038a4 <USBD_MSC_GetOtherSpeedCfgDesc+0x1c>)
}
 8003898:	4618      	mov	r0, r3
 800389a:	370c      	adds	r7, #12
 800389c:	46bd      	mov	sp, r7
 800389e:	bc80      	pop	{r7}
 80038a0:	4770      	bx	lr
 80038a2:	bf00      	nop
 80038a4:	20000084 	.word	0x20000084

080038a8 <USBD_MSC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_MSC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80038a8:	b480      	push	{r7}
 80038aa:	b083      	sub	sp, #12
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_MSC_DeviceQualifierDesc);
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	220a      	movs	r2, #10
 80038b4:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_DeviceQualifierDesc;
 80038b6:	4b03      	ldr	r3, [pc, #12]	; (80038c4 <USBD_MSC_GetDeviceQualifierDescriptor+0x1c>)
}
 80038b8:	4618      	mov	r0, r3
 80038ba:	370c      	adds	r7, #12
 80038bc:	46bd      	mov	sp, r7
 80038be:	bc80      	pop	{r7}
 80038c0:	4770      	bx	lr
 80038c2:	bf00      	nop
 80038c4:	200000a4 	.word	0x200000a4

080038c8 <USBD_MSC_RegisterStorage>:
* @param  fops: storage callback
* @retval status
*/
uint8_t USBD_MSC_RegisterStorage(USBD_HandleTypeDef *pdev,
                                 USBD_StorageTypeDef *fops)
{
 80038c8:	b480      	push	{r7}
 80038ca:	b083      	sub	sp, #12
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	6078      	str	r0, [r7, #4]
 80038d0:	6039      	str	r1, [r7, #0]
  if (fops != NULL)
 80038d2:	683b      	ldr	r3, [r7, #0]
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d003      	beq.n	80038e0 <USBD_MSC_RegisterStorage+0x18>
  {
    pdev->pUserData = fops;
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	683a      	ldr	r2, [r7, #0]
 80038dc:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return USBD_OK;
 80038e0:	2300      	movs	r3, #0
}
 80038e2:	4618      	mov	r0, r3
 80038e4:	370c      	adds	r7, #12
 80038e6:	46bd      	mov	sp, r7
 80038e8:	bc80      	pop	{r7}
 80038ea:	4770      	bx	lr

080038ec <MSC_BOT_Init>:
*         Initialize the BOT Process
* @param  pdev: device instance
* @retval None
*/
void MSC_BOT_Init(USBD_HandleTypeDef  *pdev)
{
 80038ec:	b580      	push	{r7, lr}
 80038ee:	b084      	sub	sp, #16
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80038fa:	60fb      	str	r3, [r7, #12]

  hmsc->bot_state = USBD_BOT_IDLE;
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	2200      	movs	r2, #0
 8003900:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_NORMAL;
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	2200      	movs	r2, #0
 8003906:	725a      	strb	r2, [r3, #9]

  hmsc->scsi_sense_tail = 0U;
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	2200      	movs	r2, #0
 800390c:	f883 225d 	strb.w	r2, [r3, #605]	; 0x25d
  hmsc->scsi_sense_head = 0U;
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	2200      	movs	r2, #0
 8003914:	f883 225c 	strb.w	r2, [r3, #604]	; 0x25c

  ((USBD_StorageTypeDef *)pdev->pUserData)->Init(0U);
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	2000      	movs	r0, #0
 8003922:	4798      	blx	r3

  USBD_LL_FlushEP(pdev, MSC_EPOUT_ADDR);
 8003924:	2101      	movs	r1, #1
 8003926:	6878      	ldr	r0, [r7, #4]
 8003928:	f002 fb94 	bl	8006054 <USBD_LL_FlushEP>
  USBD_LL_FlushEP(pdev, MSC_EPIN_ADDR);
 800392c:	2181      	movs	r1, #129	; 0x81
 800392e:	6878      	ldr	r0, [r7, #4]
 8003930:	f002 fb90 	bl	8006054 <USBD_LL_FlushEP>

  /* Prapare EP to Receive First BOT Cmd */
  USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, (uint8_t *)(void *)&hmsc->cbw,
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	f503 7203 	add.w	r2, r3, #524	; 0x20c
 800393a:	231f      	movs	r3, #31
 800393c:	2101      	movs	r1, #1
 800393e:	6878      	ldr	r0, [r7, #4]
 8003940:	f002 fc4c 	bl	80061dc <USBD_LL_PrepareReceive>
                         USBD_BOT_CBW_LENGTH);
}
 8003944:	bf00      	nop
 8003946:	3710      	adds	r7, #16
 8003948:	46bd      	mov	sp, r7
 800394a:	bd80      	pop	{r7, pc}

0800394c <MSC_BOT_Reset>:
*         Reset the BOT Machine
* @param  pdev: device instance
* @retval  None
*/
void MSC_BOT_Reset(USBD_HandleTypeDef  *pdev)
{
 800394c:	b580      	push	{r7, lr}
 800394e:	b084      	sub	sp, #16
 8003950:	af00      	add	r7, sp, #0
 8003952:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800395a:	60fb      	str	r3, [r7, #12]

  hmsc->bot_state  = USBD_BOT_IDLE;
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	2200      	movs	r2, #0
 8003960:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_RECOVERY;
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	2201      	movs	r2, #1
 8003966:	725a      	strb	r2, [r3, #9]

  /* Prapare EP to Receive First BOT Cmd */
  USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, (uint8_t *)(void *)&hmsc->cbw,
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	f503 7203 	add.w	r2, r3, #524	; 0x20c
 800396e:	231f      	movs	r3, #31
 8003970:	2101      	movs	r1, #1
 8003972:	6878      	ldr	r0, [r7, #4]
 8003974:	f002 fc32 	bl	80061dc <USBD_LL_PrepareReceive>
                         USBD_BOT_CBW_LENGTH);
}
 8003978:	bf00      	nop
 800397a:	3710      	adds	r7, #16
 800397c:	46bd      	mov	sp, r7
 800397e:	bd80      	pop	{r7, pc}

08003980 <MSC_BOT_DeInit>:
*         Deinitialize the BOT Machine
* @param  pdev: device instance
* @retval None
*/
void MSC_BOT_DeInit(USBD_HandleTypeDef  *pdev)
{
 8003980:	b480      	push	{r7}
 8003982:	b085      	sub	sp, #20
 8003984:	af00      	add	r7, sp, #0
 8003986:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800398e:	60fb      	str	r3, [r7, #12]
  hmsc->bot_state = USBD_BOT_IDLE;
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	2200      	movs	r2, #0
 8003994:	721a      	strb	r2, [r3, #8]
}
 8003996:	bf00      	nop
 8003998:	3714      	adds	r7, #20
 800399a:	46bd      	mov	sp, r7
 800399c:	bc80      	pop	{r7}
 800399e:	4770      	bx	lr

080039a0 <MSC_BOT_DataIn>:
* @param  epnum: endpoint index
* @retval None
*/
void MSC_BOT_DataIn(USBD_HandleTypeDef  *pdev,
                    uint8_t epnum)
{
 80039a0:	b580      	push	{r7, lr}
 80039a2:	b084      	sub	sp, #16
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	6078      	str	r0, [r7, #4]
 80039a8:	460b      	mov	r3, r1
 80039aa:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80039b2:	60fb      	str	r3, [r7, #12]

  switch (hmsc->bot_state)
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	7a1b      	ldrb	r3, [r3, #8]
 80039b8:	2b02      	cmp	r3, #2
 80039ba:	d004      	beq.n	80039c6 <MSC_BOT_DataIn+0x26>
 80039bc:	2b02      	cmp	r3, #2
 80039be:	db19      	blt.n	80039f4 <MSC_BOT_DataIn+0x54>
 80039c0:	2b04      	cmp	r3, #4
 80039c2:	dc17      	bgt.n	80039f4 <MSC_BOT_DataIn+0x54>
 80039c4:	e011      	b.n	80039ea <MSC_BOT_DataIn+0x4a>
  {
    case USBD_BOT_DATA_IN:
      if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	f893 1219 	ldrb.w	r1, [r3, #537]	; 0x219
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	f203 231b 	addw	r3, r3, #539	; 0x21b
 80039d2:	461a      	mov	r2, r3
 80039d4:	6878      	ldr	r0, [r7, #4]
 80039d6:	f000 f979 	bl	8003ccc <SCSI_ProcessCmd>
 80039da:	4603      	mov	r3, r0
 80039dc:	2b00      	cmp	r3, #0
 80039de:	da0b      	bge.n	80039f8 <MSC_BOT_DataIn+0x58>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 80039e0:	2101      	movs	r1, #1
 80039e2:	6878      	ldr	r0, [r7, #4]
 80039e4:	f000 f8f0 	bl	8003bc8 <MSC_BOT_SendCSW>
      }
      break;
 80039e8:	e006      	b.n	80039f8 <MSC_BOT_DataIn+0x58>

    case USBD_BOT_SEND_DATA:
    case USBD_BOT_LAST_DATA_IN:
      MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 80039ea:	2100      	movs	r1, #0
 80039ec:	6878      	ldr	r0, [r7, #4]
 80039ee:	f000 f8eb 	bl	8003bc8 <MSC_BOT_SendCSW>
      break;
 80039f2:	e002      	b.n	80039fa <MSC_BOT_DataIn+0x5a>

    default:
      break;
 80039f4:	bf00      	nop
 80039f6:	e000      	b.n	80039fa <MSC_BOT_DataIn+0x5a>
      break;
 80039f8:	bf00      	nop
  }
}
 80039fa:	bf00      	nop
 80039fc:	3710      	adds	r7, #16
 80039fe:	46bd      	mov	sp, r7
 8003a00:	bd80      	pop	{r7, pc}

08003a02 <MSC_BOT_DataOut>:
* @param  epnum: endpoint index
* @retval None
*/
void MSC_BOT_DataOut(USBD_HandleTypeDef  *pdev,
                     uint8_t epnum)
{
 8003a02:	b580      	push	{r7, lr}
 8003a04:	b084      	sub	sp, #16
 8003a06:	af00      	add	r7, sp, #0
 8003a08:	6078      	str	r0, [r7, #4]
 8003a0a:	460b      	mov	r3, r1
 8003a0c:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8003a14:	60fb      	str	r3, [r7, #12]

  switch (hmsc->bot_state)
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	7a1b      	ldrb	r3, [r3, #8]
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d002      	beq.n	8003a24 <MSC_BOT_DataOut+0x22>
 8003a1e:	2b01      	cmp	r3, #1
 8003a20:	d004      	beq.n	8003a2c <MSC_BOT_DataOut+0x2a>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
      }
      break;

    default:
      break;
 8003a22:	e015      	b.n	8003a50 <MSC_BOT_DataOut+0x4e>
      MSC_BOT_CBW_Decode(pdev);
 8003a24:	6878      	ldr	r0, [r7, #4]
 8003a26:	f000 f817 	bl	8003a58 <MSC_BOT_CBW_Decode>
      break;
 8003a2a:	e011      	b.n	8003a50 <MSC_BOT_DataOut+0x4e>
      if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	f893 1219 	ldrb.w	r1, [r3, #537]	; 0x219
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	f203 231b 	addw	r3, r3, #539	; 0x21b
 8003a38:	461a      	mov	r2, r3
 8003a3a:	6878      	ldr	r0, [r7, #4]
 8003a3c:	f000 f946 	bl	8003ccc <SCSI_ProcessCmd>
 8003a40:	4603      	mov	r3, r0
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	da03      	bge.n	8003a4e <MSC_BOT_DataOut+0x4c>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 8003a46:	2101      	movs	r1, #1
 8003a48:	6878      	ldr	r0, [r7, #4]
 8003a4a:	f000 f8bd 	bl	8003bc8 <MSC_BOT_SendCSW>
      break;
 8003a4e:	bf00      	nop
  }
}
 8003a50:	bf00      	nop
 8003a52:	3710      	adds	r7, #16
 8003a54:	46bd      	mov	sp, r7
 8003a56:	bd80      	pop	{r7, pc}

08003a58 <MSC_BOT_CBW_Decode>:
*         Decode the CBW command and set the BOT state machine accordingly
* @param  pdev: device instance
* @retval None
*/
static void  MSC_BOT_CBW_Decode(USBD_HandleTypeDef  *pdev)
{
 8003a58:	b580      	push	{r7, lr}
 8003a5a:	b084      	sub	sp, #16
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8003a66:	60fb      	str	r3, [r7, #12]

  hmsc->csw.dTag = hmsc->cbw.dTag;
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	f8c3 2230 	str.w	r2, [r3, #560]	; 0x230
  hmsc->csw.dDataResidue = hmsc->cbw.dDataLength;
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234

  if ((USBD_LL_GetRxDataSize(pdev, MSC_EPOUT_ADDR) != USBD_BOT_CBW_LENGTH) ||
 8003a80:	2101      	movs	r1, #1
 8003a82:	6878      	ldr	r0, [r7, #4]
 8003a84:	f002 fbcd 	bl	8006222 <USBD_LL_GetRxDataSize>
 8003a88:	4603      	mov	r3, r0
 8003a8a:	2b1f      	cmp	r3, #31
 8003a8c:	d114      	bne.n	8003ab8 <MSC_BOT_CBW_Decode+0x60>
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
  if ((USBD_LL_GetRxDataSize(pdev, MSC_EPOUT_ADDR) != USBD_BOT_CBW_LENGTH) ||
 8003a94:	4a32      	ldr	r2, [pc, #200]	; (8003b60 <MSC_BOT_CBW_Decode+0x108>)
 8003a96:	4293      	cmp	r3, r2
 8003a98:	d10e      	bne.n	8003ab8 <MSC_BOT_CBW_Decode+0x60>
      (hmsc->cbw.bLUN > 1U) ||
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	f893 3219 	ldrb.w	r3, [r3, #537]	; 0x219
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 8003aa0:	2b01      	cmp	r3, #1
 8003aa2:	d809      	bhi.n	8003ab8 <MSC_BOT_CBW_Decode+0x60>
      (hmsc->cbw.bCBLength < 1U) || (hmsc->cbw.bCBLength > 16U))
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	f893 321a 	ldrb.w	r3, [r3, #538]	; 0x21a
      (hmsc->cbw.bLUN > 1U) ||
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d004      	beq.n	8003ab8 <MSC_BOT_CBW_Decode+0x60>
      (hmsc->cbw.bCBLength < 1U) || (hmsc->cbw.bCBLength > 16U))
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	f893 321a 	ldrb.w	r3, [r3, #538]	; 0x21a
 8003ab4:	2b10      	cmp	r3, #16
 8003ab6:	d90e      	bls.n	8003ad6 <MSC_BOT_CBW_Decode+0x7e>
  {

    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	f893 1219 	ldrb.w	r1, [r3, #537]	; 0x219
 8003abe:	2320      	movs	r3, #32
 8003ac0:	2205      	movs	r2, #5
 8003ac2:	6878      	ldr	r0, [r7, #4]
 8003ac4:	f000 fc48 	bl	8004358 <SCSI_SenseCode>

    hmsc->bot_status = USBD_BOT_STATUS_ERROR;
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	2202      	movs	r2, #2
 8003acc:	725a      	strb	r2, [r3, #9]
    MSC_BOT_Abort(pdev);
 8003ace:	6878      	ldr	r0, [r7, #4]
 8003ad0:	f000 f8a6 	bl	8003c20 <MSC_BOT_Abort>
 8003ad4:	e041      	b.n	8003b5a <MSC_BOT_CBW_Decode+0x102>
  }
  else
  {
    if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	f893 1219 	ldrb.w	r1, [r3, #537]	; 0x219
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	f203 231b 	addw	r3, r3, #539	; 0x21b
 8003ae2:	461a      	mov	r2, r3
 8003ae4:	6878      	ldr	r0, [r7, #4]
 8003ae6:	f000 f8f1 	bl	8003ccc <SCSI_ProcessCmd>
 8003aea:	4603      	mov	r3, r0
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	da0c      	bge.n	8003b0a <MSC_BOT_CBW_Decode+0xb2>
    {
      if (hmsc->bot_state == USBD_BOT_NO_DATA)
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	7a1b      	ldrb	r3, [r3, #8]
 8003af4:	2b05      	cmp	r3, #5
 8003af6:	d104      	bne.n	8003b02 <MSC_BOT_CBW_Decode+0xaa>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 8003af8:	2101      	movs	r1, #1
 8003afa:	6878      	ldr	r0, [r7, #4]
 8003afc:	f000 f864 	bl	8003bc8 <MSC_BOT_SendCSW>
 8003b00:	e02b      	b.n	8003b5a <MSC_BOT_CBW_Decode+0x102>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 8003b02:	6878      	ldr	r0, [r7, #4]
 8003b04:	f000 f88c 	bl	8003c20 <MSC_BOT_Abort>
 8003b08:	e027      	b.n	8003b5a <MSC_BOT_CBW_Decode+0x102>
      }
    }
    /*Burst xfer handled internally*/
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	7a1b      	ldrb	r3, [r3, #8]
 8003b0e:	2b02      	cmp	r3, #2
 8003b10:	d022      	beq.n	8003b58 <MSC_BOT_CBW_Decode+0x100>
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	7a1b      	ldrb	r3, [r3, #8]
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 8003b16:	2b01      	cmp	r3, #1
 8003b18:	d01e      	beq.n	8003b58 <MSC_BOT_CBW_Decode+0x100>
             (hmsc->bot_state != USBD_BOT_LAST_DATA_IN))
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	7a1b      	ldrb	r3, [r3, #8]
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 8003b1e:	2b03      	cmp	r3, #3
 8003b20:	d01a      	beq.n	8003b58 <MSC_BOT_CBW_Decode+0x100>
    {
      if (hmsc->bot_data_length > 0U)
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	895b      	ldrh	r3, [r3, #10]
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d009      	beq.n	8003b3e <MSC_BOT_CBW_Decode+0xe6>
      {
        MSC_BOT_SendData(pdev, hmsc->bot_data, hmsc->bot_data_length);
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	f103 010c 	add.w	r1, r3, #12
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	895b      	ldrh	r3, [r3, #10]
 8003b34:	461a      	mov	r2, r3
 8003b36:	6878      	ldr	r0, [r7, #4]
 8003b38:	f000 f814 	bl	8003b64 <MSC_BOT_SendData>
      if (hmsc->bot_data_length > 0U)
 8003b3c:	e00d      	b.n	8003b5a <MSC_BOT_CBW_Decode+0x102>
      }
      else if (hmsc->bot_data_length == 0U)
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	895b      	ldrh	r3, [r3, #10]
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d104      	bne.n	8003b50 <MSC_BOT_CBW_Decode+0xf8>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 8003b46:	2100      	movs	r1, #0
 8003b48:	6878      	ldr	r0, [r7, #4]
 8003b4a:	f000 f83d 	bl	8003bc8 <MSC_BOT_SendCSW>
      if (hmsc->bot_data_length > 0U)
 8003b4e:	e004      	b.n	8003b5a <MSC_BOT_CBW_Decode+0x102>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 8003b50:	6878      	ldr	r0, [r7, #4]
 8003b52:	f000 f865 	bl	8003c20 <MSC_BOT_Abort>
      if (hmsc->bot_data_length > 0U)
 8003b56:	e000      	b.n	8003b5a <MSC_BOT_CBW_Decode+0x102>
      }
    }
    else
    {
      return;
 8003b58:	bf00      	nop
    }
  }
}
 8003b5a:	3710      	adds	r7, #16
 8003b5c:	46bd      	mov	sp, r7
 8003b5e:	bd80      	pop	{r7, pc}
 8003b60:	43425355 	.word	0x43425355

08003b64 <MSC_BOT_SendData>:
* @param  len: Data Length
* @retval None
*/
static void  MSC_BOT_SendData(USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                              uint16_t len)
{
 8003b64:	b580      	push	{r7, lr}
 8003b66:	b086      	sub	sp, #24
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	60f8      	str	r0, [r7, #12]
 8003b6c:	60b9      	str	r1, [r7, #8]
 8003b6e:	4613      	mov	r3, r2
 8003b70:	80fb      	strh	r3, [r7, #6]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8003b78:	617b      	str	r3, [r7, #20]

  uint16_t length = (uint16_t)MIN(hmsc->cbw.dDataLength, len);
 8003b7a:	697b      	ldr	r3, [r7, #20]
 8003b7c:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8003b80:	88fb      	ldrh	r3, [r7, #6]
 8003b82:	429a      	cmp	r2, r3
 8003b84:	d204      	bcs.n	8003b90 <MSC_BOT_SendData+0x2c>
 8003b86:	697b      	ldr	r3, [r7, #20]
 8003b88:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8003b8c:	b29b      	uxth	r3, r3
 8003b8e:	e000      	b.n	8003b92 <MSC_BOT_SendData+0x2e>
 8003b90:	88fb      	ldrh	r3, [r7, #6]
 8003b92:	827b      	strh	r3, [r7, #18]

  hmsc->csw.dDataResidue -= len;
 8003b94:	697b      	ldr	r3, [r7, #20]
 8003b96:	f8d3 2234 	ldr.w	r2, [r3, #564]	; 0x234
 8003b9a:	88fb      	ldrh	r3, [r7, #6]
 8003b9c:	1ad2      	subs	r2, r2, r3
 8003b9e:	697b      	ldr	r3, [r7, #20]
 8003ba0:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234
  hmsc->csw.bStatus = USBD_CSW_CMD_PASSED;
 8003ba4:	697b      	ldr	r3, [r7, #20]
 8003ba6:	2200      	movs	r2, #0
 8003ba8:	f883 2238 	strb.w	r2, [r3, #568]	; 0x238
  hmsc->bot_state = USBD_BOT_SEND_DATA;
 8003bac:	697b      	ldr	r3, [r7, #20]
 8003bae:	2204      	movs	r2, #4
 8003bb0:	721a      	strb	r2, [r3, #8]

  USBD_LL_Transmit(pdev, MSC_EPIN_ADDR, pbuf, length);
 8003bb2:	8a7b      	ldrh	r3, [r7, #18]
 8003bb4:	68ba      	ldr	r2, [r7, #8]
 8003bb6:	2181      	movs	r1, #129	; 0x81
 8003bb8:	68f8      	ldr	r0, [r7, #12]
 8003bba:	f002 faec 	bl	8006196 <USBD_LL_Transmit>
}
 8003bbe:	bf00      	nop
 8003bc0:	3718      	adds	r7, #24
 8003bc2:	46bd      	mov	sp, r7
 8003bc4:	bd80      	pop	{r7, pc}
	...

08003bc8 <MSC_BOT_SendCSW>:
* @param  status : CSW status
* @retval None
*/
void  MSC_BOT_SendCSW(USBD_HandleTypeDef  *pdev,
                      uint8_t CSW_Status)
{
 8003bc8:	b580      	push	{r7, lr}
 8003bca:	b084      	sub	sp, #16
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	6078      	str	r0, [r7, #4]
 8003bd0:	460b      	mov	r3, r1
 8003bd2:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8003bda:	60fb      	str	r3, [r7, #12]

  hmsc->csw.dSignature = USBD_BOT_CSW_SIGNATURE;
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	4a0f      	ldr	r2, [pc, #60]	; (8003c1c <MSC_BOT_SendCSW+0x54>)
 8003be0:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c
  hmsc->csw.bStatus = CSW_Status;
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	78fa      	ldrb	r2, [r7, #3]
 8003be8:	f883 2238 	strb.w	r2, [r3, #568]	; 0x238
  hmsc->bot_state = USBD_BOT_IDLE;
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	2200      	movs	r2, #0
 8003bf0:	721a      	strb	r2, [r3, #8]

  USBD_LL_Transmit(pdev, MSC_EPIN_ADDR, (uint8_t *)(void *)&hmsc->csw,
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	f503 720b 	add.w	r2, r3, #556	; 0x22c
 8003bf8:	230d      	movs	r3, #13
 8003bfa:	2181      	movs	r1, #129	; 0x81
 8003bfc:	6878      	ldr	r0, [r7, #4]
 8003bfe:	f002 faca 	bl	8006196 <USBD_LL_Transmit>
                   USBD_BOT_CSW_LENGTH);

  /* Prepare EP to Receive next Cmd */
  USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, (uint8_t *)(void *)&hmsc->cbw,
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	f503 7203 	add.w	r2, r3, #524	; 0x20c
 8003c08:	231f      	movs	r3, #31
 8003c0a:	2101      	movs	r1, #1
 8003c0c:	6878      	ldr	r0, [r7, #4]
 8003c0e:	f002 fae5 	bl	80061dc <USBD_LL_PrepareReceive>
                         USBD_BOT_CBW_LENGTH);
}
 8003c12:	bf00      	nop
 8003c14:	3710      	adds	r7, #16
 8003c16:	46bd      	mov	sp, r7
 8003c18:	bd80      	pop	{r7, pc}
 8003c1a:	bf00      	nop
 8003c1c:	53425355 	.word	0x53425355

08003c20 <MSC_BOT_Abort>:
* @param  pdev: device instance
* @retval status
*/

static void  MSC_BOT_Abort(USBD_HandleTypeDef  *pdev)
{
 8003c20:	b580      	push	{r7, lr}
 8003c22:	b084      	sub	sp, #16
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8003c2e:	60fb      	str	r3, [r7, #12]

  if ((hmsc->cbw.bmFlags == 0U) &&
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	f893 3218 	ldrb.w	r3, [r3, #536]	; 0x218
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d10c      	bne.n	8003c54 <MSC_BOT_Abort+0x34>
      (hmsc->cbw.dDataLength != 0U) &&
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
  if ((hmsc->cbw.bmFlags == 0U) &&
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d007      	beq.n	8003c54 <MSC_BOT_Abort+0x34>
      (hmsc->bot_status == USBD_BOT_STATUS_NORMAL))
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	7a5b      	ldrb	r3, [r3, #9]
      (hmsc->cbw.dDataLength != 0U) &&
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d103      	bne.n	8003c54 <MSC_BOT_Abort+0x34>
  {
    USBD_LL_StallEP(pdev, MSC_EPOUT_ADDR);
 8003c4c:	2101      	movs	r1, #1
 8003c4e:	6878      	ldr	r0, [r7, #4]
 8003c50:	f002 fa1f 	bl	8006092 <USBD_LL_StallEP>
  }

  USBD_LL_StallEP(pdev, MSC_EPIN_ADDR);
 8003c54:	2181      	movs	r1, #129	; 0x81
 8003c56:	6878      	ldr	r0, [r7, #4]
 8003c58:	f002 fa1b 	bl	8006092 <USBD_LL_StallEP>

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR)
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	7a5b      	ldrb	r3, [r3, #9]
 8003c60:	2b02      	cmp	r3, #2
 8003c62:	d107      	bne.n	8003c74 <MSC_BOT_Abort+0x54>
  {
    USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, (uint8_t *)(void *)&hmsc->cbw,
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	f503 7203 	add.w	r2, r3, #524	; 0x20c
 8003c6a:	231f      	movs	r3, #31
 8003c6c:	2101      	movs	r1, #1
 8003c6e:	6878      	ldr	r0, [r7, #4]
 8003c70:	f002 fab4 	bl	80061dc <USBD_LL_PrepareReceive>
                           USBD_BOT_CBW_LENGTH);
  }
}
 8003c74:	bf00      	nop
 8003c76:	3710      	adds	r7, #16
 8003c78:	46bd      	mov	sp, r7
 8003c7a:	bd80      	pop	{r7, pc}

08003c7c <MSC_BOT_CplClrFeature>:
* @param  epnum: endpoint index
* @retval None
*/

void  MSC_BOT_CplClrFeature(USBD_HandleTypeDef  *pdev, uint8_t epnum)
{
 8003c7c:	b580      	push	{r7, lr}
 8003c7e:	b084      	sub	sp, #16
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	6078      	str	r0, [r7, #4]
 8003c84:	460b      	mov	r3, r1
 8003c86:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8003c8e:	60fb      	str	r3, [r7, #12]

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR) /* Bad CBW Signature */
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	7a5b      	ldrb	r3, [r3, #9]
 8003c94:	2b02      	cmp	r3, #2
 8003c96:	d107      	bne.n	8003ca8 <MSC_BOT_CplClrFeature+0x2c>
  {
    USBD_LL_StallEP(pdev, MSC_EPIN_ADDR);
 8003c98:	2181      	movs	r1, #129	; 0x81
 8003c9a:	6878      	ldr	r0, [r7, #4]
 8003c9c:	f002 f9f9 	bl	8006092 <USBD_LL_StallEP>
    hmsc->bot_status = USBD_BOT_STATUS_NORMAL;
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	2200      	movs	r2, #0
 8003ca4:	725a      	strb	r2, [r3, #9]
 8003ca6:	e00d      	b.n	8003cc4 <MSC_BOT_CplClrFeature+0x48>
  }
  else if (((epnum & 0x80U) == 0x80U) && (hmsc->bot_status != USBD_BOT_STATUS_RECOVERY))
 8003ca8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	da08      	bge.n	8003cc2 <MSC_BOT_CplClrFeature+0x46>
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	7a5b      	ldrb	r3, [r3, #9]
 8003cb4:	2b01      	cmp	r3, #1
 8003cb6:	d004      	beq.n	8003cc2 <MSC_BOT_CplClrFeature+0x46>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 8003cb8:	2101      	movs	r1, #1
 8003cba:	6878      	ldr	r0, [r7, #4]
 8003cbc:	f7ff ff84 	bl	8003bc8 <MSC_BOT_SendCSW>
 8003cc0:	e000      	b.n	8003cc4 <MSC_BOT_CplClrFeature+0x48>
  }
  else
  {
    return;
 8003cc2:	bf00      	nop
  }
}
 8003cc4:	3710      	adds	r7, #16
 8003cc6:	46bd      	mov	sp, r7
 8003cc8:	bd80      	pop	{r7, pc}
	...

08003ccc <SCSI_ProcessCmd>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
int8_t SCSI_ProcessCmd(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *cmd)
{
 8003ccc:	b580      	push	{r7, lr}
 8003cce:	b084      	sub	sp, #16
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	60f8      	str	r0, [r7, #12]
 8003cd4:	460b      	mov	r3, r1
 8003cd6:	607a      	str	r2, [r7, #4]
 8003cd8:	72fb      	strb	r3, [r7, #11]
  switch (cmd[0])
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	781b      	ldrb	r3, [r3, #0]
 8003cde:	2b5a      	cmp	r3, #90	; 0x5a
 8003ce0:	f200 810e 	bhi.w	8003f00 <SCSI_ProcessCmd+0x234>
 8003ce4:	a201      	add	r2, pc, #4	; (adr r2, 8003cec <SCSI_ProcessCmd+0x20>)
 8003ce6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cea:	bf00      	nop
 8003cec:	08003e59 	.word	0x08003e59
 8003cf0:	08003f01 	.word	0x08003f01
 8003cf4:	08003f01 	.word	0x08003f01
 8003cf8:	08003e67 	.word	0x08003e67
 8003cfc:	08003f01 	.word	0x08003f01
 8003d00:	08003f01 	.word	0x08003f01
 8003d04:	08003f01 	.word	0x08003f01
 8003d08:	08003f01 	.word	0x08003f01
 8003d0c:	08003f01 	.word	0x08003f01
 8003d10:	08003f01 	.word	0x08003f01
 8003d14:	08003f01 	.word	0x08003f01
 8003d18:	08003f01 	.word	0x08003f01
 8003d1c:	08003f01 	.word	0x08003f01
 8003d20:	08003f01 	.word	0x08003f01
 8003d24:	08003f01 	.word	0x08003f01
 8003d28:	08003f01 	.word	0x08003f01
 8003d2c:	08003f01 	.word	0x08003f01
 8003d30:	08003f01 	.word	0x08003f01
 8003d34:	08003e75 	.word	0x08003e75
 8003d38:	08003f01 	.word	0x08003f01
 8003d3c:	08003f01 	.word	0x08003f01
 8003d40:	08003f01 	.word	0x08003f01
 8003d44:	08003f01 	.word	0x08003f01
 8003d48:	08003f01 	.word	0x08003f01
 8003d4c:	08003f01 	.word	0x08003f01
 8003d50:	08003f01 	.word	0x08003f01
 8003d54:	08003e9f 	.word	0x08003e9f
 8003d58:	08003e83 	.word	0x08003e83
 8003d5c:	08003f01 	.word	0x08003f01
 8003d60:	08003f01 	.word	0x08003f01
 8003d64:	08003e91 	.word	0x08003e91
 8003d68:	08003f01 	.word	0x08003f01
 8003d6c:	08003f01 	.word	0x08003f01
 8003d70:	08003f01 	.word	0x08003f01
 8003d74:	08003f01 	.word	0x08003f01
 8003d78:	08003ebb 	.word	0x08003ebb
 8003d7c:	08003f01 	.word	0x08003f01
 8003d80:	08003ec9 	.word	0x08003ec9
 8003d84:	08003f01 	.word	0x08003f01
 8003d88:	08003f01 	.word	0x08003f01
 8003d8c:	08003ed7 	.word	0x08003ed7
 8003d90:	08003f01 	.word	0x08003f01
 8003d94:	08003ee5 	.word	0x08003ee5
 8003d98:	08003f01 	.word	0x08003f01
 8003d9c:	08003f01 	.word	0x08003f01
 8003da0:	08003f01 	.word	0x08003f01
 8003da4:	08003f01 	.word	0x08003f01
 8003da8:	08003ef3 	.word	0x08003ef3
 8003dac:	08003f01 	.word	0x08003f01
 8003db0:	08003f01 	.word	0x08003f01
 8003db4:	08003f01 	.word	0x08003f01
 8003db8:	08003f01 	.word	0x08003f01
 8003dbc:	08003f01 	.word	0x08003f01
 8003dc0:	08003f01 	.word	0x08003f01
 8003dc4:	08003f01 	.word	0x08003f01
 8003dc8:	08003f01 	.word	0x08003f01
 8003dcc:	08003f01 	.word	0x08003f01
 8003dd0:	08003f01 	.word	0x08003f01
 8003dd4:	08003f01 	.word	0x08003f01
 8003dd8:	08003f01 	.word	0x08003f01
 8003ddc:	08003f01 	.word	0x08003f01
 8003de0:	08003f01 	.word	0x08003f01
 8003de4:	08003f01 	.word	0x08003f01
 8003de8:	08003f01 	.word	0x08003f01
 8003dec:	08003f01 	.word	0x08003f01
 8003df0:	08003f01 	.word	0x08003f01
 8003df4:	08003f01 	.word	0x08003f01
 8003df8:	08003f01 	.word	0x08003f01
 8003dfc:	08003f01 	.word	0x08003f01
 8003e00:	08003f01 	.word	0x08003f01
 8003e04:	08003f01 	.word	0x08003f01
 8003e08:	08003f01 	.word	0x08003f01
 8003e0c:	08003f01 	.word	0x08003f01
 8003e10:	08003f01 	.word	0x08003f01
 8003e14:	08003f01 	.word	0x08003f01
 8003e18:	08003f01 	.word	0x08003f01
 8003e1c:	08003f01 	.word	0x08003f01
 8003e20:	08003f01 	.word	0x08003f01
 8003e24:	08003f01 	.word	0x08003f01
 8003e28:	08003f01 	.word	0x08003f01
 8003e2c:	08003f01 	.word	0x08003f01
 8003e30:	08003f01 	.word	0x08003f01
 8003e34:	08003f01 	.word	0x08003f01
 8003e38:	08003f01 	.word	0x08003f01
 8003e3c:	08003f01 	.word	0x08003f01
 8003e40:	08003f01 	.word	0x08003f01
 8003e44:	08003f01 	.word	0x08003f01
 8003e48:	08003f01 	.word	0x08003f01
 8003e4c:	08003f01 	.word	0x08003f01
 8003e50:	08003f01 	.word	0x08003f01
 8003e54:	08003ead 	.word	0x08003ead
  {
    case SCSI_TEST_UNIT_READY:
      SCSI_TestUnitReady(pdev, lun, cmd);
 8003e58:	7afb      	ldrb	r3, [r7, #11]
 8003e5a:	687a      	ldr	r2, [r7, #4]
 8003e5c:	4619      	mov	r1, r3
 8003e5e:	68f8      	ldr	r0, [r7, #12]
 8003e60:	f000 f85c 	bl	8003f1c <SCSI_TestUnitReady>
      break;
 8003e64:	e055      	b.n	8003f12 <SCSI_ProcessCmd+0x246>

    case SCSI_REQUEST_SENSE:
      SCSI_RequestSense(pdev, lun, cmd);
 8003e66:	7afb      	ldrb	r3, [r7, #11]
 8003e68:	687a      	ldr	r2, [r7, #4]
 8003e6a:	4619      	mov	r1, r3
 8003e6c:	68f8      	ldr	r0, [r7, #12]
 8003e6e:	f000 fa09 	bl	8004284 <SCSI_RequestSense>
      break;
 8003e72:	e04e      	b.n	8003f12 <SCSI_ProcessCmd+0x246>
    case SCSI_INQUIRY:
      SCSI_Inquiry(pdev, lun, cmd);
 8003e74:	7afb      	ldrb	r3, [r7, #11]
 8003e76:	687a      	ldr	r2, [r7, #4]
 8003e78:	4619      	mov	r1, r3
 8003e7a:	68f8      	ldr	r0, [r7, #12]
 8003e7c:	f000 f888 	bl	8003f90 <SCSI_Inquiry>
      break;
 8003e80:	e047      	b.n	8003f12 <SCSI_ProcessCmd+0x246>

    case SCSI_START_STOP_UNIT:
      SCSI_StartStopUnit(pdev, lun, cmd);
 8003e82:	7afb      	ldrb	r3, [r7, #11]
 8003e84:	687a      	ldr	r2, [r7, #4]
 8003e86:	4619      	mov	r1, r3
 8003e88:	68f8      	ldr	r0, [r7, #12]
 8003e8a:	f000 fa9e 	bl	80043ca <SCSI_StartStopUnit>
      break;
 8003e8e:	e040      	b.n	8003f12 <SCSI_ProcessCmd+0x246>

    case SCSI_ALLOW_MEDIUM_REMOVAL:
      SCSI_StartStopUnit(pdev, lun, cmd);
 8003e90:	7afb      	ldrb	r3, [r7, #11]
 8003e92:	687a      	ldr	r2, [r7, #4]
 8003e94:	4619      	mov	r1, r3
 8003e96:	68f8      	ldr	r0, [r7, #12]
 8003e98:	f000 fa97 	bl	80043ca <SCSI_StartStopUnit>
      break;
 8003e9c:	e039      	b.n	8003f12 <SCSI_ProcessCmd+0x246>

    case SCSI_MODE_SENSE6:
      SCSI_ModeSense6(pdev, lun, cmd);
 8003e9e:	7afb      	ldrb	r3, [r7, #11]
 8003ea0:	687a      	ldr	r2, [r7, #4]
 8003ea2:	4619      	mov	r1, r3
 8003ea4:	68f8      	ldr	r0, [r7, #12]
 8003ea6:	f000 f99d 	bl	80041e4 <SCSI_ModeSense6>
      break;
 8003eaa:	e032      	b.n	8003f12 <SCSI_ProcessCmd+0x246>

    case SCSI_MODE_SENSE10:
      SCSI_ModeSense10(pdev, lun, cmd);
 8003eac:	7afb      	ldrb	r3, [r7, #11]
 8003eae:	687a      	ldr	r2, [r7, #4]
 8003eb0:	4619      	mov	r1, r3
 8003eb2:	68f8      	ldr	r0, [r7, #12]
 8003eb4:	f000 f9be 	bl	8004234 <SCSI_ModeSense10>
      break;
 8003eb8:	e02b      	b.n	8003f12 <SCSI_ProcessCmd+0x246>

    case SCSI_READ_FORMAT_CAPACITIES:
      SCSI_ReadFormatCapacity(pdev, lun, cmd);
 8003eba:	7afb      	ldrb	r3, [r7, #11]
 8003ebc:	687a      	ldr	r2, [r7, #4]
 8003ebe:	4619      	mov	r1, r3
 8003ec0:	68f8      	ldr	r0, [r7, #12]
 8003ec2:	f000 f92a 	bl	800411a <SCSI_ReadFormatCapacity>
      break;
 8003ec6:	e024      	b.n	8003f12 <SCSI_ProcessCmd+0x246>

    case SCSI_READ_CAPACITY10:
      SCSI_ReadCapacity10(pdev, lun, cmd);
 8003ec8:	7afb      	ldrb	r3, [r7, #11]
 8003eca:	687a      	ldr	r2, [r7, #4]
 8003ecc:	4619      	mov	r1, r3
 8003ece:	68f8      	ldr	r0, [r7, #12]
 8003ed0:	f000 f8bc 	bl	800404c <SCSI_ReadCapacity10>
      break;
 8003ed4:	e01d      	b.n	8003f12 <SCSI_ProcessCmd+0x246>

    case SCSI_READ10:
      SCSI_Read10(pdev, lun, cmd);
 8003ed6:	7afb      	ldrb	r3, [r7, #11]
 8003ed8:	687a      	ldr	r2, [r7, #4]
 8003eda:	4619      	mov	r1, r3
 8003edc:	68f8      	ldr	r0, [r7, #12]
 8003ede:	f000 fa88 	bl	80043f2 <SCSI_Read10>
      break;
 8003ee2:	e016      	b.n	8003f12 <SCSI_ProcessCmd+0x246>

    case SCSI_WRITE10:
      SCSI_Write10(pdev, lun, cmd);
 8003ee4:	7afb      	ldrb	r3, [r7, #11]
 8003ee6:	687a      	ldr	r2, [r7, #4]
 8003ee8:	4619      	mov	r1, r3
 8003eea:	68f8      	ldr	r0, [r7, #12]
 8003eec:	f000 fb0d 	bl	800450a <SCSI_Write10>
      break;
 8003ef0:	e00f      	b.n	8003f12 <SCSI_ProcessCmd+0x246>

    case SCSI_VERIFY10:
      SCSI_Verify10(pdev, lun, cmd);
 8003ef2:	7afb      	ldrb	r3, [r7, #11]
 8003ef4:	687a      	ldr	r2, [r7, #4]
 8003ef6:	4619      	mov	r1, r3
 8003ef8:	68f8      	ldr	r0, [r7, #12]
 8003efa:	f000 fbb6 	bl	800466a <SCSI_Verify10>
      break;
 8003efe:	e008      	b.n	8003f12 <SCSI_ProcessCmd+0x246>

    default:
      SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_CDB);
 8003f00:	7af9      	ldrb	r1, [r7, #11]
 8003f02:	2320      	movs	r3, #32
 8003f04:	2205      	movs	r2, #5
 8003f06:	68f8      	ldr	r0, [r7, #12]
 8003f08:	f000 fa26 	bl	8004358 <SCSI_SenseCode>
      return -1;
 8003f0c:	f04f 33ff 	mov.w	r3, #4294967295
 8003f10:	e000      	b.n	8003f14 <SCSI_ProcessCmd+0x248>
  }

  return 0;
 8003f12:	2300      	movs	r3, #0
}
 8003f14:	4618      	mov	r0, r3
 8003f16:	3710      	adds	r7, #16
 8003f18:	46bd      	mov	sp, r7
 8003f1a:	bd80      	pop	{r7, pc}

08003f1c <SCSI_TestUnitReady>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_TestUnitReady(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 8003f1c:	b580      	push	{r7, lr}
 8003f1e:	b086      	sub	sp, #24
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	60f8      	str	r0, [r7, #12]
 8003f24:	460b      	mov	r3, r1
 8003f26:	607a      	str	r2, [r7, #4]
 8003f28:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8003f30:	617b      	str	r3, [r7, #20]

  /* case 9 : Hi > D0 */
  if (hmsc->cbw.dDataLength != 0U)
 8003f32:	697b      	ldr	r3, [r7, #20]
 8003f34:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d00a      	beq.n	8003f52 <SCSI_TestUnitReady+0x36>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8003f3c:	697b      	ldr	r3, [r7, #20]
 8003f3e:	f893 1219 	ldrb.w	r1, [r3, #537]	; 0x219
 8003f42:	2320      	movs	r3, #32
 8003f44:	2205      	movs	r2, #5
 8003f46:	68f8      	ldr	r0, [r7, #12]
 8003f48:	f000 fa06 	bl	8004358 <SCSI_SenseCode>

    return -1;
 8003f4c:	f04f 33ff 	mov.w	r3, #4294967295
 8003f50:	e019      	b.n	8003f86 <SCSI_TestUnitReady+0x6a>
  }

  if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8003f58:	689b      	ldr	r3, [r3, #8]
 8003f5a:	7afa      	ldrb	r2, [r7, #11]
 8003f5c:	4610      	mov	r0, r2
 8003f5e:	4798      	blx	r3
 8003f60:	4603      	mov	r3, r0
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d00b      	beq.n	8003f7e <SCSI_TestUnitReady+0x62>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8003f66:	7af9      	ldrb	r1, [r7, #11]
 8003f68:	233a      	movs	r3, #58	; 0x3a
 8003f6a:	2202      	movs	r2, #2
 8003f6c:	68f8      	ldr	r0, [r7, #12]
 8003f6e:	f000 f9f3 	bl	8004358 <SCSI_SenseCode>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 8003f72:	697b      	ldr	r3, [r7, #20]
 8003f74:	2205      	movs	r2, #5
 8003f76:	721a      	strb	r2, [r3, #8]

    return -1;
 8003f78:	f04f 33ff 	mov.w	r3, #4294967295
 8003f7c:	e003      	b.n	8003f86 <SCSI_TestUnitReady+0x6a>
  }
  hmsc->bot_data_length = 0U;
 8003f7e:	697b      	ldr	r3, [r7, #20]
 8003f80:	2200      	movs	r2, #0
 8003f82:	815a      	strh	r2, [r3, #10]

  return 0;
 8003f84:	2300      	movs	r3, #0
}
 8003f86:	4618      	mov	r0, r3
 8003f88:	3718      	adds	r7, #24
 8003f8a:	46bd      	mov	sp, r7
 8003f8c:	bd80      	pop	{r7, pc}
	...

08003f90 <SCSI_Inquiry>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t  SCSI_Inquiry(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 8003f90:	b480      	push	{r7}
 8003f92:	b089      	sub	sp, #36	; 0x24
 8003f94:	af00      	add	r7, sp, #0
 8003f96:	60f8      	str	r0, [r7, #12]
 8003f98:	460b      	mov	r3, r1
 8003f9a:	607a      	str	r2, [r7, #4]
 8003f9c:	72fb      	strb	r3, [r7, #11]
  uint8_t *pPage;
  uint16_t len;
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8003fa4:	61bb      	str	r3, [r7, #24]

  if (params[1] & 0x01U)/*Evpd is set*/
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	3301      	adds	r3, #1
 8003faa:	781b      	ldrb	r3, [r3, #0]
 8003fac:	f003 0301 	and.w	r3, r3, #1
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d014      	beq.n	8003fde <SCSI_Inquiry+0x4e>
  {
    len = LENGTH_INQUIRY_PAGE00;
 8003fb4:	2307      	movs	r3, #7
 8003fb6:	83fb      	strh	r3, [r7, #30]
    hmsc->bot_data_length = len;
 8003fb8:	69bb      	ldr	r3, [r7, #24]
 8003fba:	8bfa      	ldrh	r2, [r7, #30]
 8003fbc:	815a      	strh	r2, [r3, #10]

    while (len)
 8003fbe:	e00a      	b.n	8003fd6 <SCSI_Inquiry+0x46>
    {
      len--;
 8003fc0:	8bfb      	ldrh	r3, [r7, #30]
 8003fc2:	3b01      	subs	r3, #1
 8003fc4:	83fb      	strh	r3, [r7, #30]
      hmsc->bot_data[len] = MSC_Page00_Inquiry_Data[len];
 8003fc6:	8bfa      	ldrh	r2, [r7, #30]
 8003fc8:	8bfb      	ldrh	r3, [r7, #30]
 8003fca:	491f      	ldr	r1, [pc, #124]	; (8004048 <SCSI_Inquiry+0xb8>)
 8003fcc:	5c89      	ldrb	r1, [r1, r2]
 8003fce:	69ba      	ldr	r2, [r7, #24]
 8003fd0:	4413      	add	r3, r2
 8003fd2:	460a      	mov	r2, r1
 8003fd4:	731a      	strb	r2, [r3, #12]
    while (len)
 8003fd6:	8bfb      	ldrh	r3, [r7, #30]
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d1f1      	bne.n	8003fc0 <SCSI_Inquiry+0x30>
 8003fdc:	e02e      	b.n	800403c <SCSI_Inquiry+0xac>
    }
  }
  else
  {
    pPage = (uint8_t *)(void *) & ((USBD_StorageTypeDef *)pdev->pUserData)->pInquiry[lun * STANDARD_INQUIRY_DATA_LEN];
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8003fe4:	69d9      	ldr	r1, [r3, #28]
 8003fe6:	7afa      	ldrb	r2, [r7, #11]
 8003fe8:	4613      	mov	r3, r2
 8003fea:	00db      	lsls	r3, r3, #3
 8003fec:	4413      	add	r3, r2
 8003fee:	009b      	lsls	r3, r3, #2
 8003ff0:	440b      	add	r3, r1
 8003ff2:	617b      	str	r3, [r7, #20]
    len = (uint16_t)pPage[4] + 5U;
 8003ff4:	697b      	ldr	r3, [r7, #20]
 8003ff6:	3304      	adds	r3, #4
 8003ff8:	781b      	ldrb	r3, [r3, #0]
 8003ffa:	b29b      	uxth	r3, r3
 8003ffc:	3305      	adds	r3, #5
 8003ffe:	83fb      	strh	r3, [r7, #30]

    if (params[4] <= len)
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	3304      	adds	r3, #4
 8004004:	781b      	ldrb	r3, [r3, #0]
 8004006:	b29b      	uxth	r3, r3
 8004008:	8bfa      	ldrh	r2, [r7, #30]
 800400a:	429a      	cmp	r2, r3
 800400c:	d303      	bcc.n	8004016 <SCSI_Inquiry+0x86>
    {
      len = params[4];
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	3304      	adds	r3, #4
 8004012:	781b      	ldrb	r3, [r3, #0]
 8004014:	83fb      	strh	r3, [r7, #30]
    }
    hmsc->bot_data_length = len;
 8004016:	69bb      	ldr	r3, [r7, #24]
 8004018:	8bfa      	ldrh	r2, [r7, #30]
 800401a:	815a      	strh	r2, [r3, #10]

    while (len)
 800401c:	e00b      	b.n	8004036 <SCSI_Inquiry+0xa6>
    {
      len--;
 800401e:	8bfb      	ldrh	r3, [r7, #30]
 8004020:	3b01      	subs	r3, #1
 8004022:	83fb      	strh	r3, [r7, #30]
      hmsc->bot_data[len] = pPage[len];
 8004024:	8bfb      	ldrh	r3, [r7, #30]
 8004026:	697a      	ldr	r2, [r7, #20]
 8004028:	441a      	add	r2, r3
 800402a:	8bfb      	ldrh	r3, [r7, #30]
 800402c:	7811      	ldrb	r1, [r2, #0]
 800402e:	69ba      	ldr	r2, [r7, #24]
 8004030:	4413      	add	r3, r2
 8004032:	460a      	mov	r2, r1
 8004034:	731a      	strb	r2, [r3, #12]
    while (len)
 8004036:	8bfb      	ldrh	r3, [r7, #30]
 8004038:	2b00      	cmp	r3, #0
 800403a:	d1f0      	bne.n	800401e <SCSI_Inquiry+0x8e>
    }
  }

  return 0;
 800403c:	2300      	movs	r3, #0
}
 800403e:	4618      	mov	r0, r3
 8004040:	3724      	adds	r7, #36	; 0x24
 8004042:	46bd      	mov	sp, r7
 8004044:	bc80      	pop	{r7}
 8004046:	4770      	bx	lr
 8004048:	080063d0 	.word	0x080063d0

0800404c <SCSI_ReadCapacity10>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_ReadCapacity10(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 800404c:	b580      	push	{r7, lr}
 800404e:	b086      	sub	sp, #24
 8004050:	af00      	add	r7, sp, #0
 8004052:	60f8      	str	r0, [r7, #12]
 8004054:	460b      	mov	r3, r1
 8004056:	607a      	str	r2, [r7, #4]
 8004058:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004060:	617b      	str	r3, [r7, #20]

  if (((USBD_StorageTypeDef *)pdev->pUserData)->GetCapacity(lun, &hmsc->scsi_blk_nbr, &hmsc->scsi_blk_size) != 0)
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004068:	685b      	ldr	r3, [r3, #4]
 800406a:	697a      	ldr	r2, [r7, #20]
 800406c:	f502 7118 	add.w	r1, r2, #608	; 0x260
 8004070:	697a      	ldr	r2, [r7, #20]
 8004072:	f202 225e 	addw	r2, r2, #606	; 0x25e
 8004076:	7af8      	ldrb	r0, [r7, #11]
 8004078:	4798      	blx	r3
 800407a:	4603      	mov	r3, r0
 800407c:	2b00      	cmp	r3, #0
 800407e:	d008      	beq.n	8004092 <SCSI_ReadCapacity10+0x46>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8004080:	7af9      	ldrb	r1, [r7, #11]
 8004082:	233a      	movs	r3, #58	; 0x3a
 8004084:	2202      	movs	r2, #2
 8004086:	68f8      	ldr	r0, [r7, #12]
 8004088:	f000 f966 	bl	8004358 <SCSI_SenseCode>
    return -1;
 800408c:	f04f 33ff 	mov.w	r3, #4294967295
 8004090:	e03f      	b.n	8004112 <SCSI_ReadCapacity10+0xc6>
  }
  else
  {

    hmsc->bot_data[0] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 8004092:	697b      	ldr	r3, [r7, #20]
 8004094:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
 8004098:	3b01      	subs	r3, #1
 800409a:	0e1b      	lsrs	r3, r3, #24
 800409c:	b2da      	uxtb	r2, r3
 800409e:	697b      	ldr	r3, [r7, #20]
 80040a0:	731a      	strb	r2, [r3, #12]
    hmsc->bot_data[1] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 16);
 80040a2:	697b      	ldr	r3, [r7, #20]
 80040a4:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
 80040a8:	3b01      	subs	r3, #1
 80040aa:	0c1b      	lsrs	r3, r3, #16
 80040ac:	b2da      	uxtb	r2, r3
 80040ae:	697b      	ldr	r3, [r7, #20]
 80040b0:	735a      	strb	r2, [r3, #13]
    hmsc->bot_data[2] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >>  8);
 80040b2:	697b      	ldr	r3, [r7, #20]
 80040b4:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
 80040b8:	3b01      	subs	r3, #1
 80040ba:	0a1b      	lsrs	r3, r3, #8
 80040bc:	b2da      	uxtb	r2, r3
 80040be:	697b      	ldr	r3, [r7, #20]
 80040c0:	739a      	strb	r2, [r3, #14]
    hmsc->bot_data[3] = (uint8_t)(hmsc->scsi_blk_nbr - 1U);
 80040c2:	697b      	ldr	r3, [r7, #20]
 80040c4:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
 80040c8:	b2db      	uxtb	r3, r3
 80040ca:	3b01      	subs	r3, #1
 80040cc:	b2da      	uxtb	r2, r3
 80040ce:	697b      	ldr	r3, [r7, #20]
 80040d0:	73da      	strb	r2, [r3, #15]

    hmsc->bot_data[4] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 80040d2:	697b      	ldr	r3, [r7, #20]
 80040d4:	f8b3 325e 	ldrh.w	r3, [r3, #606]	; 0x25e
 80040d8:	161b      	asrs	r3, r3, #24
 80040da:	b2da      	uxtb	r2, r3
 80040dc:	697b      	ldr	r3, [r7, #20]
 80040de:	741a      	strb	r2, [r3, #16]
    hmsc->bot_data[5] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 80040e0:	697b      	ldr	r3, [r7, #20]
 80040e2:	f8b3 325e 	ldrh.w	r3, [r3, #606]	; 0x25e
 80040e6:	141b      	asrs	r3, r3, #16
 80040e8:	b2da      	uxtb	r2, r3
 80040ea:	697b      	ldr	r3, [r7, #20]
 80040ec:	745a      	strb	r2, [r3, #17]
    hmsc->bot_data[6] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 80040ee:	697b      	ldr	r3, [r7, #20]
 80040f0:	f8b3 325e 	ldrh.w	r3, [r3, #606]	; 0x25e
 80040f4:	0a1b      	lsrs	r3, r3, #8
 80040f6:	b29b      	uxth	r3, r3
 80040f8:	b2da      	uxtb	r2, r3
 80040fa:	697b      	ldr	r3, [r7, #20]
 80040fc:	749a      	strb	r2, [r3, #18]
    hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_size);
 80040fe:	697b      	ldr	r3, [r7, #20]
 8004100:	f8b3 325e 	ldrh.w	r3, [r3, #606]	; 0x25e
 8004104:	b2da      	uxtb	r2, r3
 8004106:	697b      	ldr	r3, [r7, #20]
 8004108:	74da      	strb	r2, [r3, #19]

    hmsc->bot_data_length = 8U;
 800410a:	697b      	ldr	r3, [r7, #20]
 800410c:	2208      	movs	r2, #8
 800410e:	815a      	strh	r2, [r3, #10]
    return 0;
 8004110:	2300      	movs	r3, #0
  }
}
 8004112:	4618      	mov	r0, r3
 8004114:	3718      	adds	r7, #24
 8004116:	46bd      	mov	sp, r7
 8004118:	bd80      	pop	{r7, pc}

0800411a <SCSI_ReadFormatCapacity>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_ReadFormatCapacity(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 800411a:	b580      	push	{r7, lr}
 800411c:	b088      	sub	sp, #32
 800411e:	af00      	add	r7, sp, #0
 8004120:	60f8      	str	r0, [r7, #12]
 8004122:	460b      	mov	r3, r1
 8004124:	607a      	str	r2, [r7, #4]
 8004126:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800412e:	61bb      	str	r3, [r7, #24]

  uint16_t blk_size;
  uint32_t blk_nbr;
  uint16_t i;

  for (i = 0U; i < 12U ; i++)
 8004130:	2300      	movs	r3, #0
 8004132:	83fb      	strh	r3, [r7, #30]
 8004134:	e007      	b.n	8004146 <SCSI_ReadFormatCapacity+0x2c>
  {
    hmsc->bot_data[i] = 0U;
 8004136:	8bfb      	ldrh	r3, [r7, #30]
 8004138:	69ba      	ldr	r2, [r7, #24]
 800413a:	4413      	add	r3, r2
 800413c:	2200      	movs	r2, #0
 800413e:	731a      	strb	r2, [r3, #12]
  for (i = 0U; i < 12U ; i++)
 8004140:	8bfb      	ldrh	r3, [r7, #30]
 8004142:	3301      	adds	r3, #1
 8004144:	83fb      	strh	r3, [r7, #30]
 8004146:	8bfb      	ldrh	r3, [r7, #30]
 8004148:	2b0b      	cmp	r3, #11
 800414a:	d9f4      	bls.n	8004136 <SCSI_ReadFormatCapacity+0x1c>
  }

  if (((USBD_StorageTypeDef *)pdev->pUserData)->GetCapacity(lun, &blk_nbr, &blk_size) != 0U)
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004152:	685b      	ldr	r3, [r3, #4]
 8004154:	f107 0216 	add.w	r2, r7, #22
 8004158:	f107 0110 	add.w	r1, r7, #16
 800415c:	7af8      	ldrb	r0, [r7, #11]
 800415e:	4798      	blx	r3
 8004160:	4603      	mov	r3, r0
 8004162:	2b00      	cmp	r3, #0
 8004164:	d008      	beq.n	8004178 <SCSI_ReadFormatCapacity+0x5e>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8004166:	7af9      	ldrb	r1, [r7, #11]
 8004168:	233a      	movs	r3, #58	; 0x3a
 800416a:	2202      	movs	r2, #2
 800416c:	68f8      	ldr	r0, [r7, #12]
 800416e:	f000 f8f3 	bl	8004358 <SCSI_SenseCode>
    return -1;
 8004172:	f04f 33ff 	mov.w	r3, #4294967295
 8004176:	e030      	b.n	80041da <SCSI_ReadFormatCapacity+0xc0>
  }
  else
  {
    hmsc->bot_data[3] = 0x08U;
 8004178:	69bb      	ldr	r3, [r7, #24]
 800417a:	2208      	movs	r2, #8
 800417c:	73da      	strb	r2, [r3, #15]
    hmsc->bot_data[4] = (uint8_t)((blk_nbr - 1U) >> 24);
 800417e:	693b      	ldr	r3, [r7, #16]
 8004180:	3b01      	subs	r3, #1
 8004182:	0e1b      	lsrs	r3, r3, #24
 8004184:	b2da      	uxtb	r2, r3
 8004186:	69bb      	ldr	r3, [r7, #24]
 8004188:	741a      	strb	r2, [r3, #16]
    hmsc->bot_data[5] = (uint8_t)((blk_nbr - 1U) >> 16);
 800418a:	693b      	ldr	r3, [r7, #16]
 800418c:	3b01      	subs	r3, #1
 800418e:	0c1b      	lsrs	r3, r3, #16
 8004190:	b2da      	uxtb	r2, r3
 8004192:	69bb      	ldr	r3, [r7, #24]
 8004194:	745a      	strb	r2, [r3, #17]
    hmsc->bot_data[6] = (uint8_t)((blk_nbr - 1U) >>  8);
 8004196:	693b      	ldr	r3, [r7, #16]
 8004198:	3b01      	subs	r3, #1
 800419a:	0a1b      	lsrs	r3, r3, #8
 800419c:	b2da      	uxtb	r2, r3
 800419e:	69bb      	ldr	r3, [r7, #24]
 80041a0:	749a      	strb	r2, [r3, #18]
    hmsc->bot_data[7] = (uint8_t)(blk_nbr - 1U);
 80041a2:	693b      	ldr	r3, [r7, #16]
 80041a4:	b2db      	uxtb	r3, r3
 80041a6:	3b01      	subs	r3, #1
 80041a8:	b2da      	uxtb	r2, r3
 80041aa:	69bb      	ldr	r3, [r7, #24]
 80041ac:	74da      	strb	r2, [r3, #19]

    hmsc->bot_data[8] = 0x02U;
 80041ae:	69bb      	ldr	r3, [r7, #24]
 80041b0:	2202      	movs	r2, #2
 80041b2:	751a      	strb	r2, [r3, #20]
    hmsc->bot_data[9] = (uint8_t)(blk_size >>  16);
 80041b4:	8afb      	ldrh	r3, [r7, #22]
 80041b6:	141b      	asrs	r3, r3, #16
 80041b8:	b2da      	uxtb	r2, r3
 80041ba:	69bb      	ldr	r3, [r7, #24]
 80041bc:	755a      	strb	r2, [r3, #21]
    hmsc->bot_data[10] = (uint8_t)(blk_size >>  8);
 80041be:	8afb      	ldrh	r3, [r7, #22]
 80041c0:	0a1b      	lsrs	r3, r3, #8
 80041c2:	b29b      	uxth	r3, r3
 80041c4:	b2da      	uxtb	r2, r3
 80041c6:	69bb      	ldr	r3, [r7, #24]
 80041c8:	759a      	strb	r2, [r3, #22]
    hmsc->bot_data[11] = (uint8_t)(blk_size);
 80041ca:	8afb      	ldrh	r3, [r7, #22]
 80041cc:	b2da      	uxtb	r2, r3
 80041ce:	69bb      	ldr	r3, [r7, #24]
 80041d0:	75da      	strb	r2, [r3, #23]

    hmsc->bot_data_length = 12U;
 80041d2:	69bb      	ldr	r3, [r7, #24]
 80041d4:	220c      	movs	r2, #12
 80041d6:	815a      	strh	r2, [r3, #10]
    return 0;
 80041d8:	2300      	movs	r3, #0
  }
}
 80041da:	4618      	mov	r0, r3
 80041dc:	3720      	adds	r7, #32
 80041de:	46bd      	mov	sp, r7
 80041e0:	bd80      	pop	{r7, pc}
	...

080041e4 <SCSI_ModeSense6>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_ModeSense6(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 80041e4:	b480      	push	{r7}
 80041e6:	b087      	sub	sp, #28
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	60f8      	str	r0, [r7, #12]
 80041ec:	460b      	mov	r3, r1
 80041ee:	607a      	str	r2, [r7, #4]
 80041f0:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80041f8:	613b      	str	r3, [r7, #16]
  uint16_t len = 8U;
 80041fa:	2308      	movs	r3, #8
 80041fc:	82fb      	strh	r3, [r7, #22]
  hmsc->bot_data_length = len;
 80041fe:	693b      	ldr	r3, [r7, #16]
 8004200:	8afa      	ldrh	r2, [r7, #22]
 8004202:	815a      	strh	r2, [r3, #10]

  while (len)
 8004204:	e00a      	b.n	800421c <SCSI_ModeSense6+0x38>
  {
    len--;
 8004206:	8afb      	ldrh	r3, [r7, #22]
 8004208:	3b01      	subs	r3, #1
 800420a:	82fb      	strh	r3, [r7, #22]
    hmsc->bot_data[len] = MSC_Mode_Sense6_data[len];
 800420c:	8afa      	ldrh	r2, [r7, #22]
 800420e:	8afb      	ldrh	r3, [r7, #22]
 8004210:	4907      	ldr	r1, [pc, #28]	; (8004230 <SCSI_ModeSense6+0x4c>)
 8004212:	5c89      	ldrb	r1, [r1, r2]
 8004214:	693a      	ldr	r2, [r7, #16]
 8004216:	4413      	add	r3, r2
 8004218:	460a      	mov	r2, r1
 800421a:	731a      	strb	r2, [r3, #12]
  while (len)
 800421c:	8afb      	ldrh	r3, [r7, #22]
 800421e:	2b00      	cmp	r3, #0
 8004220:	d1f1      	bne.n	8004206 <SCSI_ModeSense6+0x22>
  }
  return 0;
 8004222:	2300      	movs	r3, #0
}
 8004224:	4618      	mov	r0, r3
 8004226:	371c      	adds	r7, #28
 8004228:	46bd      	mov	sp, r7
 800422a:	bc80      	pop	{r7}
 800422c:	4770      	bx	lr
 800422e:	bf00      	nop
 8004230:	080063d8 	.word	0x080063d8

08004234 <SCSI_ModeSense10>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_ModeSense10(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 8004234:	b480      	push	{r7}
 8004236:	b087      	sub	sp, #28
 8004238:	af00      	add	r7, sp, #0
 800423a:	60f8      	str	r0, [r7, #12]
 800423c:	460b      	mov	r3, r1
 800423e:	607a      	str	r2, [r7, #4]
 8004240:	72fb      	strb	r3, [r7, #11]
  uint16_t len = 8U;
 8004242:	2308      	movs	r3, #8
 8004244:	82fb      	strh	r3, [r7, #22]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800424c:	613b      	str	r3, [r7, #16]

  hmsc->bot_data_length = len;
 800424e:	693b      	ldr	r3, [r7, #16]
 8004250:	8afa      	ldrh	r2, [r7, #22]
 8004252:	815a      	strh	r2, [r3, #10]

  while (len)
 8004254:	e00a      	b.n	800426c <SCSI_ModeSense10+0x38>
  {
    len--;
 8004256:	8afb      	ldrh	r3, [r7, #22]
 8004258:	3b01      	subs	r3, #1
 800425a:	82fb      	strh	r3, [r7, #22]
    hmsc->bot_data[len] = MSC_Mode_Sense10_data[len];
 800425c:	8afa      	ldrh	r2, [r7, #22]
 800425e:	8afb      	ldrh	r3, [r7, #22]
 8004260:	4907      	ldr	r1, [pc, #28]	; (8004280 <SCSI_ModeSense10+0x4c>)
 8004262:	5c89      	ldrb	r1, [r1, r2]
 8004264:	693a      	ldr	r2, [r7, #16]
 8004266:	4413      	add	r3, r2
 8004268:	460a      	mov	r2, r1
 800426a:	731a      	strb	r2, [r3, #12]
  while (len)
 800426c:	8afb      	ldrh	r3, [r7, #22]
 800426e:	2b00      	cmp	r3, #0
 8004270:	d1f1      	bne.n	8004256 <SCSI_ModeSense10+0x22>
  }

  return 0;
 8004272:	2300      	movs	r3, #0
}
 8004274:	4618      	mov	r0, r3
 8004276:	371c      	adds	r7, #28
 8004278:	46bd      	mov	sp, r7
 800427a:	bc80      	pop	{r7}
 800427c:	4770      	bx	lr
 800427e:	bf00      	nop
 8004280:	080063e0 	.word	0x080063e0

08004284 <SCSI_RequestSense>:
* @param  params: Command parameters
* @retval status
*/

static int8_t SCSI_RequestSense(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 8004284:	b480      	push	{r7}
 8004286:	b087      	sub	sp, #28
 8004288:	af00      	add	r7, sp, #0
 800428a:	60f8      	str	r0, [r7, #12]
 800428c:	460b      	mov	r3, r1
 800428e:	607a      	str	r2, [r7, #4]
 8004290:	72fb      	strb	r3, [r7, #11]
  uint8_t i;
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004298:	613b      	str	r3, [r7, #16]

  for (i = 0U ; i < REQUEST_SENSE_DATA_LEN; i++)
 800429a:	2300      	movs	r3, #0
 800429c:	75fb      	strb	r3, [r7, #23]
 800429e:	e007      	b.n	80042b0 <SCSI_RequestSense+0x2c>
  {
    hmsc->bot_data[i] = 0U;
 80042a0:	7dfb      	ldrb	r3, [r7, #23]
 80042a2:	693a      	ldr	r2, [r7, #16]
 80042a4:	4413      	add	r3, r2
 80042a6:	2200      	movs	r2, #0
 80042a8:	731a      	strb	r2, [r3, #12]
  for (i = 0U ; i < REQUEST_SENSE_DATA_LEN; i++)
 80042aa:	7dfb      	ldrb	r3, [r7, #23]
 80042ac:	3301      	adds	r3, #1
 80042ae:	75fb      	strb	r3, [r7, #23]
 80042b0:	7dfb      	ldrb	r3, [r7, #23]
 80042b2:	2b11      	cmp	r3, #17
 80042b4:	d9f4      	bls.n	80042a0 <SCSI_RequestSense+0x1c>
  }

  hmsc->bot_data[0] = 0x70U;
 80042b6:	693b      	ldr	r3, [r7, #16]
 80042b8:	2270      	movs	r2, #112	; 0x70
 80042ba:	731a      	strb	r2, [r3, #12]
  hmsc->bot_data[7] = REQUEST_SENSE_DATA_LEN - 6U;
 80042bc:	693b      	ldr	r3, [r7, #16]
 80042be:	220c      	movs	r2, #12
 80042c0:	74da      	strb	r2, [r3, #19]

  if ((hmsc->scsi_sense_head != hmsc->scsi_sense_tail))
 80042c2:	693b      	ldr	r3, [r7, #16]
 80042c4:	f893 225c 	ldrb.w	r2, [r3, #604]	; 0x25c
 80042c8:	693b      	ldr	r3, [r7, #16]
 80042ca:	f893 325d 	ldrb.w	r3, [r3, #605]	; 0x25d
 80042ce:	429a      	cmp	r2, r3
 80042d0:	d02e      	beq.n	8004330 <SCSI_RequestSense+0xac>
  {

    hmsc->bot_data[2]     = hmsc->scsi_sense[hmsc->scsi_sense_head].Skey;
 80042d2:	693b      	ldr	r3, [r7, #16]
 80042d4:	f893 325c 	ldrb.w	r3, [r3, #604]	; 0x25c
 80042d8:	693a      	ldr	r2, [r7, #16]
 80042da:	3347      	adds	r3, #71	; 0x47
 80042dc:	00db      	lsls	r3, r3, #3
 80042de:	4413      	add	r3, r2
 80042e0:	791a      	ldrb	r2, [r3, #4]
 80042e2:	693b      	ldr	r3, [r7, #16]
 80042e4:	739a      	strb	r2, [r3, #14]
    hmsc->bot_data[12]    = hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASCQ;
 80042e6:	693b      	ldr	r3, [r7, #16]
 80042e8:	f893 325c 	ldrb.w	r3, [r3, #604]	; 0x25c
 80042ec:	693a      	ldr	r2, [r7, #16]
 80042ee:	3347      	adds	r3, #71	; 0x47
 80042f0:	00db      	lsls	r3, r3, #3
 80042f2:	4413      	add	r3, r2
 80042f4:	7a5a      	ldrb	r2, [r3, #9]
 80042f6:	693b      	ldr	r3, [r7, #16]
 80042f8:	761a      	strb	r2, [r3, #24]
    hmsc->bot_data[13]    = hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASC;
 80042fa:	693b      	ldr	r3, [r7, #16]
 80042fc:	f893 325c 	ldrb.w	r3, [r3, #604]	; 0x25c
 8004300:	693a      	ldr	r2, [r7, #16]
 8004302:	3347      	adds	r3, #71	; 0x47
 8004304:	00db      	lsls	r3, r3, #3
 8004306:	4413      	add	r3, r2
 8004308:	7a1a      	ldrb	r2, [r3, #8]
 800430a:	693b      	ldr	r3, [r7, #16]
 800430c:	765a      	strb	r2, [r3, #25]
    hmsc->scsi_sense_head++;
 800430e:	693b      	ldr	r3, [r7, #16]
 8004310:	f893 325c 	ldrb.w	r3, [r3, #604]	; 0x25c
 8004314:	3301      	adds	r3, #1
 8004316:	b2da      	uxtb	r2, r3
 8004318:	693b      	ldr	r3, [r7, #16]
 800431a:	f883 225c 	strb.w	r2, [r3, #604]	; 0x25c

    if (hmsc->scsi_sense_head == SENSE_LIST_DEEPTH)
 800431e:	693b      	ldr	r3, [r7, #16]
 8004320:	f893 325c 	ldrb.w	r3, [r3, #604]	; 0x25c
 8004324:	2b04      	cmp	r3, #4
 8004326:	d103      	bne.n	8004330 <SCSI_RequestSense+0xac>
    {
      hmsc->scsi_sense_head = 0U;
 8004328:	693b      	ldr	r3, [r7, #16]
 800432a:	2200      	movs	r2, #0
 800432c:	f883 225c 	strb.w	r2, [r3, #604]	; 0x25c
    }
  }
  hmsc->bot_data_length = REQUEST_SENSE_DATA_LEN;
 8004330:	693b      	ldr	r3, [r7, #16]
 8004332:	2212      	movs	r2, #18
 8004334:	815a      	strh	r2, [r3, #10]

  if (params[4] <= REQUEST_SENSE_DATA_LEN)
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	3304      	adds	r3, #4
 800433a:	781b      	ldrb	r3, [r3, #0]
 800433c:	2b12      	cmp	r3, #18
 800433e:	d805      	bhi.n	800434c <SCSI_RequestSense+0xc8>
  {
    hmsc->bot_data_length = params[4];
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	3304      	adds	r3, #4
 8004344:	781b      	ldrb	r3, [r3, #0]
 8004346:	b29a      	uxth	r2, r3
 8004348:	693b      	ldr	r3, [r7, #16]
 800434a:	815a      	strh	r2, [r3, #10]
  }
  return 0;
 800434c:	2300      	movs	r3, #0
}
 800434e:	4618      	mov	r0, r3
 8004350:	371c      	adds	r7, #28
 8004352:	46bd      	mov	sp, r7
 8004354:	bc80      	pop	{r7}
 8004356:	4770      	bx	lr

08004358 <SCSI_SenseCode>:
* @param  ASC: Additional Sense Key
* @retval none

*/
void SCSI_SenseCode(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t sKey, uint8_t ASC)
{
 8004358:	b480      	push	{r7}
 800435a:	b085      	sub	sp, #20
 800435c:	af00      	add	r7, sp, #0
 800435e:	6078      	str	r0, [r7, #4]
 8004360:	4608      	mov	r0, r1
 8004362:	4611      	mov	r1, r2
 8004364:	461a      	mov	r2, r3
 8004366:	4603      	mov	r3, r0
 8004368:	70fb      	strb	r3, [r7, #3]
 800436a:	460b      	mov	r3, r1
 800436c:	70bb      	strb	r3, [r7, #2]
 800436e:	4613      	mov	r3, r2
 8004370:	707b      	strb	r3, [r7, #1]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004378:	60fb      	str	r3, [r7, #12]

  hmsc->scsi_sense[hmsc->scsi_sense_tail].Skey  = sKey;
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	f893 325d 	ldrb.w	r3, [r3, #605]	; 0x25d
 8004380:	68fa      	ldr	r2, [r7, #12]
 8004382:	3347      	adds	r3, #71	; 0x47
 8004384:	00db      	lsls	r3, r3, #3
 8004386:	4413      	add	r3, r2
 8004388:	78ba      	ldrb	r2, [r7, #2]
 800438a:	711a      	strb	r2, [r3, #4]
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.ASC = ASC << 8;
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	f893 325d 	ldrb.w	r3, [r3, #605]	; 0x25d
 8004392:	68fa      	ldr	r2, [r7, #12]
 8004394:	3347      	adds	r3, #71	; 0x47
 8004396:	00db      	lsls	r3, r3, #3
 8004398:	4413      	add	r3, r2
 800439a:	2200      	movs	r2, #0
 800439c:	721a      	strb	r2, [r3, #8]
  hmsc->scsi_sense_tail++;
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	f893 325d 	ldrb.w	r3, [r3, #605]	; 0x25d
 80043a4:	3301      	adds	r3, #1
 80043a6:	b2da      	uxtb	r2, r3
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	f883 225d 	strb.w	r2, [r3, #605]	; 0x25d
  if (hmsc->scsi_sense_tail == SENSE_LIST_DEEPTH)
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	f893 325d 	ldrb.w	r3, [r3, #605]	; 0x25d
 80043b4:	2b04      	cmp	r3, #4
 80043b6:	d103      	bne.n	80043c0 <SCSI_SenseCode+0x68>
  {
    hmsc->scsi_sense_tail = 0U;
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	2200      	movs	r2, #0
 80043bc:	f883 225d 	strb.w	r2, [r3, #605]	; 0x25d
  }
}
 80043c0:	bf00      	nop
 80043c2:	3714      	adds	r7, #20
 80043c4:	46bd      	mov	sp, r7
 80043c6:	bc80      	pop	{r7}
 80043c8:	4770      	bx	lr

080043ca <SCSI_StartStopUnit>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_StartStopUnit(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 80043ca:	b480      	push	{r7}
 80043cc:	b087      	sub	sp, #28
 80043ce:	af00      	add	r7, sp, #0
 80043d0:	60f8      	str	r0, [r7, #12]
 80043d2:	460b      	mov	r3, r1
 80043d4:	607a      	str	r2, [r7, #4]
 80043d6:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *) pdev->pClassData;
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80043de:	617b      	str	r3, [r7, #20]
  hmsc->bot_data_length = 0U;
 80043e0:	697b      	ldr	r3, [r7, #20]
 80043e2:	2200      	movs	r2, #0
 80043e4:	815a      	strh	r2, [r3, #10]
  return 0;
 80043e6:	2300      	movs	r3, #0
}
 80043e8:	4618      	mov	r0, r3
 80043ea:	371c      	adds	r7, #28
 80043ec:	46bd      	mov	sp, r7
 80043ee:	bc80      	pop	{r7}
 80043f0:	4770      	bx	lr

080043f2 <SCSI_Read10>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_Read10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80043f2:	b580      	push	{r7, lr}
 80043f4:	b086      	sub	sp, #24
 80043f6:	af00      	add	r7, sp, #0
 80043f8:	60f8      	str	r0, [r7, #12]
 80043fa:	460b      	mov	r3, r1
 80043fc:	607a      	str	r2, [r7, #4]
 80043fe:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *) pdev->pClassData;
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004406:	617b      	str	r3, [r7, #20]

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 8004408:	697b      	ldr	r3, [r7, #20]
 800440a:	7a1b      	ldrb	r3, [r3, #8]
 800440c:	2b00      	cmp	r3, #0
 800440e:	d16e      	bne.n	80044ee <SCSI_Read10+0xfc>
  {
    /* case 10 : Ho <> Di */
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 8004410:	697b      	ldr	r3, [r7, #20]
 8004412:	f893 3218 	ldrb.w	r3, [r3, #536]	; 0x218
 8004416:	b25b      	sxtb	r3, r3
 8004418:	2b00      	cmp	r3, #0
 800441a:	db0a      	blt.n	8004432 <SCSI_Read10+0x40>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800441c:	697b      	ldr	r3, [r7, #20]
 800441e:	f893 1219 	ldrb.w	r1, [r3, #537]	; 0x219
 8004422:	2320      	movs	r3, #32
 8004424:	2205      	movs	r2, #5
 8004426:	68f8      	ldr	r0, [r7, #12]
 8004428:	f7ff ff96 	bl	8004358 <SCSI_SenseCode>
      return -1;
 800442c:	f04f 33ff 	mov.w	r3, #4294967295
 8004430:	e067      	b.n	8004502 <SCSI_Read10+0x110>
    }

    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004438:	689b      	ldr	r3, [r3, #8]
 800443a:	7afa      	ldrb	r2, [r7, #11]
 800443c:	4610      	mov	r0, r2
 800443e:	4798      	blx	r3
 8004440:	4603      	mov	r3, r0
 8004442:	2b00      	cmp	r3, #0
 8004444:	d008      	beq.n	8004458 <SCSI_Read10+0x66>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8004446:	7af9      	ldrb	r1, [r7, #11]
 8004448:	233a      	movs	r3, #58	; 0x3a
 800444a:	2202      	movs	r2, #2
 800444c:	68f8      	ldr	r0, [r7, #12]
 800444e:	f7ff ff83 	bl	8004358 <SCSI_SenseCode>
      return -1;
 8004452:	f04f 33ff 	mov.w	r3, #4294967295
 8004456:	e054      	b.n	8004502 <SCSI_Read10+0x110>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	3302      	adds	r3, #2
 800445c:	781b      	ldrb	r3, [r3, #0]
 800445e:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	3303      	adds	r3, #3
 8004464:	781b      	ldrb	r3, [r3, #0]
 8004466:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8004468:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] <<  8) |
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	3304      	adds	r3, #4
 800446e:	781b      	ldrb	r3, [r3, #0]
 8004470:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 8004472:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 8004474:	687a      	ldr	r2, [r7, #4]
 8004476:	3205      	adds	r2, #5
 8004478:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] <<  8) |
 800447a:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800447c:	697b      	ldr	r3, [r7, #20]
 800447e:	f8c3 2264 	str.w	r2, [r3, #612]	; 0x264

    hmsc->scsi_blk_len = ((uint32_t)params[7] <<  8) | (uint32_t)params[8];
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	3307      	adds	r3, #7
 8004486:	781b      	ldrb	r3, [r3, #0]
 8004488:	021b      	lsls	r3, r3, #8
 800448a:	687a      	ldr	r2, [r7, #4]
 800448c:	3208      	adds	r2, #8
 800448e:	7812      	ldrb	r2, [r2, #0]
 8004490:	431a      	orrs	r2, r3
 8004492:	697b      	ldr	r3, [r7, #20]
 8004494:	f8c3 2268 	str.w	r2, [r3, #616]	; 0x268

    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 8004498:	697b      	ldr	r3, [r7, #20]
 800449a:	f8d3 2264 	ldr.w	r2, [r3, #612]	; 0x264
 800449e:	697b      	ldr	r3, [r7, #20]
 80044a0:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 80044a4:	7af9      	ldrb	r1, [r7, #11]
 80044a6:	68f8      	ldr	r0, [r7, #12]
 80044a8:	f000 f912 	bl	80046d0 <SCSI_CheckAddressRange>
 80044ac:	4603      	mov	r3, r0
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	da02      	bge.n	80044b8 <SCSI_Read10+0xc6>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 80044b2:	f04f 33ff 	mov.w	r3, #4294967295
 80044b6:	e024      	b.n	8004502 <SCSI_Read10+0x110>
    }

    hmsc->bot_state = USBD_BOT_DATA_IN;
 80044b8:	697b      	ldr	r3, [r7, #20]
 80044ba:	2202      	movs	r2, #2
 80044bc:	721a      	strb	r2, [r3, #8]

    /* cases 4,5 : Hi <> Dn */
    if (hmsc->cbw.dDataLength != (hmsc->scsi_blk_len * hmsc->scsi_blk_size))
 80044be:	697b      	ldr	r3, [r7, #20]
 80044c0:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80044c4:	697b      	ldr	r3, [r7, #20]
 80044c6:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 80044ca:	6979      	ldr	r1, [r7, #20]
 80044cc:	f8b1 125e 	ldrh.w	r1, [r1, #606]	; 0x25e
 80044d0:	fb01 f303 	mul.w	r3, r1, r3
 80044d4:	429a      	cmp	r2, r3
 80044d6:	d00a      	beq.n	80044ee <SCSI_Read10+0xfc>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80044d8:	697b      	ldr	r3, [r7, #20]
 80044da:	f893 1219 	ldrb.w	r1, [r3, #537]	; 0x219
 80044de:	2320      	movs	r3, #32
 80044e0:	2205      	movs	r2, #5
 80044e2:	68f8      	ldr	r0, [r7, #12]
 80044e4:	f7ff ff38 	bl	8004358 <SCSI_SenseCode>
      return -1;
 80044e8:	f04f 33ff 	mov.w	r3, #4294967295
 80044ec:	e009      	b.n	8004502 <SCSI_Read10+0x110>
    }
  }
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 80044ee:	697b      	ldr	r3, [r7, #20]
 80044f0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80044f4:	815a      	strh	r2, [r3, #10]

  return SCSI_ProcessRead(pdev, lun);
 80044f6:	7afb      	ldrb	r3, [r7, #11]
 80044f8:	4619      	mov	r1, r3
 80044fa:	68f8      	ldr	r0, [r7, #12]
 80044fc:	f000 f90a 	bl	8004714 <SCSI_ProcessRead>
 8004500:	4603      	mov	r3, r0
}
 8004502:	4618      	mov	r0, r3
 8004504:	3718      	adds	r7, #24
 8004506:	46bd      	mov	sp, r7
 8004508:	bd80      	pop	{r7, pc}

0800450a <SCSI_Write10>:
* @param  params: Command parameters
* @retval status
*/

static int8_t SCSI_Write10(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 800450a:	b580      	push	{r7, lr}
 800450c:	b086      	sub	sp, #24
 800450e:	af00      	add	r7, sp, #0
 8004510:	60f8      	str	r0, [r7, #12]
 8004512:	460b      	mov	r3, r1
 8004514:	607a      	str	r2, [r7, #4]
 8004516:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *) pdev->pClassData;
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800451e:	617b      	str	r3, [r7, #20]
  uint32_t len;

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 8004520:	697b      	ldr	r3, [r7, #20]
 8004522:	7a1b      	ldrb	r3, [r3, #8]
 8004524:	2b00      	cmp	r3, #0
 8004526:	f040 8096 	bne.w	8004656 <SCSI_Write10+0x14c>
  {
    /* case 8 : Hi <> Do */
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 800452a:	697b      	ldr	r3, [r7, #20]
 800452c:	f893 3218 	ldrb.w	r3, [r3, #536]	; 0x218
 8004530:	b25b      	sxtb	r3, r3
 8004532:	2b00      	cmp	r3, #0
 8004534:	da0a      	bge.n	800454c <SCSI_Write10+0x42>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8004536:	697b      	ldr	r3, [r7, #20]
 8004538:	f893 1219 	ldrb.w	r1, [r3, #537]	; 0x219
 800453c:	2320      	movs	r3, #32
 800453e:	2205      	movs	r2, #5
 8004540:	68f8      	ldr	r0, [r7, #12]
 8004542:	f7ff ff09 	bl	8004358 <SCSI_SenseCode>
      return -1;
 8004546:	f04f 33ff 	mov.w	r3, #4294967295
 800454a:	e08a      	b.n	8004662 <SCSI_Write10+0x158>
    }

    /* Check whether Media is ready */
    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004552:	689b      	ldr	r3, [r3, #8]
 8004554:	7afa      	ldrb	r2, [r7, #11]
 8004556:	4610      	mov	r0, r2
 8004558:	4798      	blx	r3
 800455a:	4603      	mov	r3, r0
 800455c:	2b00      	cmp	r3, #0
 800455e:	d008      	beq.n	8004572 <SCSI_Write10+0x68>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8004560:	7af9      	ldrb	r1, [r7, #11]
 8004562:	233a      	movs	r3, #58	; 0x3a
 8004564:	2202      	movs	r2, #2
 8004566:	68f8      	ldr	r0, [r7, #12]
 8004568:	f7ff fef6 	bl	8004358 <SCSI_SenseCode>
      return -1;
 800456c:	f04f 33ff 	mov.w	r3, #4294967295
 8004570:	e077      	b.n	8004662 <SCSI_Write10+0x158>
    }

    /* Check If media is write-protected */
    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsWriteProtected(lun) != 0)
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004578:	68db      	ldr	r3, [r3, #12]
 800457a:	7afa      	ldrb	r2, [r7, #11]
 800457c:	4610      	mov	r0, r2
 800457e:	4798      	blx	r3
 8004580:	4603      	mov	r3, r0
 8004582:	2b00      	cmp	r3, #0
 8004584:	d008      	beq.n	8004598 <SCSI_Write10+0x8e>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, WRITE_PROTECTED);
 8004586:	7af9      	ldrb	r1, [r7, #11]
 8004588:	2327      	movs	r3, #39	; 0x27
 800458a:	2202      	movs	r2, #2
 800458c:	68f8      	ldr	r0, [r7, #12]
 800458e:	f7ff fee3 	bl	8004358 <SCSI_SenseCode>
      return -1;
 8004592:	f04f 33ff 	mov.w	r3, #4294967295
 8004596:	e064      	b.n	8004662 <SCSI_Write10+0x158>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	3302      	adds	r3, #2
 800459c:	781b      	ldrb	r3, [r3, #0]
 800459e:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	3303      	adds	r3, #3
 80045a4:	781b      	ldrb	r3, [r3, #0]
 80045a6:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 80045a8:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] << 8) |
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	3304      	adds	r3, #4
 80045ae:	781b      	ldrb	r3, [r3, #0]
 80045b0:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 80045b2:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 80045b4:	687a      	ldr	r2, [r7, #4]
 80045b6:	3205      	adds	r2, #5
 80045b8:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] << 8) |
 80045ba:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 80045bc:	697b      	ldr	r3, [r7, #20]
 80045be:	f8c3 2264 	str.w	r2, [r3, #612]	; 0x264

    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	3307      	adds	r3, #7
 80045c6:	781b      	ldrb	r3, [r3, #0]
 80045c8:	021b      	lsls	r3, r3, #8
                         (uint32_t)params[8];
 80045ca:	687a      	ldr	r2, [r7, #4]
 80045cc:	3208      	adds	r2, #8
 80045ce:	7812      	ldrb	r2, [r2, #0]
    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 80045d0:	431a      	orrs	r2, r3
 80045d2:	697b      	ldr	r3, [r7, #20]
 80045d4:	f8c3 2268 	str.w	r2, [r3, #616]	; 0x268

    /* check if LBA address is in the right range */
    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 80045d8:	697b      	ldr	r3, [r7, #20]
 80045da:	f8d3 2264 	ldr.w	r2, [r3, #612]	; 0x264
 80045de:	697b      	ldr	r3, [r7, #20]
 80045e0:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 80045e4:	7af9      	ldrb	r1, [r7, #11]
 80045e6:	68f8      	ldr	r0, [r7, #12]
 80045e8:	f000 f872 	bl	80046d0 <SCSI_CheckAddressRange>
 80045ec:	4603      	mov	r3, r0
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	da02      	bge.n	80045f8 <SCSI_Write10+0xee>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 80045f2:	f04f 33ff 	mov.w	r3, #4294967295
 80045f6:	e034      	b.n	8004662 <SCSI_Write10+0x158>
    }

    len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 80045f8:	697b      	ldr	r3, [r7, #20]
 80045fa:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 80045fe:	697a      	ldr	r2, [r7, #20]
 8004600:	f8b2 225e 	ldrh.w	r2, [r2, #606]	; 0x25e
 8004604:	fb02 f303 	mul.w	r3, r2, r3
 8004608:	613b      	str	r3, [r7, #16]

    /* cases 3,11,13 : Hn,Ho <> D0 */
    if (hmsc->cbw.dDataLength != len)
 800460a:	697b      	ldr	r3, [r7, #20]
 800460c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8004610:	693a      	ldr	r2, [r7, #16]
 8004612:	429a      	cmp	r2, r3
 8004614:	d00a      	beq.n	800462c <SCSI_Write10+0x122>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8004616:	697b      	ldr	r3, [r7, #20]
 8004618:	f893 1219 	ldrb.w	r1, [r3, #537]	; 0x219
 800461c:	2320      	movs	r3, #32
 800461e:	2205      	movs	r2, #5
 8004620:	68f8      	ldr	r0, [r7, #12]
 8004622:	f7ff fe99 	bl	8004358 <SCSI_SenseCode>
      return -1;
 8004626:	f04f 33ff 	mov.w	r3, #4294967295
 800462a:	e01a      	b.n	8004662 <SCSI_Write10+0x158>
    }

    len = MIN(len, MSC_MEDIA_PACKET);
 800462c:	693b      	ldr	r3, [r7, #16]
 800462e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004632:	bf28      	it	cs
 8004634:	f44f 7300 	movcs.w	r3, #512	; 0x200
 8004638:	613b      	str	r3, [r7, #16]

    /* Prepare EP to receive first data packet */
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 800463a:	697b      	ldr	r3, [r7, #20]
 800463c:	2201      	movs	r2, #1
 800463e:	721a      	strb	r2, [r3, #8]
    USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, hmsc->bot_data, len);
 8004640:	697b      	ldr	r3, [r7, #20]
 8004642:	f103 020c 	add.w	r2, r3, #12
 8004646:	693b      	ldr	r3, [r7, #16]
 8004648:	b29b      	uxth	r3, r3
 800464a:	2101      	movs	r1, #1
 800464c:	68f8      	ldr	r0, [r7, #12]
 800464e:	f001 fdc5 	bl	80061dc <USBD_LL_PrepareReceive>
  }
  else /* Write Process ongoing */
  {
    return SCSI_ProcessWrite(pdev, lun);
  }
  return 0;
 8004652:	2300      	movs	r3, #0
 8004654:	e005      	b.n	8004662 <SCSI_Write10+0x158>
    return SCSI_ProcessWrite(pdev, lun);
 8004656:	7afb      	ldrb	r3, [r7, #11]
 8004658:	4619      	mov	r1, r3
 800465a:	68f8      	ldr	r0, [r7, #12]
 800465c:	f000 f8ce 	bl	80047fc <SCSI_ProcessWrite>
 8004660:	4603      	mov	r3, r0
}
 8004662:	4618      	mov	r0, r3
 8004664:	3718      	adds	r7, #24
 8004666:	46bd      	mov	sp, r7
 8004668:	bd80      	pop	{r7, pc}

0800466a <SCSI_Verify10>:
* @param  params: Command parameters
* @retval status
*/

static int8_t SCSI_Verify10(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 800466a:	b580      	push	{r7, lr}
 800466c:	b086      	sub	sp, #24
 800466e:	af00      	add	r7, sp, #0
 8004670:	60f8      	str	r0, [r7, #12]
 8004672:	460b      	mov	r3, r1
 8004674:	607a      	str	r2, [r7, #4]
 8004676:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *) pdev->pClassData;
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800467e:	617b      	str	r3, [r7, #20]

  if ((params[1] & 0x02U) == 0x02U)
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	3301      	adds	r3, #1
 8004684:	781b      	ldrb	r3, [r3, #0]
 8004686:	f003 0302 	and.w	r3, r3, #2
 800468a:	2b00      	cmp	r3, #0
 800468c:	d008      	beq.n	80046a0 <SCSI_Verify10+0x36>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
 800468e:	7af9      	ldrb	r1, [r7, #11]
 8004690:	2324      	movs	r3, #36	; 0x24
 8004692:	2205      	movs	r2, #5
 8004694:	68f8      	ldr	r0, [r7, #12]
 8004696:	f7ff fe5f 	bl	8004358 <SCSI_SenseCode>
    return -1; /* Error, Verify Mode Not supported*/
 800469a:	f04f 33ff 	mov.w	r3, #4294967295
 800469e:	e013      	b.n	80046c8 <SCSI_Verify10+0x5e>
  }

  if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 80046a0:	697b      	ldr	r3, [r7, #20]
 80046a2:	f8d3 2264 	ldr.w	r2, [r3, #612]	; 0x264
 80046a6:	697b      	ldr	r3, [r7, #20]
 80046a8:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 80046ac:	7af9      	ldrb	r1, [r7, #11]
 80046ae:	68f8      	ldr	r0, [r7, #12]
 80046b0:	f000 f80e 	bl	80046d0 <SCSI_CheckAddressRange>
 80046b4:	4603      	mov	r3, r0
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	da02      	bge.n	80046c0 <SCSI_Verify10+0x56>
                             hmsc->scsi_blk_len) < 0)
  {
    return -1; /* error */
 80046ba:	f04f 33ff 	mov.w	r3, #4294967295
 80046be:	e003      	b.n	80046c8 <SCSI_Verify10+0x5e>
  }
  hmsc->bot_data_length = 0U;
 80046c0:	697b      	ldr	r3, [r7, #20]
 80046c2:	2200      	movs	r2, #0
 80046c4:	815a      	strh	r2, [r3, #10]
  return 0;
 80046c6:	2300      	movs	r3, #0
}
 80046c8:	4618      	mov	r0, r3
 80046ca:	3718      	adds	r7, #24
 80046cc:	46bd      	mov	sp, r7
 80046ce:	bd80      	pop	{r7, pc}

080046d0 <SCSI_CheckAddressRange>:
* @param  blk_nbr: number of block to be processed
* @retval status
*/
static int8_t SCSI_CheckAddressRange(USBD_HandleTypeDef *pdev, uint8_t lun,
                                     uint32_t blk_offset, uint32_t blk_nbr)
{
 80046d0:	b580      	push	{r7, lr}
 80046d2:	b086      	sub	sp, #24
 80046d4:	af00      	add	r7, sp, #0
 80046d6:	60f8      	str	r0, [r7, #12]
 80046d8:	607a      	str	r2, [r7, #4]
 80046da:	603b      	str	r3, [r7, #0]
 80046dc:	460b      	mov	r3, r1
 80046de:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *) pdev->pClassData;
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80046e6:	617b      	str	r3, [r7, #20]

  if ((blk_offset + blk_nbr) > hmsc->scsi_blk_nbr)
 80046e8:	687a      	ldr	r2, [r7, #4]
 80046ea:	683b      	ldr	r3, [r7, #0]
 80046ec:	441a      	add	r2, r3
 80046ee:	697b      	ldr	r3, [r7, #20]
 80046f0:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
 80046f4:	429a      	cmp	r2, r3
 80046f6:	d908      	bls.n	800470a <SCSI_CheckAddressRange+0x3a>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, ADDRESS_OUT_OF_RANGE);
 80046f8:	7af9      	ldrb	r1, [r7, #11]
 80046fa:	2321      	movs	r3, #33	; 0x21
 80046fc:	2205      	movs	r2, #5
 80046fe:	68f8      	ldr	r0, [r7, #12]
 8004700:	f7ff fe2a 	bl	8004358 <SCSI_SenseCode>
    return -1;
 8004704:	f04f 33ff 	mov.w	r3, #4294967295
 8004708:	e000      	b.n	800470c <SCSI_CheckAddressRange+0x3c>
  }
  return 0;
 800470a:	2300      	movs	r3, #0
}
 800470c:	4618      	mov	r0, r3
 800470e:	3718      	adds	r7, #24
 8004710:	46bd      	mov	sp, r7
 8004712:	bd80      	pop	{r7, pc}

08004714 <SCSI_ProcessRead>:
*         Handle Read Process
* @param  lun: Logical unit number
* @retval status
*/
static int8_t SCSI_ProcessRead(USBD_HandleTypeDef  *pdev, uint8_t lun)
{
 8004714:	b590      	push	{r4, r7, lr}
 8004716:	b085      	sub	sp, #20
 8004718:	af00      	add	r7, sp, #0
 800471a:	6078      	str	r0, [r7, #4]
 800471c:	460b      	mov	r3, r1
 800471e:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004726:	60fb      	str	r3, [r7, #12]
  uint32_t len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800472e:	68fa      	ldr	r2, [r7, #12]
 8004730:	f8b2 225e 	ldrh.w	r2, [r2, #606]	; 0x25e
 8004734:	fb02 f303 	mul.w	r3, r2, r3
 8004738:	60bb      	str	r3, [r7, #8]

  len = MIN(len, MSC_MEDIA_PACKET);
 800473a:	68bb      	ldr	r3, [r7, #8]
 800473c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004740:	bf28      	it	cs
 8004742:	f44f 7300 	movcs.w	r3, #512	; 0x200
 8004746:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserData)->Read(lun,
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800474e:	691c      	ldr	r4, [r3, #16]
                                                     hmsc->bot_data,
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	f103 010c 	add.w	r1, r3, #12
  if (((USBD_StorageTypeDef *)pdev->pUserData)->Read(lun,
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	f8d3 2264 	ldr.w	r2, [r3, #612]	; 0x264
                                                     hmsc->scsi_blk_addr,
                                                     (len / hmsc->scsi_blk_size)) < 0)
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	f8b3 325e 	ldrh.w	r3, [r3, #606]	; 0x25e
 8004762:	4618      	mov	r0, r3
 8004764:	68bb      	ldr	r3, [r7, #8]
 8004766:	fbb3 f3f0 	udiv	r3, r3, r0
  if (((USBD_StorageTypeDef *)pdev->pUserData)->Read(lun,
 800476a:	b29b      	uxth	r3, r3
 800476c:	78f8      	ldrb	r0, [r7, #3]
 800476e:	47a0      	blx	r4
 8004770:	4603      	mov	r3, r0
 8004772:	2b00      	cmp	r3, #0
 8004774:	da08      	bge.n	8004788 <SCSI_ProcessRead+0x74>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, UNRECOVERED_READ_ERROR);
 8004776:	78f9      	ldrb	r1, [r7, #3]
 8004778:	2311      	movs	r3, #17
 800477a:	2204      	movs	r2, #4
 800477c:	6878      	ldr	r0, [r7, #4]
 800477e:	f7ff fdeb 	bl	8004358 <SCSI_SenseCode>
    return -1;
 8004782:	f04f 33ff 	mov.w	r3, #4294967295
 8004786:	e035      	b.n	80047f4 <SCSI_ProcessRead+0xe0>
  }

  USBD_LL_Transmit(pdev, MSC_EPIN_ADDR, hmsc->bot_data, len);
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	f103 020c 	add.w	r2, r3, #12
 800478e:	68bb      	ldr	r3, [r7, #8]
 8004790:	b29b      	uxth	r3, r3
 8004792:	2181      	movs	r1, #129	; 0x81
 8004794:	6878      	ldr	r0, [r7, #4]
 8004796:	f001 fcfe 	bl	8006196 <USBD_LL_Transmit>

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	f8d3 2264 	ldr.w	r2, [r3, #612]	; 0x264
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	f8b3 325e 	ldrh.w	r3, [r3, #606]	; 0x25e
 80047a6:	4619      	mov	r1, r3
 80047a8:	68bb      	ldr	r3, [r7, #8]
 80047aa:	fbb3 f3f1 	udiv	r3, r3, r1
 80047ae:	441a      	add	r2, r3
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	f8c3 2264 	str.w	r2, [r3, #612]	; 0x264
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	f8d3 2268 	ldr.w	r2, [r3, #616]	; 0x268
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	f8b3 325e 	ldrh.w	r3, [r3, #606]	; 0x25e
 80047c2:	4619      	mov	r1, r3
 80047c4:	68bb      	ldr	r3, [r7, #8]
 80047c6:	fbb3 f3f1 	udiv	r3, r3, r1
 80047ca:	1ad2      	subs	r2, r2, r3
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	f8c3 2268 	str.w	r2, [r3, #616]	; 0x268

  /* case 6 : Hi = Di */
  hmsc->csw.dDataResidue -= len;
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	f8d3 2234 	ldr.w	r2, [r3, #564]	; 0x234
 80047d8:	68bb      	ldr	r3, [r7, #8]
 80047da:	1ad2      	subs	r2, r2, r3
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234

  if (hmsc->scsi_blk_len == 0U)
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d102      	bne.n	80047f2 <SCSI_ProcessRead+0xde>
  {
    hmsc->bot_state = USBD_BOT_LAST_DATA_IN;
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	2203      	movs	r2, #3
 80047f0:	721a      	strb	r2, [r3, #8]
  }
  return 0;
 80047f2:	2300      	movs	r3, #0
}
 80047f4:	4618      	mov	r0, r3
 80047f6:	3714      	adds	r7, #20
 80047f8:	46bd      	mov	sp, r7
 80047fa:	bd90      	pop	{r4, r7, pc}

080047fc <SCSI_ProcessWrite>:
* @param  lun: Logical unit number
* @retval status
*/

static int8_t SCSI_ProcessWrite(USBD_HandleTypeDef  *pdev, uint8_t lun)
{
 80047fc:	b590      	push	{r4, r7, lr}
 80047fe:	b085      	sub	sp, #20
 8004800:	af00      	add	r7, sp, #0
 8004802:	6078      	str	r0, [r7, #4]
 8004804:	460b      	mov	r3, r1
 8004806:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *) pdev->pClassData;
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800480e:	60fb      	str	r3, [r7, #12]
  uint32_t len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8004816:	68fa      	ldr	r2, [r7, #12]
 8004818:	f8b2 225e 	ldrh.w	r2, [r2, #606]	; 0x25e
 800481c:	fb02 f303 	mul.w	r3, r2, r3
 8004820:	60bb      	str	r3, [r7, #8]

  len = MIN(len, MSC_MEDIA_PACKET);
 8004822:	68bb      	ldr	r3, [r7, #8]
 8004824:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004828:	bf28      	it	cs
 800482a:	f44f 7300 	movcs.w	r3, #512	; 0x200
 800482e:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserData)->Write(lun, hmsc->bot_data,
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004836:	695c      	ldr	r4, [r3, #20]
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	f103 010c 	add.w	r1, r3, #12
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	f8d3 2264 	ldr.w	r2, [r3, #612]	; 0x264
                                                      hmsc->scsi_blk_addr,
                                                      (len / hmsc->scsi_blk_size)) < 0)
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	f8b3 325e 	ldrh.w	r3, [r3, #606]	; 0x25e
 800484a:	4618      	mov	r0, r3
 800484c:	68bb      	ldr	r3, [r7, #8]
 800484e:	fbb3 f3f0 	udiv	r3, r3, r0
  if (((USBD_StorageTypeDef *)pdev->pUserData)->Write(lun, hmsc->bot_data,
 8004852:	b29b      	uxth	r3, r3
 8004854:	78f8      	ldrb	r0, [r7, #3]
 8004856:	47a0      	blx	r4
 8004858:	4603      	mov	r3, r0
 800485a:	2b00      	cmp	r3, #0
 800485c:	da08      	bge.n	8004870 <SCSI_ProcessWrite+0x74>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, WRITE_FAULT);
 800485e:	78f9      	ldrb	r1, [r7, #3]
 8004860:	2303      	movs	r3, #3
 8004862:	2204      	movs	r2, #4
 8004864:	6878      	ldr	r0, [r7, #4]
 8004866:	f7ff fd77 	bl	8004358 <SCSI_SenseCode>

    return -1;
 800486a:	f04f 33ff 	mov.w	r3, #4294967295
 800486e:	e045      	b.n	80048fc <SCSI_ProcessWrite+0x100>
  }

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	f8d3 2264 	ldr.w	r2, [r3, #612]	; 0x264
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	f8b3 325e 	ldrh.w	r3, [r3, #606]	; 0x25e
 800487c:	4619      	mov	r1, r3
 800487e:	68bb      	ldr	r3, [r7, #8]
 8004880:	fbb3 f3f1 	udiv	r3, r3, r1
 8004884:	441a      	add	r2, r3
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	f8c3 2264 	str.w	r2, [r3, #612]	; 0x264
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	f8d3 2268 	ldr.w	r2, [r3, #616]	; 0x268
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	f8b3 325e 	ldrh.w	r3, [r3, #606]	; 0x25e
 8004898:	4619      	mov	r1, r3
 800489a:	68bb      	ldr	r3, [r7, #8]
 800489c:	fbb3 f3f1 	udiv	r3, r3, r1
 80048a0:	1ad2      	subs	r2, r2, r3
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	f8c3 2268 	str.w	r2, [r3, #616]	; 0x268

  /* case 12 : Ho = Do */
  hmsc->csw.dDataResidue -= len;
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	f8d3 2234 	ldr.w	r2, [r3, #564]	; 0x234
 80048ae:	68bb      	ldr	r3, [r7, #8]
 80048b0:	1ad2      	subs	r2, r2, r3
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234

  if (hmsc->scsi_blk_len == 0U)
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d104      	bne.n	80048cc <SCSI_ProcessWrite+0xd0>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 80048c2:	2100      	movs	r1, #0
 80048c4:	6878      	ldr	r0, [r7, #4]
 80048c6:	f7ff f97f 	bl	8003bc8 <MSC_BOT_SendCSW>
 80048ca:	e016      	b.n	80048fa <SCSI_ProcessWrite+0xfe>
  }
  else
  {
    len = MIN((hmsc->scsi_blk_len * hmsc->scsi_blk_size), MSC_MEDIA_PACKET);
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 80048d2:	68fa      	ldr	r2, [r7, #12]
 80048d4:	f8b2 225e 	ldrh.w	r2, [r2, #606]	; 0x25e
 80048d8:	fb02 f303 	mul.w	r3, r2, r3
 80048dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80048e0:	bf28      	it	cs
 80048e2:	f44f 7300 	movcs.w	r3, #512	; 0x200
 80048e6:	60bb      	str	r3, [r7, #8]
    /* Prepare EP to Receive next packet */
    USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, hmsc->bot_data, len);
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	f103 020c 	add.w	r2, r3, #12
 80048ee:	68bb      	ldr	r3, [r7, #8]
 80048f0:	b29b      	uxth	r3, r3
 80048f2:	2101      	movs	r1, #1
 80048f4:	6878      	ldr	r0, [r7, #4]
 80048f6:	f001 fc71 	bl	80061dc <USBD_LL_PrepareReceive>
  }

  return 0;
 80048fa:	2300      	movs	r3, #0
}
 80048fc:	4618      	mov	r0, r3
 80048fe:	3714      	adds	r7, #20
 8004900:	46bd      	mov	sp, r7
 8004902:	bd90      	pop	{r4, r7, pc}

08004904 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8004904:	b580      	push	{r7, lr}
 8004906:	b084      	sub	sp, #16
 8004908:	af00      	add	r7, sp, #0
 800490a:	60f8      	str	r0, [r7, #12]
 800490c:	60b9      	str	r1, [r7, #8]
 800490e:	4613      	mov	r3, r2
 8004910:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	2b00      	cmp	r3, #0
 8004916:	d101      	bne.n	800491c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8004918:	2302      	movs	r3, #2
 800491a:	e01a      	b.n	8004952 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004922:	2b00      	cmp	r3, #0
 8004924:	d003      	beq.n	800492e <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	2200      	movs	r2, #0
 800492a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800492e:	68bb      	ldr	r3, [r7, #8]
 8004930:	2b00      	cmp	r3, #0
 8004932:	d003      	beq.n	800493c <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	68ba      	ldr	r2, [r7, #8]
 8004938:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	2201      	movs	r2, #1
 8004940:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	79fa      	ldrb	r2, [r7, #7]
 8004948:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800494a:	68f8      	ldr	r0, [r7, #12]
 800494c:	f001 fad2 	bl	8005ef4 <USBD_LL_Init>

  return USBD_OK;
 8004950:	2300      	movs	r3, #0
}
 8004952:	4618      	mov	r0, r3
 8004954:	3710      	adds	r7, #16
 8004956:	46bd      	mov	sp, r7
 8004958:	bd80      	pop	{r7, pc}

0800495a <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800495a:	b480      	push	{r7}
 800495c:	b085      	sub	sp, #20
 800495e:	af00      	add	r7, sp, #0
 8004960:	6078      	str	r0, [r7, #4]
 8004962:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8004964:	2300      	movs	r3, #0
 8004966:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8004968:	683b      	ldr	r3, [r7, #0]
 800496a:	2b00      	cmp	r3, #0
 800496c:	d006      	beq.n	800497c <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	683a      	ldr	r2, [r7, #0]
 8004972:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 8004976:	2300      	movs	r3, #0
 8004978:	73fb      	strb	r3, [r7, #15]
 800497a:	e001      	b.n	8004980 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800497c:	2302      	movs	r3, #2
 800497e:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8004980:	7bfb      	ldrb	r3, [r7, #15]
}
 8004982:	4618      	mov	r0, r3
 8004984:	3714      	adds	r7, #20
 8004986:	46bd      	mov	sp, r7
 8004988:	bc80      	pop	{r7}
 800498a:	4770      	bx	lr

0800498c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 800498c:	b580      	push	{r7, lr}
 800498e:	b082      	sub	sp, #8
 8004990:	af00      	add	r7, sp, #0
 8004992:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8004994:	6878      	ldr	r0, [r7, #4]
 8004996:	f001 fafd 	bl	8005f94 <USBD_LL_Start>

  return USBD_OK;
 800499a:	2300      	movs	r3, #0
}
 800499c:	4618      	mov	r0, r3
 800499e:	3708      	adds	r7, #8
 80049a0:	46bd      	mov	sp, r7
 80049a2:	bd80      	pop	{r7, pc}

080049a4 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 80049a4:	b480      	push	{r7}
 80049a6:	b083      	sub	sp, #12
 80049a8:	af00      	add	r7, sp, #0
 80049aa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80049ac:	2300      	movs	r3, #0
}
 80049ae:	4618      	mov	r0, r3
 80049b0:	370c      	adds	r7, #12
 80049b2:	46bd      	mov	sp, r7
 80049b4:	bc80      	pop	{r7}
 80049b6:	4770      	bx	lr

080049b8 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80049b8:	b580      	push	{r7, lr}
 80049ba:	b084      	sub	sp, #16
 80049bc:	af00      	add	r7, sp, #0
 80049be:	6078      	str	r0, [r7, #4]
 80049c0:	460b      	mov	r3, r1
 80049c2:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80049c4:	2302      	movs	r3, #2
 80049c6:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d00c      	beq.n	80049ec <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	78fa      	ldrb	r2, [r7, #3]
 80049dc:	4611      	mov	r1, r2
 80049de:	6878      	ldr	r0, [r7, #4]
 80049e0:	4798      	blx	r3
 80049e2:	4603      	mov	r3, r0
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d101      	bne.n	80049ec <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 80049e8:	2300      	movs	r3, #0
 80049ea:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 80049ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80049ee:	4618      	mov	r0, r3
 80049f0:	3710      	adds	r7, #16
 80049f2:	46bd      	mov	sp, r7
 80049f4:	bd80      	pop	{r7, pc}

080049f6 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80049f6:	b580      	push	{r7, lr}
 80049f8:	b082      	sub	sp, #8
 80049fa:	af00      	add	r7, sp, #0
 80049fc:	6078      	str	r0, [r7, #4]
 80049fe:	460b      	mov	r3, r1
 8004a00:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004a08:	685b      	ldr	r3, [r3, #4]
 8004a0a:	78fa      	ldrb	r2, [r7, #3]
 8004a0c:	4611      	mov	r1, r2
 8004a0e:	6878      	ldr	r0, [r7, #4]
 8004a10:	4798      	blx	r3

  return USBD_OK;
 8004a12:	2300      	movs	r3, #0
}
 8004a14:	4618      	mov	r0, r3
 8004a16:	3708      	adds	r7, #8
 8004a18:	46bd      	mov	sp, r7
 8004a1a:	bd80      	pop	{r7, pc}

08004a1c <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8004a1c:	b580      	push	{r7, lr}
 8004a1e:	b082      	sub	sp, #8
 8004a20:	af00      	add	r7, sp, #0
 8004a22:	6078      	str	r0, [r7, #4]
 8004a24:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8004a2c:	6839      	ldr	r1, [r7, #0]
 8004a2e:	4618      	mov	r0, r3
 8004a30:	f000 feca 	bl	80057c8 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	2201      	movs	r2, #1
 8004a38:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8004a42:	461a      	mov	r2, r3
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8004a50:	f003 031f 	and.w	r3, r3, #31
 8004a54:	2b01      	cmp	r3, #1
 8004a56:	d00c      	beq.n	8004a72 <USBD_LL_SetupStage+0x56>
 8004a58:	2b01      	cmp	r3, #1
 8004a5a:	d302      	bcc.n	8004a62 <USBD_LL_SetupStage+0x46>
 8004a5c:	2b02      	cmp	r3, #2
 8004a5e:	d010      	beq.n	8004a82 <USBD_LL_SetupStage+0x66>
 8004a60:	e017      	b.n	8004a92 <USBD_LL_SetupStage+0x76>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8004a68:	4619      	mov	r1, r3
 8004a6a:	6878      	ldr	r0, [r7, #4]
 8004a6c:	f000 f9ca 	bl	8004e04 <USBD_StdDevReq>
      break;
 8004a70:	e01a      	b.n	8004aa8 <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8004a78:	4619      	mov	r1, r3
 8004a7a:	6878      	ldr	r0, [r7, #4]
 8004a7c:	f000 fa2c 	bl	8004ed8 <USBD_StdItfReq>
      break;
 8004a80:	e012      	b.n	8004aa8 <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8004a88:	4619      	mov	r1, r3
 8004a8a:	6878      	ldr	r0, [r7, #4]
 8004a8c:	f000 fa6a 	bl	8004f64 <USBD_StdEPReq>
      break;
 8004a90:	e00a      	b.n	8004aa8 <USBD_LL_SetupStage+0x8c>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8004a98:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8004a9c:	b2db      	uxtb	r3, r3
 8004a9e:	4619      	mov	r1, r3
 8004aa0:	6878      	ldr	r0, [r7, #4]
 8004aa2:	f001 faf6 	bl	8006092 <USBD_LL_StallEP>
      break;
 8004aa6:	bf00      	nop
  }

  return USBD_OK;
 8004aa8:	2300      	movs	r3, #0
}
 8004aaa:	4618      	mov	r0, r3
 8004aac:	3708      	adds	r7, #8
 8004aae:	46bd      	mov	sp, r7
 8004ab0:	bd80      	pop	{r7, pc}

08004ab2 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8004ab2:	b580      	push	{r7, lr}
 8004ab4:	b086      	sub	sp, #24
 8004ab6:	af00      	add	r7, sp, #0
 8004ab8:	60f8      	str	r0, [r7, #12]
 8004aba:	460b      	mov	r3, r1
 8004abc:	607a      	str	r2, [r7, #4]
 8004abe:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8004ac0:	7afb      	ldrb	r3, [r7, #11]
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d14b      	bne.n	8004b5e <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8004acc:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8004ad4:	2b03      	cmp	r3, #3
 8004ad6:	d134      	bne.n	8004b42 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8004ad8:	697b      	ldr	r3, [r7, #20]
 8004ada:	68da      	ldr	r2, [r3, #12]
 8004adc:	697b      	ldr	r3, [r7, #20]
 8004ade:	691b      	ldr	r3, [r3, #16]
 8004ae0:	429a      	cmp	r2, r3
 8004ae2:	d919      	bls.n	8004b18 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8004ae4:	697b      	ldr	r3, [r7, #20]
 8004ae6:	68da      	ldr	r2, [r3, #12]
 8004ae8:	697b      	ldr	r3, [r7, #20]
 8004aea:	691b      	ldr	r3, [r3, #16]
 8004aec:	1ad2      	subs	r2, r2, r3
 8004aee:	697b      	ldr	r3, [r7, #20]
 8004af0:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8004af2:	697b      	ldr	r3, [r7, #20]
 8004af4:	68da      	ldr	r2, [r3, #12]
 8004af6:	697b      	ldr	r3, [r7, #20]
 8004af8:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8004afa:	429a      	cmp	r2, r3
 8004afc:	d203      	bcs.n	8004b06 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8004afe:	697b      	ldr	r3, [r7, #20]
 8004b00:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8004b02:	b29b      	uxth	r3, r3
 8004b04:	e002      	b.n	8004b0c <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8004b06:	697b      	ldr	r3, [r7, #20]
 8004b08:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8004b0a:	b29b      	uxth	r3, r3
 8004b0c:	461a      	mov	r2, r3
 8004b0e:	6879      	ldr	r1, [r7, #4]
 8004b10:	68f8      	ldr	r0, [r7, #12]
 8004b12:	f000 ff2d 	bl	8005970 <USBD_CtlContinueRx>
 8004b16:	e038      	b.n	8004b8a <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004b1e:	691b      	ldr	r3, [r3, #16]
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d00a      	beq.n	8004b3a <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8004b2a:	2b03      	cmp	r3, #3
 8004b2c:	d105      	bne.n	8004b3a <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004b34:	691b      	ldr	r3, [r3, #16]
 8004b36:	68f8      	ldr	r0, [r7, #12]
 8004b38:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8004b3a:	68f8      	ldr	r0, [r7, #12]
 8004b3c:	f000 ff2a 	bl	8005994 <USBD_CtlSendStatus>
 8004b40:	e023      	b.n	8004b8a <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8004b48:	2b05      	cmp	r3, #5
 8004b4a:	d11e      	bne.n	8004b8a <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	2200      	movs	r2, #0
 8004b50:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8004b54:	2100      	movs	r1, #0
 8004b56:	68f8      	ldr	r0, [r7, #12]
 8004b58:	f001 fa9b 	bl	8006092 <USBD_LL_StallEP>
 8004b5c:	e015      	b.n	8004b8a <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004b64:	699b      	ldr	r3, [r3, #24]
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d00d      	beq.n	8004b86 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8004b70:	2b03      	cmp	r3, #3
 8004b72:	d108      	bne.n	8004b86 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004b7a:	699b      	ldr	r3, [r3, #24]
 8004b7c:	7afa      	ldrb	r2, [r7, #11]
 8004b7e:	4611      	mov	r1, r2
 8004b80:	68f8      	ldr	r0, [r7, #12]
 8004b82:	4798      	blx	r3
 8004b84:	e001      	b.n	8004b8a <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8004b86:	2302      	movs	r3, #2
 8004b88:	e000      	b.n	8004b8c <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8004b8a:	2300      	movs	r3, #0
}
 8004b8c:	4618      	mov	r0, r3
 8004b8e:	3718      	adds	r7, #24
 8004b90:	46bd      	mov	sp, r7
 8004b92:	bd80      	pop	{r7, pc}

08004b94 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8004b94:	b580      	push	{r7, lr}
 8004b96:	b086      	sub	sp, #24
 8004b98:	af00      	add	r7, sp, #0
 8004b9a:	60f8      	str	r0, [r7, #12]
 8004b9c:	460b      	mov	r3, r1
 8004b9e:	607a      	str	r2, [r7, #4]
 8004ba0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8004ba2:	7afb      	ldrb	r3, [r7, #11]
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d17f      	bne.n	8004ca8 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	3314      	adds	r3, #20
 8004bac:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8004bb4:	2b02      	cmp	r3, #2
 8004bb6:	d15c      	bne.n	8004c72 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8004bb8:	697b      	ldr	r3, [r7, #20]
 8004bba:	68da      	ldr	r2, [r3, #12]
 8004bbc:	697b      	ldr	r3, [r7, #20]
 8004bbe:	691b      	ldr	r3, [r3, #16]
 8004bc0:	429a      	cmp	r2, r3
 8004bc2:	d915      	bls.n	8004bf0 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8004bc4:	697b      	ldr	r3, [r7, #20]
 8004bc6:	68da      	ldr	r2, [r3, #12]
 8004bc8:	697b      	ldr	r3, [r7, #20]
 8004bca:	691b      	ldr	r3, [r3, #16]
 8004bcc:	1ad2      	subs	r2, r2, r3
 8004bce:	697b      	ldr	r3, [r7, #20]
 8004bd0:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8004bd2:	697b      	ldr	r3, [r7, #20]
 8004bd4:	68db      	ldr	r3, [r3, #12]
 8004bd6:	b29b      	uxth	r3, r3
 8004bd8:	461a      	mov	r2, r3
 8004bda:	6879      	ldr	r1, [r7, #4]
 8004bdc:	68f8      	ldr	r0, [r7, #12]
 8004bde:	f000 feb5 	bl	800594c <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8004be2:	2300      	movs	r3, #0
 8004be4:	2200      	movs	r2, #0
 8004be6:	2100      	movs	r1, #0
 8004be8:	68f8      	ldr	r0, [r7, #12]
 8004bea:	f001 faf7 	bl	80061dc <USBD_LL_PrepareReceive>
 8004bee:	e04e      	b.n	8004c8e <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8004bf0:	697b      	ldr	r3, [r7, #20]
 8004bf2:	689b      	ldr	r3, [r3, #8]
 8004bf4:	697a      	ldr	r2, [r7, #20]
 8004bf6:	6912      	ldr	r2, [r2, #16]
 8004bf8:	fbb3 f1f2 	udiv	r1, r3, r2
 8004bfc:	fb02 f201 	mul.w	r2, r2, r1
 8004c00:	1a9b      	subs	r3, r3, r2
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d11c      	bne.n	8004c40 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8004c06:	697b      	ldr	r3, [r7, #20]
 8004c08:	689a      	ldr	r2, [r3, #8]
 8004c0a:	697b      	ldr	r3, [r7, #20]
 8004c0c:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8004c0e:	429a      	cmp	r2, r3
 8004c10:	d316      	bcc.n	8004c40 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8004c12:	697b      	ldr	r3, [r7, #20]
 8004c14:	689a      	ldr	r2, [r3, #8]
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8004c1c:	429a      	cmp	r2, r3
 8004c1e:	d20f      	bcs.n	8004c40 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8004c20:	2200      	movs	r2, #0
 8004c22:	2100      	movs	r1, #0
 8004c24:	68f8      	ldr	r0, [r7, #12]
 8004c26:	f000 fe91 	bl	800594c <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	2200      	movs	r2, #0
 8004c2e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8004c32:	2300      	movs	r3, #0
 8004c34:	2200      	movs	r2, #0
 8004c36:	2100      	movs	r1, #0
 8004c38:	68f8      	ldr	r0, [r7, #12]
 8004c3a:	f001 facf 	bl	80061dc <USBD_LL_PrepareReceive>
 8004c3e:	e026      	b.n	8004c8e <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004c46:	68db      	ldr	r3, [r3, #12]
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d00a      	beq.n	8004c62 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8004c52:	2b03      	cmp	r3, #3
 8004c54:	d105      	bne.n	8004c62 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004c5c:	68db      	ldr	r3, [r3, #12]
 8004c5e:	68f8      	ldr	r0, [r7, #12]
 8004c60:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8004c62:	2180      	movs	r1, #128	; 0x80
 8004c64:	68f8      	ldr	r0, [r7, #12]
 8004c66:	f001 fa14 	bl	8006092 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8004c6a:	68f8      	ldr	r0, [r7, #12]
 8004c6c:	f000 fea5 	bl	80059ba <USBD_CtlReceiveStatus>
 8004c70:	e00d      	b.n	8004c8e <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8004c78:	2b04      	cmp	r3, #4
 8004c7a:	d004      	beq.n	8004c86 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d103      	bne.n	8004c8e <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8004c86:	2180      	movs	r1, #128	; 0x80
 8004c88:	68f8      	ldr	r0, [r7, #12]
 8004c8a:	f001 fa02 	bl	8006092 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8004c94:	2b01      	cmp	r3, #1
 8004c96:	d11d      	bne.n	8004cd4 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8004c98:	68f8      	ldr	r0, [r7, #12]
 8004c9a:	f7ff fe83 	bl	80049a4 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	2200      	movs	r2, #0
 8004ca2:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8004ca6:	e015      	b.n	8004cd4 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004cae:	695b      	ldr	r3, [r3, #20]
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d00d      	beq.n	8004cd0 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8004cba:	2b03      	cmp	r3, #3
 8004cbc:	d108      	bne.n	8004cd0 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004cc4:	695b      	ldr	r3, [r3, #20]
 8004cc6:	7afa      	ldrb	r2, [r7, #11]
 8004cc8:	4611      	mov	r1, r2
 8004cca:	68f8      	ldr	r0, [r7, #12]
 8004ccc:	4798      	blx	r3
 8004cce:	e001      	b.n	8004cd4 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8004cd0:	2302      	movs	r3, #2
 8004cd2:	e000      	b.n	8004cd6 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8004cd4:	2300      	movs	r3, #0
}
 8004cd6:	4618      	mov	r0, r3
 8004cd8:	3718      	adds	r7, #24
 8004cda:	46bd      	mov	sp, r7
 8004cdc:	bd80      	pop	{r7, pc}

08004cde <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8004cde:	b580      	push	{r7, lr}
 8004ce0:	b082      	sub	sp, #8
 8004ce2:	af00      	add	r7, sp, #0
 8004ce4:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8004ce6:	2340      	movs	r3, #64	; 0x40
 8004ce8:	2200      	movs	r2, #0
 8004cea:	2100      	movs	r1, #0
 8004cec:	6878      	ldr	r0, [r7, #4]
 8004cee:	f001 f96c 	bl	8005fca <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	2201      	movs	r2, #1
 8004cf6:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	2240      	movs	r2, #64	; 0x40
 8004cfe:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8004d02:	2340      	movs	r3, #64	; 0x40
 8004d04:	2200      	movs	r2, #0
 8004d06:	2180      	movs	r1, #128	; 0x80
 8004d08:	6878      	ldr	r0, [r7, #4]
 8004d0a:	f001 f95e 	bl	8005fca <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	2201      	movs	r2, #1
 8004d12:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	2240      	movs	r2, #64	; 0x40
 8004d18:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	2201      	movs	r2, #1
 8004d1e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	2200      	movs	r2, #0
 8004d26:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	2200      	movs	r2, #0
 8004d2e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	2200      	movs	r2, #0
 8004d34:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d009      	beq.n	8004d56 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004d48:	685b      	ldr	r3, [r3, #4]
 8004d4a:	687a      	ldr	r2, [r7, #4]
 8004d4c:	6852      	ldr	r2, [r2, #4]
 8004d4e:	b2d2      	uxtb	r2, r2
 8004d50:	4611      	mov	r1, r2
 8004d52:	6878      	ldr	r0, [r7, #4]
 8004d54:	4798      	blx	r3
  }

  return USBD_OK;
 8004d56:	2300      	movs	r3, #0
}
 8004d58:	4618      	mov	r0, r3
 8004d5a:	3708      	adds	r7, #8
 8004d5c:	46bd      	mov	sp, r7
 8004d5e:	bd80      	pop	{r7, pc}

08004d60 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8004d60:	b480      	push	{r7}
 8004d62:	b083      	sub	sp, #12
 8004d64:	af00      	add	r7, sp, #0
 8004d66:	6078      	str	r0, [r7, #4]
 8004d68:	460b      	mov	r3, r1
 8004d6a:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	78fa      	ldrb	r2, [r7, #3]
 8004d70:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8004d72:	2300      	movs	r3, #0
}
 8004d74:	4618      	mov	r0, r3
 8004d76:	370c      	adds	r7, #12
 8004d78:	46bd      	mov	sp, r7
 8004d7a:	bc80      	pop	{r7}
 8004d7c:	4770      	bx	lr

08004d7e <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8004d7e:	b480      	push	{r7}
 8004d80:	b083      	sub	sp, #12
 8004d82:	af00      	add	r7, sp, #0
 8004d84:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	2204      	movs	r2, #4
 8004d96:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8004d9a:	2300      	movs	r3, #0
}
 8004d9c:	4618      	mov	r0, r3
 8004d9e:	370c      	adds	r7, #12
 8004da0:	46bd      	mov	sp, r7
 8004da2:	bc80      	pop	{r7}
 8004da4:	4770      	bx	lr

08004da6 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8004da6:	b480      	push	{r7}
 8004da8:	b083      	sub	sp, #12
 8004daa:	af00      	add	r7, sp, #0
 8004dac:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004db4:	2b04      	cmp	r3, #4
 8004db6:	d105      	bne.n	8004dc4 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8004dc4:	2300      	movs	r3, #0
}
 8004dc6:	4618      	mov	r0, r3
 8004dc8:	370c      	adds	r7, #12
 8004dca:	46bd      	mov	sp, r7
 8004dcc:	bc80      	pop	{r7}
 8004dce:	4770      	bx	lr

08004dd0 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8004dd0:	b580      	push	{r7, lr}
 8004dd2:	b082      	sub	sp, #8
 8004dd4:	af00      	add	r7, sp, #0
 8004dd6:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004dde:	2b03      	cmp	r3, #3
 8004de0:	d10b      	bne.n	8004dfa <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004de8:	69db      	ldr	r3, [r3, #28]
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d005      	beq.n	8004dfa <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004df4:	69db      	ldr	r3, [r3, #28]
 8004df6:	6878      	ldr	r0, [r7, #4]
 8004df8:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8004dfa:	2300      	movs	r3, #0
}
 8004dfc:	4618      	mov	r0, r3
 8004dfe:	3708      	adds	r7, #8
 8004e00:	46bd      	mov	sp, r7
 8004e02:	bd80      	pop	{r7, pc}

08004e04 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8004e04:	b580      	push	{r7, lr}
 8004e06:	b084      	sub	sp, #16
 8004e08:	af00      	add	r7, sp, #0
 8004e0a:	6078      	str	r0, [r7, #4]
 8004e0c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8004e0e:	2300      	movs	r3, #0
 8004e10:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004e12:	683b      	ldr	r3, [r7, #0]
 8004e14:	781b      	ldrb	r3, [r3, #0]
 8004e16:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8004e1a:	2b20      	cmp	r3, #32
 8004e1c:	d004      	beq.n	8004e28 <USBD_StdDevReq+0x24>
 8004e1e:	2b40      	cmp	r3, #64	; 0x40
 8004e20:	d002      	beq.n	8004e28 <USBD_StdDevReq+0x24>
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d008      	beq.n	8004e38 <USBD_StdDevReq+0x34>
 8004e26:	e04c      	b.n	8004ec2 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004e2e:	689b      	ldr	r3, [r3, #8]
 8004e30:	6839      	ldr	r1, [r7, #0]
 8004e32:	6878      	ldr	r0, [r7, #4]
 8004e34:	4798      	blx	r3
      break;
 8004e36:	e049      	b.n	8004ecc <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8004e38:	683b      	ldr	r3, [r7, #0]
 8004e3a:	785b      	ldrb	r3, [r3, #1]
 8004e3c:	2b09      	cmp	r3, #9
 8004e3e:	d83a      	bhi.n	8004eb6 <USBD_StdDevReq+0xb2>
 8004e40:	a201      	add	r2, pc, #4	; (adr r2, 8004e48 <USBD_StdDevReq+0x44>)
 8004e42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e46:	bf00      	nop
 8004e48:	08004e99 	.word	0x08004e99
 8004e4c:	08004ead 	.word	0x08004ead
 8004e50:	08004eb7 	.word	0x08004eb7
 8004e54:	08004ea3 	.word	0x08004ea3
 8004e58:	08004eb7 	.word	0x08004eb7
 8004e5c:	08004e7b 	.word	0x08004e7b
 8004e60:	08004e71 	.word	0x08004e71
 8004e64:	08004eb7 	.word	0x08004eb7
 8004e68:	08004e8f 	.word	0x08004e8f
 8004e6c:	08004e85 	.word	0x08004e85
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8004e70:	6839      	ldr	r1, [r7, #0]
 8004e72:	6878      	ldr	r0, [r7, #4]
 8004e74:	f000 f9d4 	bl	8005220 <USBD_GetDescriptor>
          break;
 8004e78:	e022      	b.n	8004ec0 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8004e7a:	6839      	ldr	r1, [r7, #0]
 8004e7c:	6878      	ldr	r0, [r7, #4]
 8004e7e:	f000 fb37 	bl	80054f0 <USBD_SetAddress>
          break;
 8004e82:	e01d      	b.n	8004ec0 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8004e84:	6839      	ldr	r1, [r7, #0]
 8004e86:	6878      	ldr	r0, [r7, #4]
 8004e88:	f000 fb74 	bl	8005574 <USBD_SetConfig>
          break;
 8004e8c:	e018      	b.n	8004ec0 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8004e8e:	6839      	ldr	r1, [r7, #0]
 8004e90:	6878      	ldr	r0, [r7, #4]
 8004e92:	f000 fbfd 	bl	8005690 <USBD_GetConfig>
          break;
 8004e96:	e013      	b.n	8004ec0 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8004e98:	6839      	ldr	r1, [r7, #0]
 8004e9a:	6878      	ldr	r0, [r7, #4]
 8004e9c:	f000 fc2c 	bl	80056f8 <USBD_GetStatus>
          break;
 8004ea0:	e00e      	b.n	8004ec0 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8004ea2:	6839      	ldr	r1, [r7, #0]
 8004ea4:	6878      	ldr	r0, [r7, #4]
 8004ea6:	f000 fc5a 	bl	800575e <USBD_SetFeature>
          break;
 8004eaa:	e009      	b.n	8004ec0 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8004eac:	6839      	ldr	r1, [r7, #0]
 8004eae:	6878      	ldr	r0, [r7, #4]
 8004eb0:	f000 fc69 	bl	8005786 <USBD_ClrFeature>
          break;
 8004eb4:	e004      	b.n	8004ec0 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8004eb6:	6839      	ldr	r1, [r7, #0]
 8004eb8:	6878      	ldr	r0, [r7, #4]
 8004eba:	f000 fcc1 	bl	8005840 <USBD_CtlError>
          break;
 8004ebe:	bf00      	nop
      }
      break;
 8004ec0:	e004      	b.n	8004ecc <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8004ec2:	6839      	ldr	r1, [r7, #0]
 8004ec4:	6878      	ldr	r0, [r7, #4]
 8004ec6:	f000 fcbb 	bl	8005840 <USBD_CtlError>
      break;
 8004eca:	bf00      	nop
  }

  return ret;
 8004ecc:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ece:	4618      	mov	r0, r3
 8004ed0:	3710      	adds	r7, #16
 8004ed2:	46bd      	mov	sp, r7
 8004ed4:	bd80      	pop	{r7, pc}
 8004ed6:	bf00      	nop

08004ed8 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8004ed8:	b580      	push	{r7, lr}
 8004eda:	b084      	sub	sp, #16
 8004edc:	af00      	add	r7, sp, #0
 8004ede:	6078      	str	r0, [r7, #4]
 8004ee0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8004ee2:	2300      	movs	r3, #0
 8004ee4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004ee6:	683b      	ldr	r3, [r7, #0]
 8004ee8:	781b      	ldrb	r3, [r3, #0]
 8004eea:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8004eee:	2b20      	cmp	r3, #32
 8004ef0:	d003      	beq.n	8004efa <USBD_StdItfReq+0x22>
 8004ef2:	2b40      	cmp	r3, #64	; 0x40
 8004ef4:	d001      	beq.n	8004efa <USBD_StdItfReq+0x22>
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d12a      	bne.n	8004f50 <USBD_StdItfReq+0x78>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004f00:	3b01      	subs	r3, #1
 8004f02:	2b02      	cmp	r3, #2
 8004f04:	d81d      	bhi.n	8004f42 <USBD_StdItfReq+0x6a>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8004f06:	683b      	ldr	r3, [r7, #0]
 8004f08:	889b      	ldrh	r3, [r3, #4]
 8004f0a:	b2db      	uxtb	r3, r3
 8004f0c:	2b01      	cmp	r3, #1
 8004f0e:	d813      	bhi.n	8004f38 <USBD_StdItfReq+0x60>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004f16:	689b      	ldr	r3, [r3, #8]
 8004f18:	6839      	ldr	r1, [r7, #0]
 8004f1a:	6878      	ldr	r0, [r7, #4]
 8004f1c:	4798      	blx	r3
 8004f1e:	4603      	mov	r3, r0
 8004f20:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8004f22:	683b      	ldr	r3, [r7, #0]
 8004f24:	88db      	ldrh	r3, [r3, #6]
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d110      	bne.n	8004f4c <USBD_StdItfReq+0x74>
 8004f2a:	7bfb      	ldrb	r3, [r7, #15]
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d10d      	bne.n	8004f4c <USBD_StdItfReq+0x74>
            {
              USBD_CtlSendStatus(pdev);
 8004f30:	6878      	ldr	r0, [r7, #4]
 8004f32:	f000 fd2f 	bl	8005994 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8004f36:	e009      	b.n	8004f4c <USBD_StdItfReq+0x74>
            USBD_CtlError(pdev, req);
 8004f38:	6839      	ldr	r1, [r7, #0]
 8004f3a:	6878      	ldr	r0, [r7, #4]
 8004f3c:	f000 fc80 	bl	8005840 <USBD_CtlError>
          break;
 8004f40:	e004      	b.n	8004f4c <USBD_StdItfReq+0x74>

        default:
          USBD_CtlError(pdev, req);
 8004f42:	6839      	ldr	r1, [r7, #0]
 8004f44:	6878      	ldr	r0, [r7, #4]
 8004f46:	f000 fc7b 	bl	8005840 <USBD_CtlError>
          break;
 8004f4a:	e000      	b.n	8004f4e <USBD_StdItfReq+0x76>
          break;
 8004f4c:	bf00      	nop
      }
      break;
 8004f4e:	e004      	b.n	8004f5a <USBD_StdItfReq+0x82>

    default:
      USBD_CtlError(pdev, req);
 8004f50:	6839      	ldr	r1, [r7, #0]
 8004f52:	6878      	ldr	r0, [r7, #4]
 8004f54:	f000 fc74 	bl	8005840 <USBD_CtlError>
      break;
 8004f58:	bf00      	nop
  }

  return USBD_OK;
 8004f5a:	2300      	movs	r3, #0
}
 8004f5c:	4618      	mov	r0, r3
 8004f5e:	3710      	adds	r7, #16
 8004f60:	46bd      	mov	sp, r7
 8004f62:	bd80      	pop	{r7, pc}

08004f64 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8004f64:	b580      	push	{r7, lr}
 8004f66:	b084      	sub	sp, #16
 8004f68:	af00      	add	r7, sp, #0
 8004f6a:	6078      	str	r0, [r7, #4]
 8004f6c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8004f6e:	2300      	movs	r3, #0
 8004f70:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8004f72:	683b      	ldr	r3, [r7, #0]
 8004f74:	889b      	ldrh	r3, [r3, #4]
 8004f76:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004f78:	683b      	ldr	r3, [r7, #0]
 8004f7a:	781b      	ldrb	r3, [r3, #0]
 8004f7c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8004f80:	2b20      	cmp	r3, #32
 8004f82:	d004      	beq.n	8004f8e <USBD_StdEPReq+0x2a>
 8004f84:	2b40      	cmp	r3, #64	; 0x40
 8004f86:	d002      	beq.n	8004f8e <USBD_StdEPReq+0x2a>
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d008      	beq.n	8004f9e <USBD_StdEPReq+0x3a>
 8004f8c:	e13d      	b.n	800520a <USBD_StdEPReq+0x2a6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004f94:	689b      	ldr	r3, [r3, #8]
 8004f96:	6839      	ldr	r1, [r7, #0]
 8004f98:	6878      	ldr	r0, [r7, #4]
 8004f9a:	4798      	blx	r3
      break;
 8004f9c:	e13a      	b.n	8005214 <USBD_StdEPReq+0x2b0>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8004f9e:	683b      	ldr	r3, [r7, #0]
 8004fa0:	781b      	ldrb	r3, [r3, #0]
 8004fa2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8004fa6:	2b20      	cmp	r3, #32
 8004fa8:	d10a      	bne.n	8004fc0 <USBD_StdEPReq+0x5c>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004fb0:	689b      	ldr	r3, [r3, #8]
 8004fb2:	6839      	ldr	r1, [r7, #0]
 8004fb4:	6878      	ldr	r0, [r7, #4]
 8004fb6:	4798      	blx	r3
 8004fb8:	4603      	mov	r3, r0
 8004fba:	73fb      	strb	r3, [r7, #15]

        return ret;
 8004fbc:	7bfb      	ldrb	r3, [r7, #15]
 8004fbe:	e12a      	b.n	8005216 <USBD_StdEPReq+0x2b2>
      }

      switch (req->bRequest)
 8004fc0:	683b      	ldr	r3, [r7, #0]
 8004fc2:	785b      	ldrb	r3, [r3, #1]
 8004fc4:	2b01      	cmp	r3, #1
 8004fc6:	d03e      	beq.n	8005046 <USBD_StdEPReq+0xe2>
 8004fc8:	2b03      	cmp	r3, #3
 8004fca:	d002      	beq.n	8004fd2 <USBD_StdEPReq+0x6e>
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d070      	beq.n	80050b2 <USBD_StdEPReq+0x14e>
 8004fd0:	e115      	b.n	80051fe <USBD_StdEPReq+0x29a>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004fd8:	2b02      	cmp	r3, #2
 8004fda:	d002      	beq.n	8004fe2 <USBD_StdEPReq+0x7e>
 8004fdc:	2b03      	cmp	r3, #3
 8004fde:	d015      	beq.n	800500c <USBD_StdEPReq+0xa8>
 8004fe0:	e02b      	b.n	800503a <USBD_StdEPReq+0xd6>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8004fe2:	7bbb      	ldrb	r3, [r7, #14]
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d00c      	beq.n	8005002 <USBD_StdEPReq+0x9e>
 8004fe8:	7bbb      	ldrb	r3, [r7, #14]
 8004fea:	2b80      	cmp	r3, #128	; 0x80
 8004fec:	d009      	beq.n	8005002 <USBD_StdEPReq+0x9e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8004fee:	7bbb      	ldrb	r3, [r7, #14]
 8004ff0:	4619      	mov	r1, r3
 8004ff2:	6878      	ldr	r0, [r7, #4]
 8004ff4:	f001 f84d 	bl	8006092 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8004ff8:	2180      	movs	r1, #128	; 0x80
 8004ffa:	6878      	ldr	r0, [r7, #4]
 8004ffc:	f001 f849 	bl	8006092 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8005000:	e020      	b.n	8005044 <USBD_StdEPReq+0xe0>
                USBD_CtlError(pdev, req);
 8005002:	6839      	ldr	r1, [r7, #0]
 8005004:	6878      	ldr	r0, [r7, #4]
 8005006:	f000 fc1b 	bl	8005840 <USBD_CtlError>
              break;
 800500a:	e01b      	b.n	8005044 <USBD_StdEPReq+0xe0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800500c:	683b      	ldr	r3, [r7, #0]
 800500e:	885b      	ldrh	r3, [r3, #2]
 8005010:	2b00      	cmp	r3, #0
 8005012:	d10e      	bne.n	8005032 <USBD_StdEPReq+0xce>
              {
                if ((ep_addr != 0x00U) &&
 8005014:	7bbb      	ldrb	r3, [r7, #14]
 8005016:	2b00      	cmp	r3, #0
 8005018:	d00b      	beq.n	8005032 <USBD_StdEPReq+0xce>
 800501a:	7bbb      	ldrb	r3, [r7, #14]
 800501c:	2b80      	cmp	r3, #128	; 0x80
 800501e:	d008      	beq.n	8005032 <USBD_StdEPReq+0xce>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8005020:	683b      	ldr	r3, [r7, #0]
 8005022:	88db      	ldrh	r3, [r3, #6]
 8005024:	2b00      	cmp	r3, #0
 8005026:	d104      	bne.n	8005032 <USBD_StdEPReq+0xce>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8005028:	7bbb      	ldrb	r3, [r7, #14]
 800502a:	4619      	mov	r1, r3
 800502c:	6878      	ldr	r0, [r7, #4]
 800502e:	f001 f830 	bl	8006092 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8005032:	6878      	ldr	r0, [r7, #4]
 8005034:	f000 fcae 	bl	8005994 <USBD_CtlSendStatus>

              break;
 8005038:	e004      	b.n	8005044 <USBD_StdEPReq+0xe0>

            default:
              USBD_CtlError(pdev, req);
 800503a:	6839      	ldr	r1, [r7, #0]
 800503c:	6878      	ldr	r0, [r7, #4]
 800503e:	f000 fbff 	bl	8005840 <USBD_CtlError>
              break;
 8005042:	bf00      	nop
          }
          break;
 8005044:	e0e0      	b.n	8005208 <USBD_StdEPReq+0x2a4>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800504c:	2b02      	cmp	r3, #2
 800504e:	d002      	beq.n	8005056 <USBD_StdEPReq+0xf2>
 8005050:	2b03      	cmp	r3, #3
 8005052:	d015      	beq.n	8005080 <USBD_StdEPReq+0x11c>
 8005054:	e026      	b.n	80050a4 <USBD_StdEPReq+0x140>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005056:	7bbb      	ldrb	r3, [r7, #14]
 8005058:	2b00      	cmp	r3, #0
 800505a:	d00c      	beq.n	8005076 <USBD_StdEPReq+0x112>
 800505c:	7bbb      	ldrb	r3, [r7, #14]
 800505e:	2b80      	cmp	r3, #128	; 0x80
 8005060:	d009      	beq.n	8005076 <USBD_StdEPReq+0x112>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8005062:	7bbb      	ldrb	r3, [r7, #14]
 8005064:	4619      	mov	r1, r3
 8005066:	6878      	ldr	r0, [r7, #4]
 8005068:	f001 f813 	bl	8006092 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800506c:	2180      	movs	r1, #128	; 0x80
 800506e:	6878      	ldr	r0, [r7, #4]
 8005070:	f001 f80f 	bl	8006092 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8005074:	e01c      	b.n	80050b0 <USBD_StdEPReq+0x14c>
                USBD_CtlError(pdev, req);
 8005076:	6839      	ldr	r1, [r7, #0]
 8005078:	6878      	ldr	r0, [r7, #4]
 800507a:	f000 fbe1 	bl	8005840 <USBD_CtlError>
              break;
 800507e:	e017      	b.n	80050b0 <USBD_StdEPReq+0x14c>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8005080:	683b      	ldr	r3, [r7, #0]
 8005082:	885b      	ldrh	r3, [r3, #2]
 8005084:	2b00      	cmp	r3, #0
 8005086:	d112      	bne.n	80050ae <USBD_StdEPReq+0x14a>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8005088:	7bbb      	ldrb	r3, [r7, #14]
 800508a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800508e:	2b00      	cmp	r3, #0
 8005090:	d004      	beq.n	800509c <USBD_StdEPReq+0x138>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8005092:	7bbb      	ldrb	r3, [r7, #14]
 8005094:	4619      	mov	r1, r3
 8005096:	6878      	ldr	r0, [r7, #4]
 8005098:	f001 f81a 	bl	80060d0 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 800509c:	6878      	ldr	r0, [r7, #4]
 800509e:	f000 fc79 	bl	8005994 <USBD_CtlSendStatus>
              }
              break;
 80050a2:	e004      	b.n	80050ae <USBD_StdEPReq+0x14a>

            default:
              USBD_CtlError(pdev, req);
 80050a4:	6839      	ldr	r1, [r7, #0]
 80050a6:	6878      	ldr	r0, [r7, #4]
 80050a8:	f000 fbca 	bl	8005840 <USBD_CtlError>
              break;
 80050ac:	e000      	b.n	80050b0 <USBD_StdEPReq+0x14c>
              break;
 80050ae:	bf00      	nop
          }
          break;
 80050b0:	e0aa      	b.n	8005208 <USBD_StdEPReq+0x2a4>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80050b8:	2b02      	cmp	r3, #2
 80050ba:	d002      	beq.n	80050c2 <USBD_StdEPReq+0x15e>
 80050bc:	2b03      	cmp	r3, #3
 80050be:	d032      	beq.n	8005126 <USBD_StdEPReq+0x1c2>
 80050c0:	e097      	b.n	80051f2 <USBD_StdEPReq+0x28e>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80050c2:	7bbb      	ldrb	r3, [r7, #14]
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d007      	beq.n	80050d8 <USBD_StdEPReq+0x174>
 80050c8:	7bbb      	ldrb	r3, [r7, #14]
 80050ca:	2b80      	cmp	r3, #128	; 0x80
 80050cc:	d004      	beq.n	80050d8 <USBD_StdEPReq+0x174>
              {
                USBD_CtlError(pdev, req);
 80050ce:	6839      	ldr	r1, [r7, #0]
 80050d0:	6878      	ldr	r0, [r7, #4]
 80050d2:	f000 fbb5 	bl	8005840 <USBD_CtlError>
                break;
 80050d6:	e091      	b.n	80051fc <USBD_StdEPReq+0x298>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80050d8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80050dc:	2b00      	cmp	r3, #0
 80050de:	da0b      	bge.n	80050f8 <USBD_StdEPReq+0x194>
 80050e0:	7bbb      	ldrb	r3, [r7, #14]
 80050e2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80050e6:	4613      	mov	r3, r2
 80050e8:	009b      	lsls	r3, r3, #2
 80050ea:	4413      	add	r3, r2
 80050ec:	009b      	lsls	r3, r3, #2
 80050ee:	3310      	adds	r3, #16
 80050f0:	687a      	ldr	r2, [r7, #4]
 80050f2:	4413      	add	r3, r2
 80050f4:	3304      	adds	r3, #4
 80050f6:	e00b      	b.n	8005110 <USBD_StdEPReq+0x1ac>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80050f8:	7bbb      	ldrb	r3, [r7, #14]
 80050fa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80050fe:	4613      	mov	r3, r2
 8005100:	009b      	lsls	r3, r3, #2
 8005102:	4413      	add	r3, r2
 8005104:	009b      	lsls	r3, r3, #2
 8005106:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800510a:	687a      	ldr	r2, [r7, #4]
 800510c:	4413      	add	r3, r2
 800510e:	3304      	adds	r3, #4
 8005110:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8005112:	68bb      	ldr	r3, [r7, #8]
 8005114:	2200      	movs	r2, #0
 8005116:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8005118:	68bb      	ldr	r3, [r7, #8]
 800511a:	2202      	movs	r2, #2
 800511c:	4619      	mov	r1, r3
 800511e:	6878      	ldr	r0, [r7, #4]
 8005120:	f000 fbf8 	bl	8005914 <USBD_CtlSendData>
              break;
 8005124:	e06a      	b.n	80051fc <USBD_StdEPReq+0x298>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8005126:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800512a:	2b00      	cmp	r3, #0
 800512c:	da11      	bge.n	8005152 <USBD_StdEPReq+0x1ee>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800512e:	7bbb      	ldrb	r3, [r7, #14]
 8005130:	f003 020f 	and.w	r2, r3, #15
 8005134:	6879      	ldr	r1, [r7, #4]
 8005136:	4613      	mov	r3, r2
 8005138:	009b      	lsls	r3, r3, #2
 800513a:	4413      	add	r3, r2
 800513c:	009b      	lsls	r3, r3, #2
 800513e:	440b      	add	r3, r1
 8005140:	3318      	adds	r3, #24
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	2b00      	cmp	r3, #0
 8005146:	d117      	bne.n	8005178 <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 8005148:	6839      	ldr	r1, [r7, #0]
 800514a:	6878      	ldr	r0, [r7, #4]
 800514c:	f000 fb78 	bl	8005840 <USBD_CtlError>
                  break;
 8005150:	e054      	b.n	80051fc <USBD_StdEPReq+0x298>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8005152:	7bbb      	ldrb	r3, [r7, #14]
 8005154:	f003 020f 	and.w	r2, r3, #15
 8005158:	6879      	ldr	r1, [r7, #4]
 800515a:	4613      	mov	r3, r2
 800515c:	009b      	lsls	r3, r3, #2
 800515e:	4413      	add	r3, r2
 8005160:	009b      	lsls	r3, r3, #2
 8005162:	440b      	add	r3, r1
 8005164:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	2b00      	cmp	r3, #0
 800516c:	d104      	bne.n	8005178 <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 800516e:	6839      	ldr	r1, [r7, #0]
 8005170:	6878      	ldr	r0, [r7, #4]
 8005172:	f000 fb65 	bl	8005840 <USBD_CtlError>
                  break;
 8005176:	e041      	b.n	80051fc <USBD_StdEPReq+0x298>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005178:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800517c:	2b00      	cmp	r3, #0
 800517e:	da0b      	bge.n	8005198 <USBD_StdEPReq+0x234>
 8005180:	7bbb      	ldrb	r3, [r7, #14]
 8005182:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005186:	4613      	mov	r3, r2
 8005188:	009b      	lsls	r3, r3, #2
 800518a:	4413      	add	r3, r2
 800518c:	009b      	lsls	r3, r3, #2
 800518e:	3310      	adds	r3, #16
 8005190:	687a      	ldr	r2, [r7, #4]
 8005192:	4413      	add	r3, r2
 8005194:	3304      	adds	r3, #4
 8005196:	e00b      	b.n	80051b0 <USBD_StdEPReq+0x24c>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8005198:	7bbb      	ldrb	r3, [r7, #14]
 800519a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800519e:	4613      	mov	r3, r2
 80051a0:	009b      	lsls	r3, r3, #2
 80051a2:	4413      	add	r3, r2
 80051a4:	009b      	lsls	r3, r3, #2
 80051a6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80051aa:	687a      	ldr	r2, [r7, #4]
 80051ac:	4413      	add	r3, r2
 80051ae:	3304      	adds	r3, #4
 80051b0:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80051b2:	7bbb      	ldrb	r3, [r7, #14]
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d002      	beq.n	80051be <USBD_StdEPReq+0x25a>
 80051b8:	7bbb      	ldrb	r3, [r7, #14]
 80051ba:	2b80      	cmp	r3, #128	; 0x80
 80051bc:	d103      	bne.n	80051c6 <USBD_StdEPReq+0x262>
              {
                pep->status = 0x0000U;
 80051be:	68bb      	ldr	r3, [r7, #8]
 80051c0:	2200      	movs	r2, #0
 80051c2:	601a      	str	r2, [r3, #0]
 80051c4:	e00e      	b.n	80051e4 <USBD_StdEPReq+0x280>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 80051c6:	7bbb      	ldrb	r3, [r7, #14]
 80051c8:	4619      	mov	r1, r3
 80051ca:	6878      	ldr	r0, [r7, #4]
 80051cc:	f000 ff9f 	bl	800610e <USBD_LL_IsStallEP>
 80051d0:	4603      	mov	r3, r0
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d003      	beq.n	80051de <USBD_StdEPReq+0x27a>
              {
                pep->status = 0x0001U;
 80051d6:	68bb      	ldr	r3, [r7, #8]
 80051d8:	2201      	movs	r2, #1
 80051da:	601a      	str	r2, [r3, #0]
 80051dc:	e002      	b.n	80051e4 <USBD_StdEPReq+0x280>
              }
              else
              {
                pep->status = 0x0000U;
 80051de:	68bb      	ldr	r3, [r7, #8]
 80051e0:	2200      	movs	r2, #0
 80051e2:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80051e4:	68bb      	ldr	r3, [r7, #8]
 80051e6:	2202      	movs	r2, #2
 80051e8:	4619      	mov	r1, r3
 80051ea:	6878      	ldr	r0, [r7, #4]
 80051ec:	f000 fb92 	bl	8005914 <USBD_CtlSendData>
              break;
 80051f0:	e004      	b.n	80051fc <USBD_StdEPReq+0x298>

            default:
              USBD_CtlError(pdev, req);
 80051f2:	6839      	ldr	r1, [r7, #0]
 80051f4:	6878      	ldr	r0, [r7, #4]
 80051f6:	f000 fb23 	bl	8005840 <USBD_CtlError>
              break;
 80051fa:	bf00      	nop
          }
          break;
 80051fc:	e004      	b.n	8005208 <USBD_StdEPReq+0x2a4>

        default:
          USBD_CtlError(pdev, req);
 80051fe:	6839      	ldr	r1, [r7, #0]
 8005200:	6878      	ldr	r0, [r7, #4]
 8005202:	f000 fb1d 	bl	8005840 <USBD_CtlError>
          break;
 8005206:	bf00      	nop
      }
      break;
 8005208:	e004      	b.n	8005214 <USBD_StdEPReq+0x2b0>

    default:
      USBD_CtlError(pdev, req);
 800520a:	6839      	ldr	r1, [r7, #0]
 800520c:	6878      	ldr	r0, [r7, #4]
 800520e:	f000 fb17 	bl	8005840 <USBD_CtlError>
      break;
 8005212:	bf00      	nop
  }

  return ret;
 8005214:	7bfb      	ldrb	r3, [r7, #15]
}
 8005216:	4618      	mov	r0, r3
 8005218:	3710      	adds	r7, #16
 800521a:	46bd      	mov	sp, r7
 800521c:	bd80      	pop	{r7, pc}
	...

08005220 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8005220:	b580      	push	{r7, lr}
 8005222:	b084      	sub	sp, #16
 8005224:	af00      	add	r7, sp, #0
 8005226:	6078      	str	r0, [r7, #4]
 8005228:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800522a:	2300      	movs	r3, #0
 800522c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800522e:	2300      	movs	r3, #0
 8005230:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8005232:	2300      	movs	r3, #0
 8005234:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8005236:	683b      	ldr	r3, [r7, #0]
 8005238:	885b      	ldrh	r3, [r3, #2]
 800523a:	0a1b      	lsrs	r3, r3, #8
 800523c:	b29b      	uxth	r3, r3
 800523e:	3b01      	subs	r3, #1
 8005240:	2b06      	cmp	r3, #6
 8005242:	f200 8128 	bhi.w	8005496 <USBD_GetDescriptor+0x276>
 8005246:	a201      	add	r2, pc, #4	; (adr r2, 800524c <USBD_GetDescriptor+0x2c>)
 8005248:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800524c:	08005269 	.word	0x08005269
 8005250:	08005281 	.word	0x08005281
 8005254:	080052c1 	.word	0x080052c1
 8005258:	08005497 	.word	0x08005497
 800525c:	08005497 	.word	0x08005497
 8005260:	08005437 	.word	0x08005437
 8005264:	08005463 	.word	0x08005463
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	687a      	ldr	r2, [r7, #4]
 8005272:	7c12      	ldrb	r2, [r2, #16]
 8005274:	f107 0108 	add.w	r1, r7, #8
 8005278:	4610      	mov	r0, r2
 800527a:	4798      	blx	r3
 800527c:	60f8      	str	r0, [r7, #12]
      break;
 800527e:	e112      	b.n	80054a6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	7c1b      	ldrb	r3, [r3, #16]
 8005284:	2b00      	cmp	r3, #0
 8005286:	d10d      	bne.n	80052a4 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800528e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005290:	f107 0208 	add.w	r2, r7, #8
 8005294:	4610      	mov	r0, r2
 8005296:	4798      	blx	r3
 8005298:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	3301      	adds	r3, #1
 800529e:	2202      	movs	r2, #2
 80052a0:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80052a2:	e100      	b.n	80054a6 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80052aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052ac:	f107 0208 	add.w	r2, r7, #8
 80052b0:	4610      	mov	r0, r2
 80052b2:	4798      	blx	r3
 80052b4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	3301      	adds	r3, #1
 80052ba:	2202      	movs	r2, #2
 80052bc:	701a      	strb	r2, [r3, #0]
      break;
 80052be:	e0f2      	b.n	80054a6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80052c0:	683b      	ldr	r3, [r7, #0]
 80052c2:	885b      	ldrh	r3, [r3, #2]
 80052c4:	b2db      	uxtb	r3, r3
 80052c6:	2b05      	cmp	r3, #5
 80052c8:	f200 80ac 	bhi.w	8005424 <USBD_GetDescriptor+0x204>
 80052cc:	a201      	add	r2, pc, #4	; (adr r2, 80052d4 <USBD_GetDescriptor+0xb4>)
 80052ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052d2:	bf00      	nop
 80052d4:	080052ed 	.word	0x080052ed
 80052d8:	08005321 	.word	0x08005321
 80052dc:	08005355 	.word	0x08005355
 80052e0:	08005389 	.word	0x08005389
 80052e4:	080053bd 	.word	0x080053bd
 80052e8:	080053f1 	.word	0x080053f1
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80052f2:	685b      	ldr	r3, [r3, #4]
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d00b      	beq.n	8005310 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80052fe:	685b      	ldr	r3, [r3, #4]
 8005300:	687a      	ldr	r2, [r7, #4]
 8005302:	7c12      	ldrb	r2, [r2, #16]
 8005304:	f107 0108 	add.w	r1, r7, #8
 8005308:	4610      	mov	r0, r2
 800530a:	4798      	blx	r3
 800530c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800530e:	e091      	b.n	8005434 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005310:	6839      	ldr	r1, [r7, #0]
 8005312:	6878      	ldr	r0, [r7, #4]
 8005314:	f000 fa94 	bl	8005840 <USBD_CtlError>
            err++;
 8005318:	7afb      	ldrb	r3, [r7, #11]
 800531a:	3301      	adds	r3, #1
 800531c:	72fb      	strb	r3, [r7, #11]
          break;
 800531e:	e089      	b.n	8005434 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005326:	689b      	ldr	r3, [r3, #8]
 8005328:	2b00      	cmp	r3, #0
 800532a:	d00b      	beq.n	8005344 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005332:	689b      	ldr	r3, [r3, #8]
 8005334:	687a      	ldr	r2, [r7, #4]
 8005336:	7c12      	ldrb	r2, [r2, #16]
 8005338:	f107 0108 	add.w	r1, r7, #8
 800533c:	4610      	mov	r0, r2
 800533e:	4798      	blx	r3
 8005340:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005342:	e077      	b.n	8005434 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005344:	6839      	ldr	r1, [r7, #0]
 8005346:	6878      	ldr	r0, [r7, #4]
 8005348:	f000 fa7a 	bl	8005840 <USBD_CtlError>
            err++;
 800534c:	7afb      	ldrb	r3, [r7, #11]
 800534e:	3301      	adds	r3, #1
 8005350:	72fb      	strb	r3, [r7, #11]
          break;
 8005352:	e06f      	b.n	8005434 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800535a:	68db      	ldr	r3, [r3, #12]
 800535c:	2b00      	cmp	r3, #0
 800535e:	d00b      	beq.n	8005378 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005366:	68db      	ldr	r3, [r3, #12]
 8005368:	687a      	ldr	r2, [r7, #4]
 800536a:	7c12      	ldrb	r2, [r2, #16]
 800536c:	f107 0108 	add.w	r1, r7, #8
 8005370:	4610      	mov	r0, r2
 8005372:	4798      	blx	r3
 8005374:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005376:	e05d      	b.n	8005434 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005378:	6839      	ldr	r1, [r7, #0]
 800537a:	6878      	ldr	r0, [r7, #4]
 800537c:	f000 fa60 	bl	8005840 <USBD_CtlError>
            err++;
 8005380:	7afb      	ldrb	r3, [r7, #11]
 8005382:	3301      	adds	r3, #1
 8005384:	72fb      	strb	r3, [r7, #11]
          break;
 8005386:	e055      	b.n	8005434 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800538e:	691b      	ldr	r3, [r3, #16]
 8005390:	2b00      	cmp	r3, #0
 8005392:	d00b      	beq.n	80053ac <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800539a:	691b      	ldr	r3, [r3, #16]
 800539c:	687a      	ldr	r2, [r7, #4]
 800539e:	7c12      	ldrb	r2, [r2, #16]
 80053a0:	f107 0108 	add.w	r1, r7, #8
 80053a4:	4610      	mov	r0, r2
 80053a6:	4798      	blx	r3
 80053a8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80053aa:	e043      	b.n	8005434 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80053ac:	6839      	ldr	r1, [r7, #0]
 80053ae:	6878      	ldr	r0, [r7, #4]
 80053b0:	f000 fa46 	bl	8005840 <USBD_CtlError>
            err++;
 80053b4:	7afb      	ldrb	r3, [r7, #11]
 80053b6:	3301      	adds	r3, #1
 80053b8:	72fb      	strb	r3, [r7, #11]
          break;
 80053ba:	e03b      	b.n	8005434 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80053c2:	695b      	ldr	r3, [r3, #20]
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d00b      	beq.n	80053e0 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80053ce:	695b      	ldr	r3, [r3, #20]
 80053d0:	687a      	ldr	r2, [r7, #4]
 80053d2:	7c12      	ldrb	r2, [r2, #16]
 80053d4:	f107 0108 	add.w	r1, r7, #8
 80053d8:	4610      	mov	r0, r2
 80053da:	4798      	blx	r3
 80053dc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80053de:	e029      	b.n	8005434 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80053e0:	6839      	ldr	r1, [r7, #0]
 80053e2:	6878      	ldr	r0, [r7, #4]
 80053e4:	f000 fa2c 	bl	8005840 <USBD_CtlError>
            err++;
 80053e8:	7afb      	ldrb	r3, [r7, #11]
 80053ea:	3301      	adds	r3, #1
 80053ec:	72fb      	strb	r3, [r7, #11]
          break;
 80053ee:	e021      	b.n	8005434 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80053f6:	699b      	ldr	r3, [r3, #24]
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d00b      	beq.n	8005414 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005402:	699b      	ldr	r3, [r3, #24]
 8005404:	687a      	ldr	r2, [r7, #4]
 8005406:	7c12      	ldrb	r2, [r2, #16]
 8005408:	f107 0108 	add.w	r1, r7, #8
 800540c:	4610      	mov	r0, r2
 800540e:	4798      	blx	r3
 8005410:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005412:	e00f      	b.n	8005434 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005414:	6839      	ldr	r1, [r7, #0]
 8005416:	6878      	ldr	r0, [r7, #4]
 8005418:	f000 fa12 	bl	8005840 <USBD_CtlError>
            err++;
 800541c:	7afb      	ldrb	r3, [r7, #11]
 800541e:	3301      	adds	r3, #1
 8005420:	72fb      	strb	r3, [r7, #11]
          break;
 8005422:	e007      	b.n	8005434 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8005424:	6839      	ldr	r1, [r7, #0]
 8005426:	6878      	ldr	r0, [r7, #4]
 8005428:	f000 fa0a 	bl	8005840 <USBD_CtlError>
          err++;
 800542c:	7afb      	ldrb	r3, [r7, #11]
 800542e:	3301      	adds	r3, #1
 8005430:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8005432:	e038      	b.n	80054a6 <USBD_GetDescriptor+0x286>
 8005434:	e037      	b.n	80054a6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	7c1b      	ldrb	r3, [r3, #16]
 800543a:	2b00      	cmp	r3, #0
 800543c:	d109      	bne.n	8005452 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005444:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005446:	f107 0208 	add.w	r2, r7, #8
 800544a:	4610      	mov	r0, r2
 800544c:	4798      	blx	r3
 800544e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8005450:	e029      	b.n	80054a6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8005452:	6839      	ldr	r1, [r7, #0]
 8005454:	6878      	ldr	r0, [r7, #4]
 8005456:	f000 f9f3 	bl	8005840 <USBD_CtlError>
        err++;
 800545a:	7afb      	ldrb	r3, [r7, #11]
 800545c:	3301      	adds	r3, #1
 800545e:	72fb      	strb	r3, [r7, #11]
      break;
 8005460:	e021      	b.n	80054a6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	7c1b      	ldrb	r3, [r3, #16]
 8005466:	2b00      	cmp	r3, #0
 8005468:	d10d      	bne.n	8005486 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005470:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005472:	f107 0208 	add.w	r2, r7, #8
 8005476:	4610      	mov	r0, r2
 8005478:	4798      	blx	r3
 800547a:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	3301      	adds	r3, #1
 8005480:	2207      	movs	r2, #7
 8005482:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8005484:	e00f      	b.n	80054a6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8005486:	6839      	ldr	r1, [r7, #0]
 8005488:	6878      	ldr	r0, [r7, #4]
 800548a:	f000 f9d9 	bl	8005840 <USBD_CtlError>
        err++;
 800548e:	7afb      	ldrb	r3, [r7, #11]
 8005490:	3301      	adds	r3, #1
 8005492:	72fb      	strb	r3, [r7, #11]
      break;
 8005494:	e007      	b.n	80054a6 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8005496:	6839      	ldr	r1, [r7, #0]
 8005498:	6878      	ldr	r0, [r7, #4]
 800549a:	f000 f9d1 	bl	8005840 <USBD_CtlError>
      err++;
 800549e:	7afb      	ldrb	r3, [r7, #11]
 80054a0:	3301      	adds	r3, #1
 80054a2:	72fb      	strb	r3, [r7, #11]
      break;
 80054a4:	bf00      	nop
  }

  if (err != 0U)
 80054a6:	7afb      	ldrb	r3, [r7, #11]
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d11c      	bne.n	80054e6 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 80054ac:	893b      	ldrh	r3, [r7, #8]
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d011      	beq.n	80054d6 <USBD_GetDescriptor+0x2b6>
 80054b2:	683b      	ldr	r3, [r7, #0]
 80054b4:	88db      	ldrh	r3, [r3, #6]
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d00d      	beq.n	80054d6 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 80054ba:	683b      	ldr	r3, [r7, #0]
 80054bc:	88da      	ldrh	r2, [r3, #6]
 80054be:	893b      	ldrh	r3, [r7, #8]
 80054c0:	4293      	cmp	r3, r2
 80054c2:	bf28      	it	cs
 80054c4:	4613      	movcs	r3, r2
 80054c6:	b29b      	uxth	r3, r3
 80054c8:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80054ca:	893b      	ldrh	r3, [r7, #8]
 80054cc:	461a      	mov	r2, r3
 80054ce:	68f9      	ldr	r1, [r7, #12]
 80054d0:	6878      	ldr	r0, [r7, #4]
 80054d2:	f000 fa1f 	bl	8005914 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 80054d6:	683b      	ldr	r3, [r7, #0]
 80054d8:	88db      	ldrh	r3, [r3, #6]
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d104      	bne.n	80054e8 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 80054de:	6878      	ldr	r0, [r7, #4]
 80054e0:	f000 fa58 	bl	8005994 <USBD_CtlSendStatus>
 80054e4:	e000      	b.n	80054e8 <USBD_GetDescriptor+0x2c8>
    return;
 80054e6:	bf00      	nop
    }
  }
}
 80054e8:	3710      	adds	r7, #16
 80054ea:	46bd      	mov	sp, r7
 80054ec:	bd80      	pop	{r7, pc}
 80054ee:	bf00      	nop

080054f0 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80054f0:	b580      	push	{r7, lr}
 80054f2:	b084      	sub	sp, #16
 80054f4:	af00      	add	r7, sp, #0
 80054f6:	6078      	str	r0, [r7, #4]
 80054f8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80054fa:	683b      	ldr	r3, [r7, #0]
 80054fc:	889b      	ldrh	r3, [r3, #4]
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d130      	bne.n	8005564 <USBD_SetAddress+0x74>
 8005502:	683b      	ldr	r3, [r7, #0]
 8005504:	88db      	ldrh	r3, [r3, #6]
 8005506:	2b00      	cmp	r3, #0
 8005508:	d12c      	bne.n	8005564 <USBD_SetAddress+0x74>
 800550a:	683b      	ldr	r3, [r7, #0]
 800550c:	885b      	ldrh	r3, [r3, #2]
 800550e:	2b7f      	cmp	r3, #127	; 0x7f
 8005510:	d828      	bhi.n	8005564 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8005512:	683b      	ldr	r3, [r7, #0]
 8005514:	885b      	ldrh	r3, [r3, #2]
 8005516:	b2db      	uxtb	r3, r3
 8005518:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800551c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005524:	2b03      	cmp	r3, #3
 8005526:	d104      	bne.n	8005532 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8005528:	6839      	ldr	r1, [r7, #0]
 800552a:	6878      	ldr	r0, [r7, #4]
 800552c:	f000 f988 	bl	8005840 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005530:	e01c      	b.n	800556c <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	7bfa      	ldrb	r2, [r7, #15]
 8005536:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800553a:	7bfb      	ldrb	r3, [r7, #15]
 800553c:	4619      	mov	r1, r3
 800553e:	6878      	ldr	r0, [r7, #4]
 8005540:	f000 fe0a 	bl	8006158 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8005544:	6878      	ldr	r0, [r7, #4]
 8005546:	f000 fa25 	bl	8005994 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800554a:	7bfb      	ldrb	r3, [r7, #15]
 800554c:	2b00      	cmp	r3, #0
 800554e:	d004      	beq.n	800555a <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	2202      	movs	r2, #2
 8005554:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005558:	e008      	b.n	800556c <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	2201      	movs	r2, #1
 800555e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005562:	e003      	b.n	800556c <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8005564:	6839      	ldr	r1, [r7, #0]
 8005566:	6878      	ldr	r0, [r7, #4]
 8005568:	f000 f96a 	bl	8005840 <USBD_CtlError>
  }
}
 800556c:	bf00      	nop
 800556e:	3710      	adds	r7, #16
 8005570:	46bd      	mov	sp, r7
 8005572:	bd80      	pop	{r7, pc}

08005574 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005574:	b580      	push	{r7, lr}
 8005576:	b082      	sub	sp, #8
 8005578:	af00      	add	r7, sp, #0
 800557a:	6078      	str	r0, [r7, #4]
 800557c:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800557e:	683b      	ldr	r3, [r7, #0]
 8005580:	885b      	ldrh	r3, [r3, #2]
 8005582:	b2da      	uxtb	r2, r3
 8005584:	4b41      	ldr	r3, [pc, #260]	; (800568c <USBD_SetConfig+0x118>)
 8005586:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8005588:	4b40      	ldr	r3, [pc, #256]	; (800568c <USBD_SetConfig+0x118>)
 800558a:	781b      	ldrb	r3, [r3, #0]
 800558c:	2b01      	cmp	r3, #1
 800558e:	d904      	bls.n	800559a <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8005590:	6839      	ldr	r1, [r7, #0]
 8005592:	6878      	ldr	r0, [r7, #4]
 8005594:	f000 f954 	bl	8005840 <USBD_CtlError>
 8005598:	e075      	b.n	8005686 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80055a0:	2b02      	cmp	r3, #2
 80055a2:	d002      	beq.n	80055aa <USBD_SetConfig+0x36>
 80055a4:	2b03      	cmp	r3, #3
 80055a6:	d023      	beq.n	80055f0 <USBD_SetConfig+0x7c>
 80055a8:	e062      	b.n	8005670 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 80055aa:	4b38      	ldr	r3, [pc, #224]	; (800568c <USBD_SetConfig+0x118>)
 80055ac:	781b      	ldrb	r3, [r3, #0]
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d01a      	beq.n	80055e8 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 80055b2:	4b36      	ldr	r3, [pc, #216]	; (800568c <USBD_SetConfig+0x118>)
 80055b4:	781b      	ldrb	r3, [r3, #0]
 80055b6:	461a      	mov	r2, r3
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	2203      	movs	r2, #3
 80055c0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80055c4:	4b31      	ldr	r3, [pc, #196]	; (800568c <USBD_SetConfig+0x118>)
 80055c6:	781b      	ldrb	r3, [r3, #0]
 80055c8:	4619      	mov	r1, r3
 80055ca:	6878      	ldr	r0, [r7, #4]
 80055cc:	f7ff f9f4 	bl	80049b8 <USBD_SetClassConfig>
 80055d0:	4603      	mov	r3, r0
 80055d2:	2b02      	cmp	r3, #2
 80055d4:	d104      	bne.n	80055e0 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 80055d6:	6839      	ldr	r1, [r7, #0]
 80055d8:	6878      	ldr	r0, [r7, #4]
 80055da:	f000 f931 	bl	8005840 <USBD_CtlError>
            return;
 80055de:	e052      	b.n	8005686 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 80055e0:	6878      	ldr	r0, [r7, #4]
 80055e2:	f000 f9d7 	bl	8005994 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 80055e6:	e04e      	b.n	8005686 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80055e8:	6878      	ldr	r0, [r7, #4]
 80055ea:	f000 f9d3 	bl	8005994 <USBD_CtlSendStatus>
        break;
 80055ee:	e04a      	b.n	8005686 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 80055f0:	4b26      	ldr	r3, [pc, #152]	; (800568c <USBD_SetConfig+0x118>)
 80055f2:	781b      	ldrb	r3, [r3, #0]
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d112      	bne.n	800561e <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	2202      	movs	r2, #2
 80055fc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 8005600:	4b22      	ldr	r3, [pc, #136]	; (800568c <USBD_SetConfig+0x118>)
 8005602:	781b      	ldrb	r3, [r3, #0]
 8005604:	461a      	mov	r2, r3
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800560a:	4b20      	ldr	r3, [pc, #128]	; (800568c <USBD_SetConfig+0x118>)
 800560c:	781b      	ldrb	r3, [r3, #0]
 800560e:	4619      	mov	r1, r3
 8005610:	6878      	ldr	r0, [r7, #4]
 8005612:	f7ff f9f0 	bl	80049f6 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8005616:	6878      	ldr	r0, [r7, #4]
 8005618:	f000 f9bc 	bl	8005994 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800561c:	e033      	b.n	8005686 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 800561e:	4b1b      	ldr	r3, [pc, #108]	; (800568c <USBD_SetConfig+0x118>)
 8005620:	781b      	ldrb	r3, [r3, #0]
 8005622:	461a      	mov	r2, r3
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	685b      	ldr	r3, [r3, #4]
 8005628:	429a      	cmp	r2, r3
 800562a:	d01d      	beq.n	8005668 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	685b      	ldr	r3, [r3, #4]
 8005630:	b2db      	uxtb	r3, r3
 8005632:	4619      	mov	r1, r3
 8005634:	6878      	ldr	r0, [r7, #4]
 8005636:	f7ff f9de 	bl	80049f6 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800563a:	4b14      	ldr	r3, [pc, #80]	; (800568c <USBD_SetConfig+0x118>)
 800563c:	781b      	ldrb	r3, [r3, #0]
 800563e:	461a      	mov	r2, r3
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8005644:	4b11      	ldr	r3, [pc, #68]	; (800568c <USBD_SetConfig+0x118>)
 8005646:	781b      	ldrb	r3, [r3, #0]
 8005648:	4619      	mov	r1, r3
 800564a:	6878      	ldr	r0, [r7, #4]
 800564c:	f7ff f9b4 	bl	80049b8 <USBD_SetClassConfig>
 8005650:	4603      	mov	r3, r0
 8005652:	2b02      	cmp	r3, #2
 8005654:	d104      	bne.n	8005660 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8005656:	6839      	ldr	r1, [r7, #0]
 8005658:	6878      	ldr	r0, [r7, #4]
 800565a:	f000 f8f1 	bl	8005840 <USBD_CtlError>
            return;
 800565e:	e012      	b.n	8005686 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8005660:	6878      	ldr	r0, [r7, #4]
 8005662:	f000 f997 	bl	8005994 <USBD_CtlSendStatus>
        break;
 8005666:	e00e      	b.n	8005686 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8005668:	6878      	ldr	r0, [r7, #4]
 800566a:	f000 f993 	bl	8005994 <USBD_CtlSendStatus>
        break;
 800566e:	e00a      	b.n	8005686 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8005670:	6839      	ldr	r1, [r7, #0]
 8005672:	6878      	ldr	r0, [r7, #4]
 8005674:	f000 f8e4 	bl	8005840 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8005678:	4b04      	ldr	r3, [pc, #16]	; (800568c <USBD_SetConfig+0x118>)
 800567a:	781b      	ldrb	r3, [r3, #0]
 800567c:	4619      	mov	r1, r3
 800567e:	6878      	ldr	r0, [r7, #4]
 8005680:	f7ff f9b9 	bl	80049f6 <USBD_ClrClassConfig>
        break;
 8005684:	bf00      	nop
    }
  }
}
 8005686:	3708      	adds	r7, #8
 8005688:	46bd      	mov	sp, r7
 800568a:	bd80      	pop	{r7, pc}
 800568c:	20000b3c 	.word	0x20000b3c

08005690 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005690:	b580      	push	{r7, lr}
 8005692:	b082      	sub	sp, #8
 8005694:	af00      	add	r7, sp, #0
 8005696:	6078      	str	r0, [r7, #4]
 8005698:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800569a:	683b      	ldr	r3, [r7, #0]
 800569c:	88db      	ldrh	r3, [r3, #6]
 800569e:	2b01      	cmp	r3, #1
 80056a0:	d004      	beq.n	80056ac <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80056a2:	6839      	ldr	r1, [r7, #0]
 80056a4:	6878      	ldr	r0, [r7, #4]
 80056a6:	f000 f8cb 	bl	8005840 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80056aa:	e021      	b.n	80056f0 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80056b2:	2b01      	cmp	r3, #1
 80056b4:	db17      	blt.n	80056e6 <USBD_GetConfig+0x56>
 80056b6:	2b02      	cmp	r3, #2
 80056b8:	dd02      	ble.n	80056c0 <USBD_GetConfig+0x30>
 80056ba:	2b03      	cmp	r3, #3
 80056bc:	d00b      	beq.n	80056d6 <USBD_GetConfig+0x46>
 80056be:	e012      	b.n	80056e6 <USBD_GetConfig+0x56>
        pdev->dev_default_config = 0U;
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	2200      	movs	r2, #0
 80056c4:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	3308      	adds	r3, #8
 80056ca:	2201      	movs	r2, #1
 80056cc:	4619      	mov	r1, r3
 80056ce:	6878      	ldr	r0, [r7, #4]
 80056d0:	f000 f920 	bl	8005914 <USBD_CtlSendData>
        break;
 80056d4:	e00c      	b.n	80056f0 <USBD_GetConfig+0x60>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	3304      	adds	r3, #4
 80056da:	2201      	movs	r2, #1
 80056dc:	4619      	mov	r1, r3
 80056de:	6878      	ldr	r0, [r7, #4]
 80056e0:	f000 f918 	bl	8005914 <USBD_CtlSendData>
        break;
 80056e4:	e004      	b.n	80056f0 <USBD_GetConfig+0x60>
        USBD_CtlError(pdev, req);
 80056e6:	6839      	ldr	r1, [r7, #0]
 80056e8:	6878      	ldr	r0, [r7, #4]
 80056ea:	f000 f8a9 	bl	8005840 <USBD_CtlError>
        break;
 80056ee:	bf00      	nop
}
 80056f0:	bf00      	nop
 80056f2:	3708      	adds	r7, #8
 80056f4:	46bd      	mov	sp, r7
 80056f6:	bd80      	pop	{r7, pc}

080056f8 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80056f8:	b580      	push	{r7, lr}
 80056fa:	b082      	sub	sp, #8
 80056fc:	af00      	add	r7, sp, #0
 80056fe:	6078      	str	r0, [r7, #4]
 8005700:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005708:	3b01      	subs	r3, #1
 800570a:	2b02      	cmp	r3, #2
 800570c:	d81e      	bhi.n	800574c <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800570e:	683b      	ldr	r3, [r7, #0]
 8005710:	88db      	ldrh	r3, [r3, #6]
 8005712:	2b02      	cmp	r3, #2
 8005714:	d004      	beq.n	8005720 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8005716:	6839      	ldr	r1, [r7, #0]
 8005718:	6878      	ldr	r0, [r7, #4]
 800571a:	f000 f891 	bl	8005840 <USBD_CtlError>
        break;
 800571e:	e01a      	b.n	8005756 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	2201      	movs	r2, #1
 8005724:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800572c:	2b00      	cmp	r3, #0
 800572e:	d005      	beq.n	800573c <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	68db      	ldr	r3, [r3, #12]
 8005734:	f043 0202 	orr.w	r2, r3, #2
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	330c      	adds	r3, #12
 8005740:	2202      	movs	r2, #2
 8005742:	4619      	mov	r1, r3
 8005744:	6878      	ldr	r0, [r7, #4]
 8005746:	f000 f8e5 	bl	8005914 <USBD_CtlSendData>
      break;
 800574a:	e004      	b.n	8005756 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 800574c:	6839      	ldr	r1, [r7, #0]
 800574e:	6878      	ldr	r0, [r7, #4]
 8005750:	f000 f876 	bl	8005840 <USBD_CtlError>
      break;
 8005754:	bf00      	nop
  }
}
 8005756:	bf00      	nop
 8005758:	3708      	adds	r7, #8
 800575a:	46bd      	mov	sp, r7
 800575c:	bd80      	pop	{r7, pc}

0800575e <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800575e:	b580      	push	{r7, lr}
 8005760:	b082      	sub	sp, #8
 8005762:	af00      	add	r7, sp, #0
 8005764:	6078      	str	r0, [r7, #4]
 8005766:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8005768:	683b      	ldr	r3, [r7, #0]
 800576a:	885b      	ldrh	r3, [r3, #2]
 800576c:	2b01      	cmp	r3, #1
 800576e:	d106      	bne.n	800577e <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	2201      	movs	r2, #1
 8005774:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 8005778:	6878      	ldr	r0, [r7, #4]
 800577a:	f000 f90b 	bl	8005994 <USBD_CtlSendStatus>
  }
}
 800577e:	bf00      	nop
 8005780:	3708      	adds	r7, #8
 8005782:	46bd      	mov	sp, r7
 8005784:	bd80      	pop	{r7, pc}

08005786 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8005786:	b580      	push	{r7, lr}
 8005788:	b082      	sub	sp, #8
 800578a:	af00      	add	r7, sp, #0
 800578c:	6078      	str	r0, [r7, #4]
 800578e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005796:	3b01      	subs	r3, #1
 8005798:	2b02      	cmp	r3, #2
 800579a:	d80b      	bhi.n	80057b4 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800579c:	683b      	ldr	r3, [r7, #0]
 800579e:	885b      	ldrh	r3, [r3, #2]
 80057a0:	2b01      	cmp	r3, #1
 80057a2:	d10c      	bne.n	80057be <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	2200      	movs	r2, #0
 80057a8:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 80057ac:	6878      	ldr	r0, [r7, #4]
 80057ae:	f000 f8f1 	bl	8005994 <USBD_CtlSendStatus>
      }
      break;
 80057b2:	e004      	b.n	80057be <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 80057b4:	6839      	ldr	r1, [r7, #0]
 80057b6:	6878      	ldr	r0, [r7, #4]
 80057b8:	f000 f842 	bl	8005840 <USBD_CtlError>
      break;
 80057bc:	e000      	b.n	80057c0 <USBD_ClrFeature+0x3a>
      break;
 80057be:	bf00      	nop
  }
}
 80057c0:	bf00      	nop
 80057c2:	3708      	adds	r7, #8
 80057c4:	46bd      	mov	sp, r7
 80057c6:	bd80      	pop	{r7, pc}

080057c8 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80057c8:	b480      	push	{r7}
 80057ca:	b083      	sub	sp, #12
 80057cc:	af00      	add	r7, sp, #0
 80057ce:	6078      	str	r0, [r7, #4]
 80057d0:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 80057d2:	683b      	ldr	r3, [r7, #0]
 80057d4:	781a      	ldrb	r2, [r3, #0]
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 80057da:	683b      	ldr	r3, [r7, #0]
 80057dc:	785a      	ldrb	r2, [r3, #1]
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 80057e2:	683b      	ldr	r3, [r7, #0]
 80057e4:	3302      	adds	r3, #2
 80057e6:	781b      	ldrb	r3, [r3, #0]
 80057e8:	b29a      	uxth	r2, r3
 80057ea:	683b      	ldr	r3, [r7, #0]
 80057ec:	3303      	adds	r3, #3
 80057ee:	781b      	ldrb	r3, [r3, #0]
 80057f0:	b29b      	uxth	r3, r3
 80057f2:	021b      	lsls	r3, r3, #8
 80057f4:	b29b      	uxth	r3, r3
 80057f6:	4413      	add	r3, r2
 80057f8:	b29a      	uxth	r2, r3
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 80057fe:	683b      	ldr	r3, [r7, #0]
 8005800:	3304      	adds	r3, #4
 8005802:	781b      	ldrb	r3, [r3, #0]
 8005804:	b29a      	uxth	r2, r3
 8005806:	683b      	ldr	r3, [r7, #0]
 8005808:	3305      	adds	r3, #5
 800580a:	781b      	ldrb	r3, [r3, #0]
 800580c:	b29b      	uxth	r3, r3
 800580e:	021b      	lsls	r3, r3, #8
 8005810:	b29b      	uxth	r3, r3
 8005812:	4413      	add	r3, r2
 8005814:	b29a      	uxth	r2, r3
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800581a:	683b      	ldr	r3, [r7, #0]
 800581c:	3306      	adds	r3, #6
 800581e:	781b      	ldrb	r3, [r3, #0]
 8005820:	b29a      	uxth	r2, r3
 8005822:	683b      	ldr	r3, [r7, #0]
 8005824:	3307      	adds	r3, #7
 8005826:	781b      	ldrb	r3, [r3, #0]
 8005828:	b29b      	uxth	r3, r3
 800582a:	021b      	lsls	r3, r3, #8
 800582c:	b29b      	uxth	r3, r3
 800582e:	4413      	add	r3, r2
 8005830:	b29a      	uxth	r2, r3
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	80da      	strh	r2, [r3, #6]

}
 8005836:	bf00      	nop
 8005838:	370c      	adds	r7, #12
 800583a:	46bd      	mov	sp, r7
 800583c:	bc80      	pop	{r7}
 800583e:	4770      	bx	lr

08005840 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8005840:	b580      	push	{r7, lr}
 8005842:	b082      	sub	sp, #8
 8005844:	af00      	add	r7, sp, #0
 8005846:	6078      	str	r0, [r7, #4]
 8005848:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 800584a:	2180      	movs	r1, #128	; 0x80
 800584c:	6878      	ldr	r0, [r7, #4]
 800584e:	f000 fc20 	bl	8006092 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8005852:	2100      	movs	r1, #0
 8005854:	6878      	ldr	r0, [r7, #4]
 8005856:	f000 fc1c 	bl	8006092 <USBD_LL_StallEP>
}
 800585a:	bf00      	nop
 800585c:	3708      	adds	r7, #8
 800585e:	46bd      	mov	sp, r7
 8005860:	bd80      	pop	{r7, pc}

08005862 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8005862:	b580      	push	{r7, lr}
 8005864:	b086      	sub	sp, #24
 8005866:	af00      	add	r7, sp, #0
 8005868:	60f8      	str	r0, [r7, #12]
 800586a:	60b9      	str	r1, [r7, #8]
 800586c:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800586e:	2300      	movs	r3, #0
 8005870:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	2b00      	cmp	r3, #0
 8005876:	d032      	beq.n	80058de <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8005878:	68f8      	ldr	r0, [r7, #12]
 800587a:	f000 f834 	bl	80058e6 <USBD_GetLen>
 800587e:	4603      	mov	r3, r0
 8005880:	3301      	adds	r3, #1
 8005882:	b29b      	uxth	r3, r3
 8005884:	005b      	lsls	r3, r3, #1
 8005886:	b29a      	uxth	r2, r3
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800588c:	7dfb      	ldrb	r3, [r7, #23]
 800588e:	1c5a      	adds	r2, r3, #1
 8005890:	75fa      	strb	r2, [r7, #23]
 8005892:	461a      	mov	r2, r3
 8005894:	68bb      	ldr	r3, [r7, #8]
 8005896:	4413      	add	r3, r2
 8005898:	687a      	ldr	r2, [r7, #4]
 800589a:	7812      	ldrb	r2, [r2, #0]
 800589c:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800589e:	7dfb      	ldrb	r3, [r7, #23]
 80058a0:	1c5a      	adds	r2, r3, #1
 80058a2:	75fa      	strb	r2, [r7, #23]
 80058a4:	461a      	mov	r2, r3
 80058a6:	68bb      	ldr	r3, [r7, #8]
 80058a8:	4413      	add	r3, r2
 80058aa:	2203      	movs	r2, #3
 80058ac:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 80058ae:	e012      	b.n	80058d6 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	1c5a      	adds	r2, r3, #1
 80058b4:	60fa      	str	r2, [r7, #12]
 80058b6:	7dfa      	ldrb	r2, [r7, #23]
 80058b8:	1c51      	adds	r1, r2, #1
 80058ba:	75f9      	strb	r1, [r7, #23]
 80058bc:	4611      	mov	r1, r2
 80058be:	68ba      	ldr	r2, [r7, #8]
 80058c0:	440a      	add	r2, r1
 80058c2:	781b      	ldrb	r3, [r3, #0]
 80058c4:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 80058c6:	7dfb      	ldrb	r3, [r7, #23]
 80058c8:	1c5a      	adds	r2, r3, #1
 80058ca:	75fa      	strb	r2, [r7, #23]
 80058cc:	461a      	mov	r2, r3
 80058ce:	68bb      	ldr	r3, [r7, #8]
 80058d0:	4413      	add	r3, r2
 80058d2:	2200      	movs	r2, #0
 80058d4:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	781b      	ldrb	r3, [r3, #0]
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d1e8      	bne.n	80058b0 <USBD_GetString+0x4e>
    }
  }
}
 80058de:	bf00      	nop
 80058e0:	3718      	adds	r7, #24
 80058e2:	46bd      	mov	sp, r7
 80058e4:	bd80      	pop	{r7, pc}

080058e6 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80058e6:	b480      	push	{r7}
 80058e8:	b085      	sub	sp, #20
 80058ea:	af00      	add	r7, sp, #0
 80058ec:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80058ee:	2300      	movs	r3, #0
 80058f0:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 80058f2:	e005      	b.n	8005900 <USBD_GetLen+0x1a>
  {
    len++;
 80058f4:	7bfb      	ldrb	r3, [r7, #15]
 80058f6:	3301      	adds	r3, #1
 80058f8:	73fb      	strb	r3, [r7, #15]
    buf++;
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	3301      	adds	r3, #1
 80058fe:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	781b      	ldrb	r3, [r3, #0]
 8005904:	2b00      	cmp	r3, #0
 8005906:	d1f5      	bne.n	80058f4 <USBD_GetLen+0xe>
  }

  return len;
 8005908:	7bfb      	ldrb	r3, [r7, #15]
}
 800590a:	4618      	mov	r0, r3
 800590c:	3714      	adds	r7, #20
 800590e:	46bd      	mov	sp, r7
 8005910:	bc80      	pop	{r7}
 8005912:	4770      	bx	lr

08005914 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8005914:	b580      	push	{r7, lr}
 8005916:	b084      	sub	sp, #16
 8005918:	af00      	add	r7, sp, #0
 800591a:	60f8      	str	r0, [r7, #12]
 800591c:	60b9      	str	r1, [r7, #8]
 800591e:	4613      	mov	r3, r2
 8005920:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	2202      	movs	r2, #2
 8005926:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800592a:	88fa      	ldrh	r2, [r7, #6]
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8005930:	88fa      	ldrh	r2, [r7, #6]
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8005936:	88fb      	ldrh	r3, [r7, #6]
 8005938:	68ba      	ldr	r2, [r7, #8]
 800593a:	2100      	movs	r1, #0
 800593c:	68f8      	ldr	r0, [r7, #12]
 800593e:	f000 fc2a 	bl	8006196 <USBD_LL_Transmit>

  return USBD_OK;
 8005942:	2300      	movs	r3, #0
}
 8005944:	4618      	mov	r0, r3
 8005946:	3710      	adds	r7, #16
 8005948:	46bd      	mov	sp, r7
 800594a:	bd80      	pop	{r7, pc}

0800594c <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800594c:	b580      	push	{r7, lr}
 800594e:	b084      	sub	sp, #16
 8005950:	af00      	add	r7, sp, #0
 8005952:	60f8      	str	r0, [r7, #12]
 8005954:	60b9      	str	r1, [r7, #8]
 8005956:	4613      	mov	r3, r2
 8005958:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800595a:	88fb      	ldrh	r3, [r7, #6]
 800595c:	68ba      	ldr	r2, [r7, #8]
 800595e:	2100      	movs	r1, #0
 8005960:	68f8      	ldr	r0, [r7, #12]
 8005962:	f000 fc18 	bl	8006196 <USBD_LL_Transmit>

  return USBD_OK;
 8005966:	2300      	movs	r3, #0
}
 8005968:	4618      	mov	r0, r3
 800596a:	3710      	adds	r7, #16
 800596c:	46bd      	mov	sp, r7
 800596e:	bd80      	pop	{r7, pc}

08005970 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8005970:	b580      	push	{r7, lr}
 8005972:	b084      	sub	sp, #16
 8005974:	af00      	add	r7, sp, #0
 8005976:	60f8      	str	r0, [r7, #12]
 8005978:	60b9      	str	r1, [r7, #8]
 800597a:	4613      	mov	r3, r2
 800597c:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800597e:	88fb      	ldrh	r3, [r7, #6]
 8005980:	68ba      	ldr	r2, [r7, #8]
 8005982:	2100      	movs	r1, #0
 8005984:	68f8      	ldr	r0, [r7, #12]
 8005986:	f000 fc29 	bl	80061dc <USBD_LL_PrepareReceive>

  return USBD_OK;
 800598a:	2300      	movs	r3, #0
}
 800598c:	4618      	mov	r0, r3
 800598e:	3710      	adds	r7, #16
 8005990:	46bd      	mov	sp, r7
 8005992:	bd80      	pop	{r7, pc}

08005994 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8005994:	b580      	push	{r7, lr}
 8005996:	b082      	sub	sp, #8
 8005998:	af00      	add	r7, sp, #0
 800599a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	2204      	movs	r2, #4
 80059a0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80059a4:	2300      	movs	r3, #0
 80059a6:	2200      	movs	r2, #0
 80059a8:	2100      	movs	r1, #0
 80059aa:	6878      	ldr	r0, [r7, #4]
 80059ac:	f000 fbf3 	bl	8006196 <USBD_LL_Transmit>

  return USBD_OK;
 80059b0:	2300      	movs	r3, #0
}
 80059b2:	4618      	mov	r0, r3
 80059b4:	3708      	adds	r7, #8
 80059b6:	46bd      	mov	sp, r7
 80059b8:	bd80      	pop	{r7, pc}

080059ba <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80059ba:	b580      	push	{r7, lr}
 80059bc:	b082      	sub	sp, #8
 80059be:	af00      	add	r7, sp, #0
 80059c0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	2205      	movs	r2, #5
 80059c6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80059ca:	2300      	movs	r3, #0
 80059cc:	2200      	movs	r2, #0
 80059ce:	2100      	movs	r1, #0
 80059d0:	6878      	ldr	r0, [r7, #4]
 80059d2:	f000 fc03 	bl	80061dc <USBD_LL_PrepareReceive>

  return USBD_OK;
 80059d6:	2300      	movs	r3, #0
}
 80059d8:	4618      	mov	r0, r3
 80059da:	3708      	adds	r7, #8
 80059dc:	46bd      	mov	sp, r7
 80059de:	bd80      	pop	{r7, pc}

080059e0 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80059e0:	b580      	push	{r7, lr}
 80059e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80059e4:	2200      	movs	r2, #0
 80059e6:	4912      	ldr	r1, [pc, #72]	; (8005a30 <MX_USB_DEVICE_Init+0x50>)
 80059e8:	4812      	ldr	r0, [pc, #72]	; (8005a34 <MX_USB_DEVICE_Init+0x54>)
 80059ea:	f7fe ff8b 	bl	8004904 <USBD_Init>
 80059ee:	4603      	mov	r3, r0
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d001      	beq.n	80059f8 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80059f4:	f7fa fc66 	bl	80002c4 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_MSC) != USBD_OK)
 80059f8:	490f      	ldr	r1, [pc, #60]	; (8005a38 <MX_USB_DEVICE_Init+0x58>)
 80059fa:	480e      	ldr	r0, [pc, #56]	; (8005a34 <MX_USB_DEVICE_Init+0x54>)
 80059fc:	f7fe ffad 	bl	800495a <USBD_RegisterClass>
 8005a00:	4603      	mov	r3, r0
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d001      	beq.n	8005a0a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8005a06:	f7fa fc5d 	bl	80002c4 <Error_Handler>
  }
  if (USBD_MSC_RegisterStorage(&hUsbDeviceFS, &USBD_Storage_Interface_fops_FS) != USBD_OK)
 8005a0a:	490c      	ldr	r1, [pc, #48]	; (8005a3c <MX_USB_DEVICE_Init+0x5c>)
 8005a0c:	4809      	ldr	r0, [pc, #36]	; (8005a34 <MX_USB_DEVICE_Init+0x54>)
 8005a0e:	f7fd ff5b 	bl	80038c8 <USBD_MSC_RegisterStorage>
 8005a12:	4603      	mov	r3, r0
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d001      	beq.n	8005a1c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8005a18:	f7fa fc54 	bl	80002c4 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8005a1c:	4805      	ldr	r0, [pc, #20]	; (8005a34 <MX_USB_DEVICE_Init+0x54>)
 8005a1e:	f7fe ffb5 	bl	800498c <USBD_Start>
 8005a22:	4603      	mov	r3, r0
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d001      	beq.n	8005a2c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8005a28:	f7fa fc4c 	bl	80002c4 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8005a2c:	bf00      	nop
 8005a2e:	bd80      	pop	{r7, pc}
 8005a30:	200000b0 	.word	0x200000b0
 8005a34:	20000db4 	.word	0x20000db4
 8005a38:	2000000c 	.word	0x2000000c
 8005a3c:	20000b00 	.word	0x20000b00

08005a40 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005a40:	b480      	push	{r7}
 8005a42:	b083      	sub	sp, #12
 8005a44:	af00      	add	r7, sp, #0
 8005a46:	4603      	mov	r3, r0
 8005a48:	6039      	str	r1, [r7, #0]
 8005a4a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8005a4c:	683b      	ldr	r3, [r7, #0]
 8005a4e:	2212      	movs	r2, #18
 8005a50:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8005a52:	4b03      	ldr	r3, [pc, #12]	; (8005a60 <USBD_FS_DeviceDescriptor+0x20>)
}
 8005a54:	4618      	mov	r0, r3
 8005a56:	370c      	adds	r7, #12
 8005a58:	46bd      	mov	sp, r7
 8005a5a:	bc80      	pop	{r7}
 8005a5c:	4770      	bx	lr
 8005a5e:	bf00      	nop
 8005a60:	200000cc 	.word	0x200000cc

08005a64 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005a64:	b480      	push	{r7}
 8005a66:	b083      	sub	sp, #12
 8005a68:	af00      	add	r7, sp, #0
 8005a6a:	4603      	mov	r3, r0
 8005a6c:	6039      	str	r1, [r7, #0]
 8005a6e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8005a70:	683b      	ldr	r3, [r7, #0]
 8005a72:	2204      	movs	r2, #4
 8005a74:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8005a76:	4b03      	ldr	r3, [pc, #12]	; (8005a84 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8005a78:	4618      	mov	r0, r3
 8005a7a:	370c      	adds	r7, #12
 8005a7c:	46bd      	mov	sp, r7
 8005a7e:	bc80      	pop	{r7}
 8005a80:	4770      	bx	lr
 8005a82:	bf00      	nop
 8005a84:	200000e0 	.word	0x200000e0

08005a88 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005a88:	b580      	push	{r7, lr}
 8005a8a:	b082      	sub	sp, #8
 8005a8c:	af00      	add	r7, sp, #0
 8005a8e:	4603      	mov	r3, r0
 8005a90:	6039      	str	r1, [r7, #0]
 8005a92:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8005a94:	79fb      	ldrb	r3, [r7, #7]
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d105      	bne.n	8005aa6 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8005a9a:	683a      	ldr	r2, [r7, #0]
 8005a9c:	4907      	ldr	r1, [pc, #28]	; (8005abc <USBD_FS_ProductStrDescriptor+0x34>)
 8005a9e:	4808      	ldr	r0, [pc, #32]	; (8005ac0 <USBD_FS_ProductStrDescriptor+0x38>)
 8005aa0:	f7ff fedf 	bl	8005862 <USBD_GetString>
 8005aa4:	e004      	b.n	8005ab0 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8005aa6:	683a      	ldr	r2, [r7, #0]
 8005aa8:	4904      	ldr	r1, [pc, #16]	; (8005abc <USBD_FS_ProductStrDescriptor+0x34>)
 8005aaa:	4805      	ldr	r0, [pc, #20]	; (8005ac0 <USBD_FS_ProductStrDescriptor+0x38>)
 8005aac:	f7ff fed9 	bl	8005862 <USBD_GetString>
  }
  return USBD_StrDesc;
 8005ab0:	4b02      	ldr	r3, [pc, #8]	; (8005abc <USBD_FS_ProductStrDescriptor+0x34>)
}
 8005ab2:	4618      	mov	r0, r3
 8005ab4:	3708      	adds	r7, #8
 8005ab6:	46bd      	mov	sp, r7
 8005ab8:	bd80      	pop	{r7, pc}
 8005aba:	bf00      	nop
 8005abc:	20001078 	.word	0x20001078
 8005ac0:	0800637c 	.word	0x0800637c

08005ac4 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005ac4:	b580      	push	{r7, lr}
 8005ac6:	b082      	sub	sp, #8
 8005ac8:	af00      	add	r7, sp, #0
 8005aca:	4603      	mov	r3, r0
 8005acc:	6039      	str	r1, [r7, #0]
 8005ace:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8005ad0:	683a      	ldr	r2, [r7, #0]
 8005ad2:	4904      	ldr	r1, [pc, #16]	; (8005ae4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8005ad4:	4804      	ldr	r0, [pc, #16]	; (8005ae8 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8005ad6:	f7ff fec4 	bl	8005862 <USBD_GetString>
  return USBD_StrDesc;
 8005ada:	4b02      	ldr	r3, [pc, #8]	; (8005ae4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8005adc:	4618      	mov	r0, r3
 8005ade:	3708      	adds	r7, #8
 8005ae0:	46bd      	mov	sp, r7
 8005ae2:	bd80      	pop	{r7, pc}
 8005ae4:	20001078 	.word	0x20001078
 8005ae8:	08006390 	.word	0x08006390

08005aec <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005aec:	b580      	push	{r7, lr}
 8005aee:	b082      	sub	sp, #8
 8005af0:	af00      	add	r7, sp, #0
 8005af2:	4603      	mov	r3, r0
 8005af4:	6039      	str	r1, [r7, #0]
 8005af6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8005af8:	683b      	ldr	r3, [r7, #0]
 8005afa:	221a      	movs	r2, #26
 8005afc:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8005afe:	f000 f843 	bl	8005b88 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */
  
  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8005b02:	4b02      	ldr	r3, [pc, #8]	; (8005b0c <USBD_FS_SerialStrDescriptor+0x20>)
}
 8005b04:	4618      	mov	r0, r3
 8005b06:	3708      	adds	r7, #8
 8005b08:	46bd      	mov	sp, r7
 8005b0a:	bd80      	pop	{r7, pc}
 8005b0c:	200000e4 	.word	0x200000e4

08005b10 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005b10:	b580      	push	{r7, lr}
 8005b12:	b082      	sub	sp, #8
 8005b14:	af00      	add	r7, sp, #0
 8005b16:	4603      	mov	r3, r0
 8005b18:	6039      	str	r1, [r7, #0]
 8005b1a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8005b1c:	79fb      	ldrb	r3, [r7, #7]
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d105      	bne.n	8005b2e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8005b22:	683a      	ldr	r2, [r7, #0]
 8005b24:	4907      	ldr	r1, [pc, #28]	; (8005b44 <USBD_FS_ConfigStrDescriptor+0x34>)
 8005b26:	4808      	ldr	r0, [pc, #32]	; (8005b48 <USBD_FS_ConfigStrDescriptor+0x38>)
 8005b28:	f7ff fe9b 	bl	8005862 <USBD_GetString>
 8005b2c:	e004      	b.n	8005b38 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8005b2e:	683a      	ldr	r2, [r7, #0]
 8005b30:	4904      	ldr	r1, [pc, #16]	; (8005b44 <USBD_FS_ConfigStrDescriptor+0x34>)
 8005b32:	4805      	ldr	r0, [pc, #20]	; (8005b48 <USBD_FS_ConfigStrDescriptor+0x38>)
 8005b34:	f7ff fe95 	bl	8005862 <USBD_GetString>
  }
  return USBD_StrDesc;
 8005b38:	4b02      	ldr	r3, [pc, #8]	; (8005b44 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8005b3a:	4618      	mov	r0, r3
 8005b3c:	3708      	adds	r7, #8
 8005b3e:	46bd      	mov	sp, r7
 8005b40:	bd80      	pop	{r7, pc}
 8005b42:	bf00      	nop
 8005b44:	20001078 	.word	0x20001078
 8005b48:	080063a4 	.word	0x080063a4

08005b4c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005b4c:	b580      	push	{r7, lr}
 8005b4e:	b082      	sub	sp, #8
 8005b50:	af00      	add	r7, sp, #0
 8005b52:	4603      	mov	r3, r0
 8005b54:	6039      	str	r1, [r7, #0]
 8005b56:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8005b58:	79fb      	ldrb	r3, [r7, #7]
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d105      	bne.n	8005b6a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8005b5e:	683a      	ldr	r2, [r7, #0]
 8005b60:	4907      	ldr	r1, [pc, #28]	; (8005b80 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8005b62:	4808      	ldr	r0, [pc, #32]	; (8005b84 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8005b64:	f7ff fe7d 	bl	8005862 <USBD_GetString>
 8005b68:	e004      	b.n	8005b74 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8005b6a:	683a      	ldr	r2, [r7, #0]
 8005b6c:	4904      	ldr	r1, [pc, #16]	; (8005b80 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8005b6e:	4805      	ldr	r0, [pc, #20]	; (8005b84 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8005b70:	f7ff fe77 	bl	8005862 <USBD_GetString>
  }
  return USBD_StrDesc;
 8005b74:	4b02      	ldr	r3, [pc, #8]	; (8005b80 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8005b76:	4618      	mov	r0, r3
 8005b78:	3708      	adds	r7, #8
 8005b7a:	46bd      	mov	sp, r7
 8005b7c:	bd80      	pop	{r7, pc}
 8005b7e:	bf00      	nop
 8005b80:	20001078 	.word	0x20001078
 8005b84:	080063b0 	.word	0x080063b0

08005b88 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor 
  * @param  None 
  * @retval None
  */
static void Get_SerialNum(void)
{
 8005b88:	b580      	push	{r7, lr}
 8005b8a:	b084      	sub	sp, #16
 8005b8c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8005b8e:	4b0f      	ldr	r3, [pc, #60]	; (8005bcc <Get_SerialNum+0x44>)
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8005b94:	4b0e      	ldr	r3, [pc, #56]	; (8005bd0 <Get_SerialNum+0x48>)
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8005b9a:	4b0e      	ldr	r3, [pc, #56]	; (8005bd4 <Get_SerialNum+0x4c>)
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8005ba0:	68fa      	ldr	r2, [r7, #12]
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	4413      	add	r3, r2
 8005ba6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d009      	beq.n	8005bc2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8005bae:	2208      	movs	r2, #8
 8005bb0:	4909      	ldr	r1, [pc, #36]	; (8005bd8 <Get_SerialNum+0x50>)
 8005bb2:	68f8      	ldr	r0, [r7, #12]
 8005bb4:	f000 f814 	bl	8005be0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8005bb8:	2204      	movs	r2, #4
 8005bba:	4908      	ldr	r1, [pc, #32]	; (8005bdc <Get_SerialNum+0x54>)
 8005bbc:	68b8      	ldr	r0, [r7, #8]
 8005bbe:	f000 f80f 	bl	8005be0 <IntToUnicode>
  }
}
 8005bc2:	bf00      	nop
 8005bc4:	3710      	adds	r7, #16
 8005bc6:	46bd      	mov	sp, r7
 8005bc8:	bd80      	pop	{r7, pc}
 8005bca:	bf00      	nop
 8005bcc:	1ffff7e8 	.word	0x1ffff7e8
 8005bd0:	1ffff7ec 	.word	0x1ffff7ec
 8005bd4:	1ffff7f0 	.word	0x1ffff7f0
 8005bd8:	200000e6 	.word	0x200000e6
 8005bdc:	200000f6 	.word	0x200000f6

08005be0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer 
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8005be0:	b480      	push	{r7}
 8005be2:	b087      	sub	sp, #28
 8005be4:	af00      	add	r7, sp, #0
 8005be6:	60f8      	str	r0, [r7, #12]
 8005be8:	60b9      	str	r1, [r7, #8]
 8005bea:	4613      	mov	r3, r2
 8005bec:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8005bee:	2300      	movs	r3, #0
 8005bf0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8005bf2:	2300      	movs	r3, #0
 8005bf4:	75fb      	strb	r3, [r7, #23]
 8005bf6:	e027      	b.n	8005c48 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	0f1b      	lsrs	r3, r3, #28
 8005bfc:	2b09      	cmp	r3, #9
 8005bfe:	d80b      	bhi.n	8005c18 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	0f1b      	lsrs	r3, r3, #28
 8005c04:	b2da      	uxtb	r2, r3
 8005c06:	7dfb      	ldrb	r3, [r7, #23]
 8005c08:	005b      	lsls	r3, r3, #1
 8005c0a:	4619      	mov	r1, r3
 8005c0c:	68bb      	ldr	r3, [r7, #8]
 8005c0e:	440b      	add	r3, r1
 8005c10:	3230      	adds	r2, #48	; 0x30
 8005c12:	b2d2      	uxtb	r2, r2
 8005c14:	701a      	strb	r2, [r3, #0]
 8005c16:	e00a      	b.n	8005c2e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	0f1b      	lsrs	r3, r3, #28
 8005c1c:	b2da      	uxtb	r2, r3
 8005c1e:	7dfb      	ldrb	r3, [r7, #23]
 8005c20:	005b      	lsls	r3, r3, #1
 8005c22:	4619      	mov	r1, r3
 8005c24:	68bb      	ldr	r3, [r7, #8]
 8005c26:	440b      	add	r3, r1
 8005c28:	3237      	adds	r2, #55	; 0x37
 8005c2a:	b2d2      	uxtb	r2, r2
 8005c2c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	011b      	lsls	r3, r3, #4
 8005c32:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8005c34:	7dfb      	ldrb	r3, [r7, #23]
 8005c36:	005b      	lsls	r3, r3, #1
 8005c38:	3301      	adds	r3, #1
 8005c3a:	68ba      	ldr	r2, [r7, #8]
 8005c3c:	4413      	add	r3, r2
 8005c3e:	2200      	movs	r2, #0
 8005c40:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8005c42:	7dfb      	ldrb	r3, [r7, #23]
 8005c44:	3301      	adds	r3, #1
 8005c46:	75fb      	strb	r3, [r7, #23]
 8005c48:	7dfa      	ldrb	r2, [r7, #23]
 8005c4a:	79fb      	ldrb	r3, [r7, #7]
 8005c4c:	429a      	cmp	r2, r3
 8005c4e:	d3d3      	bcc.n	8005bf8 <IntToUnicode+0x18>
  }
}
 8005c50:	bf00      	nop
 8005c52:	371c      	adds	r7, #28
 8005c54:	46bd      	mov	sp, r7
 8005c56:	bc80      	pop	{r7}
 8005c58:	4770      	bx	lr

08005c5a <STORAGE_Init_FS>:
  * @brief  Initializes over USB FS IP
  * @param  lun:
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Init_FS(uint8_t lun)
{
 8005c5a:	b480      	push	{r7}
 8005c5c:	b083      	sub	sp, #12
 8005c5e:	af00      	add	r7, sp, #0
 8005c60:	4603      	mov	r3, r0
 8005c62:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 2 */
  return (USBD_OK);
 8005c64:	2300      	movs	r3, #0
  /* USER CODE END 2 */
}
 8005c66:	4618      	mov	r0, r3
 8005c68:	370c      	adds	r7, #12
 8005c6a:	46bd      	mov	sp, r7
 8005c6c:	bc80      	pop	{r7}
 8005c6e:	4770      	bx	lr

08005c70 <STORAGE_GetCapacity_FS>:
  * @param  block_num: .
  * @param  block_size: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_GetCapacity_FS(uint8_t lun, uint32_t *block_num, uint16_t *block_size)
{
 8005c70:	b480      	push	{r7}
 8005c72:	b085      	sub	sp, #20
 8005c74:	af00      	add	r7, sp, #0
 8005c76:	4603      	mov	r3, r0
 8005c78:	60b9      	str	r1, [r7, #8]
 8005c7a:	607a      	str	r2, [r7, #4]
 8005c7c:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 3 */
  *block_num  = STORAGE_BLK_NBR;
 8005c7e:	68bb      	ldr	r3, [r7, #8]
 8005c80:	2205      	movs	r2, #5
 8005c82:	601a      	str	r2, [r3, #0]
  *block_size = STORAGE_BLK_SIZ;
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005c8a:	801a      	strh	r2, [r3, #0]
  return (USBD_OK);
 8005c8c:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8005c8e:	4618      	mov	r0, r3
 8005c90:	3714      	adds	r7, #20
 8005c92:	46bd      	mov	sp, r7
 8005c94:	bc80      	pop	{r7}
 8005c96:	4770      	bx	lr

08005c98 <STORAGE_IsReady_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsReady_FS(uint8_t lun)
{
 8005c98:	b480      	push	{r7}
 8005c9a:	b083      	sub	sp, #12
 8005c9c:	af00      	add	r7, sp, #0
 8005c9e:	4603      	mov	r3, r0
 8005ca0:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8005ca2:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8005ca4:	4618      	mov	r0, r3
 8005ca6:	370c      	adds	r7, #12
 8005ca8:	46bd      	mov	sp, r7
 8005caa:	bc80      	pop	{r7}
 8005cac:	4770      	bx	lr

08005cae <STORAGE_IsWriteProtected_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsWriteProtected_FS(uint8_t lun)
{
 8005cae:	b480      	push	{r7}
 8005cb0:	b083      	sub	sp, #12
 8005cb2:	af00      	add	r7, sp, #0
 8005cb4:	4603      	mov	r3, r0
 8005cb6:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 5 */
  return (USBD_OK);
 8005cb8:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8005cba:	4618      	mov	r0, r3
 8005cbc:	370c      	adds	r7, #12
 8005cbe:	46bd      	mov	sp, r7
 8005cc0:	bc80      	pop	{r7}
 8005cc2:	4770      	bx	lr

08005cc4 <STORAGE_Read_FS>:
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static volatile uint8_t test_counter = 0;
int8_t STORAGE_Read_FS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 8005cc4:	b580      	push	{r7, lr}
 8005cc6:	b084      	sub	sp, #16
 8005cc8:	af00      	add	r7, sp, #0
 8005cca:	60b9      	str	r1, [r7, #8]
 8005ccc:	607a      	str	r2, [r7, #4]
 8005cce:	461a      	mov	r2, r3
 8005cd0:	4603      	mov	r3, r0
 8005cd2:	73fb      	strb	r3, [r7, #15]
 8005cd4:	4613      	mov	r3, r2
 8005cd6:	81bb      	strh	r3, [r7, #12]
  /* USER CODE BEGIN 6 */
	//if (storage_buffer + (STORAGE_BLK_SIZ * blk_addr) + STORAGE_BLK_SIZ * blk_len > storage_buffer + STORAGE_BLK_NBR * STORAGE_BLK_SIZ) {
	//	return USBD_OK;
	//}
	if (blk_addr + blk_len > 5) {
 8005cd8:	89ba      	ldrh	r2, [r7, #12]
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	4413      	add	r3, r2
 8005cde:	2b05      	cmp	r3, #5
 8005ce0:	d906      	bls.n	8005cf0 <STORAGE_Read_FS+0x2c>
		test_counter++;
 8005ce2:	4b0b      	ldr	r3, [pc, #44]	; (8005d10 <STORAGE_Read_FS+0x4c>)
 8005ce4:	781b      	ldrb	r3, [r3, #0]
 8005ce6:	b2db      	uxtb	r3, r3
 8005ce8:	3301      	adds	r3, #1
 8005cea:	b2da      	uxtb	r2, r3
 8005cec:	4b08      	ldr	r3, [pc, #32]	; (8005d10 <STORAGE_Read_FS+0x4c>)
 8005cee:	701a      	strb	r2, [r3, #0]
	}
	if (blk_addr == 4) {
		//memcpy(buf, (void*)(storage_variable_buffer), (STORAGE_BLK_SIZ * blk_len));
		  //return (USBD_OK);
	}
	memcpy(buf, (void*)(storage_buffer + (STORAGE_BLK_SIZ * blk_addr)), (STORAGE_BLK_SIZ * blk_len));
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	025b      	lsls	r3, r3, #9
 8005cf4:	4a07      	ldr	r2, [pc, #28]	; (8005d14 <STORAGE_Read_FS+0x50>)
 8005cf6:	1899      	adds	r1, r3, r2
 8005cf8:	89bb      	ldrh	r3, [r7, #12]
 8005cfa:	025b      	lsls	r3, r3, #9
 8005cfc:	461a      	mov	r2, r3
 8005cfe:	68b8      	ldr	r0, [r7, #8]
 8005d00:	f000 fb12 	bl	8006328 <memcpy>
	/*memset(buf, 0, STORAGE_BLK_SIZ * blk_len);
	buf[510] = 0x55;
	buf[511] = 0xaa;*/
  return (USBD_OK);
 8005d04:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8005d06:	4618      	mov	r0, r3
 8005d08:	3710      	adds	r7, #16
 8005d0a:	46bd      	mov	sp, r7
 8005d0c:	bd80      	pop	{r7, pc}
 8005d0e:	bf00      	nop
 8005d10:	20000b3d 	.word	0x20000b3d
 8005d14:	20000100 	.word	0x20000100

08005d18 <STORAGE_Write_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Write_FS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 8005d18:	b580      	push	{r7, lr}
 8005d1a:	b084      	sub	sp, #16
 8005d1c:	af00      	add	r7, sp, #0
 8005d1e:	60b9      	str	r1, [r7, #8]
 8005d20:	607a      	str	r2, [r7, #4]
 8005d22:	461a      	mov	r2, r3
 8005d24:	4603      	mov	r3, r0
 8005d26:	73fb      	strb	r3, [r7, #15]
 8005d28:	4613      	mov	r3, r2
 8005d2a:	81bb      	strh	r3, [r7, #12]
  /* USER CODE BEGIN 7 */
	//if (storage_buffer + (STORAGE_BLK_SIZ * blk_addr) + STORAGE_BLK_SIZ * blk_len > storage_buffer + STORAGE_BLK_NBR * STORAGE_BLK_SIZ) {
	//	return USBD_OK;
	//}
	if (blk_addr + blk_len > 5) {
 8005d2c:	89ba      	ldrh	r2, [r7, #12]
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	4413      	add	r3, r2
 8005d32:	2b05      	cmp	r3, #5
 8005d34:	d906      	bls.n	8005d44 <STORAGE_Write_FS+0x2c>
		test_counter++;
 8005d36:	4b0b      	ldr	r3, [pc, #44]	; (8005d64 <STORAGE_Write_FS+0x4c>)
 8005d38:	781b      	ldrb	r3, [r3, #0]
 8005d3a:	b2db      	uxtb	r3, r3
 8005d3c:	3301      	adds	r3, #1
 8005d3e:	b2da      	uxtb	r2, r3
 8005d40:	4b08      	ldr	r3, [pc, #32]	; (8005d64 <STORAGE_Write_FS+0x4c>)
 8005d42:	701a      	strb	r2, [r3, #0]
	}
	memcpy((void*)(storage_buffer + (STORAGE_BLK_SIZ * blk_addr)), buf, (STORAGE_BLK_SIZ * blk_len));
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	025b      	lsls	r3, r3, #9
 8005d48:	4a07      	ldr	r2, [pc, #28]	; (8005d68 <STORAGE_Write_FS+0x50>)
 8005d4a:	1898      	adds	r0, r3, r2
 8005d4c:	89bb      	ldrh	r3, [r7, #12]
 8005d4e:	025b      	lsls	r3, r3, #9
 8005d50:	461a      	mov	r2, r3
 8005d52:	68b9      	ldr	r1, [r7, #8]
 8005d54:	f000 fae8 	bl	8006328 <memcpy>
  return (USBD_OK);
 8005d58:	2300      	movs	r3, #0
  /* USER CODE END 7 */
}
 8005d5a:	4618      	mov	r0, r3
 8005d5c:	3710      	adds	r7, #16
 8005d5e:	46bd      	mov	sp, r7
 8005d60:	bd80      	pop	{r7, pc}
 8005d62:	bf00      	nop
 8005d64:	20000b3d 	.word	0x20000b3d
 8005d68:	20000100 	.word	0x20000100

08005d6c <STORAGE_GetMaxLun_FS>:
  * @brief  .
  * @param  None
  * @retval .
  */
int8_t STORAGE_GetMaxLun_FS(void)
{
 8005d6c:	b480      	push	{r7}
 8005d6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
  return (STORAGE_LUN_NBR - 1);
 8005d70:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 8005d72:	4618      	mov	r0, r3
 8005d74:	46bd      	mov	sp, r7
 8005d76:	bc80      	pop	{r7}
 8005d78:	4770      	bx	lr
	...

08005d7c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8005d7c:	b580      	push	{r7, lr}
 8005d7e:	b084      	sub	sp, #16
 8005d80:	af00      	add	r7, sp, #0
 8005d82:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	4a0d      	ldr	r2, [pc, #52]	; (8005dc0 <HAL_PCD_MspInit+0x44>)
 8005d8a:	4293      	cmp	r3, r2
 8005d8c:	d113      	bne.n	8005db6 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8005d8e:	4b0d      	ldr	r3, [pc, #52]	; (8005dc4 <HAL_PCD_MspInit+0x48>)
 8005d90:	69db      	ldr	r3, [r3, #28]
 8005d92:	4a0c      	ldr	r2, [pc, #48]	; (8005dc4 <HAL_PCD_MspInit+0x48>)
 8005d94:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005d98:	61d3      	str	r3, [r2, #28]
 8005d9a:	4b0a      	ldr	r3, [pc, #40]	; (8005dc4 <HAL_PCD_MspInit+0x48>)
 8005d9c:	69db      	ldr	r3, [r3, #28]
 8005d9e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005da2:	60fb      	str	r3, [r7, #12]
 8005da4:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8005da6:	2200      	movs	r2, #0
 8005da8:	2100      	movs	r1, #0
 8005daa:	2014      	movs	r0, #20
 8005dac:	f7fa fcab 	bl	8000706 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8005db0:	2014      	movs	r0, #20
 8005db2:	f7fa fcc4 	bl	800073e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8005db6:	bf00      	nop
 8005db8:	3710      	adds	r7, #16
 8005dba:	46bd      	mov	sp, r7
 8005dbc:	bd80      	pop	{r7, pc}
 8005dbe:	bf00      	nop
 8005dc0:	40005c00 	.word	0x40005c00
 8005dc4:	40021000 	.word	0x40021000

08005dc8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005dc8:	b580      	push	{r7, lr}
 8005dca:	b082      	sub	sp, #8
 8005dcc:	af00      	add	r7, sp, #0
 8005dce:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	f8d3 2268 	ldr.w	r2, [r3, #616]	; 0x268
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	f503 730c 	add.w	r3, r3, #560	; 0x230
 8005ddc:	4619      	mov	r1, r3
 8005dde:	4610      	mov	r0, r2
 8005de0:	f7fe fe1c 	bl	8004a1c <USBD_LL_SetupStage>
}
 8005de4:	bf00      	nop
 8005de6:	3708      	adds	r7, #8
 8005de8:	46bd      	mov	sp, r7
 8005dea:	bd80      	pop	{r7, pc}

08005dec <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005dec:	b580      	push	{r7, lr}
 8005dee:	b082      	sub	sp, #8
 8005df0:	af00      	add	r7, sp, #0
 8005df2:	6078      	str	r0, [r7, #4]
 8005df4:	460b      	mov	r3, r1
 8005df6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	f8d3 0268 	ldr.w	r0, [r3, #616]	; 0x268
 8005dfe:	78fb      	ldrb	r3, [r7, #3]
 8005e00:	687a      	ldr	r2, [r7, #4]
 8005e02:	015b      	lsls	r3, r3, #5
 8005e04:	4413      	add	r3, r2
 8005e06:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8005e0a:	681a      	ldr	r2, [r3, #0]
 8005e0c:	78fb      	ldrb	r3, [r7, #3]
 8005e0e:	4619      	mov	r1, r3
 8005e10:	f7fe fe4f 	bl	8004ab2 <USBD_LL_DataOutStage>
}
 8005e14:	bf00      	nop
 8005e16:	3708      	adds	r7, #8
 8005e18:	46bd      	mov	sp, r7
 8005e1a:	bd80      	pop	{r7, pc}

08005e1c <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005e1c:	b580      	push	{r7, lr}
 8005e1e:	b082      	sub	sp, #8
 8005e20:	af00      	add	r7, sp, #0
 8005e22:	6078      	str	r0, [r7, #4]
 8005e24:	460b      	mov	r3, r1
 8005e26:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	f8d3 0268 	ldr.w	r0, [r3, #616]	; 0x268
 8005e2e:	78fb      	ldrb	r3, [r7, #3]
 8005e30:	687a      	ldr	r2, [r7, #4]
 8005e32:	015b      	lsls	r3, r3, #5
 8005e34:	4413      	add	r3, r2
 8005e36:	333c      	adds	r3, #60	; 0x3c
 8005e38:	681a      	ldr	r2, [r3, #0]
 8005e3a:	78fb      	ldrb	r3, [r7, #3]
 8005e3c:	4619      	mov	r1, r3
 8005e3e:	f7fe fea9 	bl	8004b94 <USBD_LL_DataInStage>
}
 8005e42:	bf00      	nop
 8005e44:	3708      	adds	r7, #8
 8005e46:	46bd      	mov	sp, r7
 8005e48:	bd80      	pop	{r7, pc}

08005e4a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005e4a:	b580      	push	{r7, lr}
 8005e4c:	b082      	sub	sp, #8
 8005e4e:	af00      	add	r7, sp, #0
 8005e50:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8005e58:	4618      	mov	r0, r3
 8005e5a:	f7fe ffb9 	bl	8004dd0 <USBD_LL_SOF>
}
 8005e5e:	bf00      	nop
 8005e60:	3708      	adds	r7, #8
 8005e62:	46bd      	mov	sp, r7
 8005e64:	bd80      	pop	{r7, pc}

08005e66 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{ 
 8005e66:	b580      	push	{r7, lr}
 8005e68:	b084      	sub	sp, #16
 8005e6a:	af00      	add	r7, sp, #0
 8005e6c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8005e6e:	2301      	movs	r3, #1
 8005e70:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	689b      	ldr	r3, [r3, #8]
 8005e76:	2b02      	cmp	r3, #2
 8005e78:	d001      	beq.n	8005e7e <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8005e7a:	f7fa fa23 	bl	80002c4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8005e84:	7bfa      	ldrb	r2, [r7, #15]
 8005e86:	4611      	mov	r1, r2
 8005e88:	4618      	mov	r0, r3
 8005e8a:	f7fe ff69 	bl	8004d60 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8005e94:	4618      	mov	r0, r3
 8005e96:	f7fe ff22 	bl	8004cde <USBD_LL_Reset>
}
 8005e9a:	bf00      	nop
 8005e9c:	3710      	adds	r7, #16
 8005e9e:	46bd      	mov	sp, r7
 8005ea0:	bd80      	pop	{r7, pc}
	...

08005ea4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005ea4:	b580      	push	{r7, lr}
 8005ea6:	b082      	sub	sp, #8
 8005ea8:	af00      	add	r7, sp, #0
 8005eaa:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8005eb2:	4618      	mov	r0, r3
 8005eb4:	f7fe ff63 	bl	8004d7e <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	699b      	ldr	r3, [r3, #24]
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d005      	beq.n	8005ecc <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8005ec0:	4b04      	ldr	r3, [pc, #16]	; (8005ed4 <HAL_PCD_SuspendCallback+0x30>)
 8005ec2:	691b      	ldr	r3, [r3, #16]
 8005ec4:	4a03      	ldr	r2, [pc, #12]	; (8005ed4 <HAL_PCD_SuspendCallback+0x30>)
 8005ec6:	f043 0306 	orr.w	r3, r3, #6
 8005eca:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8005ecc:	bf00      	nop
 8005ece:	3708      	adds	r7, #8
 8005ed0:	46bd      	mov	sp, r7
 8005ed2:	bd80      	pop	{r7, pc}
 8005ed4:	e000ed00 	.word	0xe000ed00

08005ed8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005ed8:	b580      	push	{r7, lr}
 8005eda:	b082      	sub	sp, #8
 8005edc:	af00      	add	r7, sp, #0
 8005ede:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8005ee6:	4618      	mov	r0, r3
 8005ee8:	f7fe ff5d 	bl	8004da6 <USBD_LL_Resume>
}
 8005eec:	bf00      	nop
 8005eee:	3708      	adds	r7, #8
 8005ef0:	46bd      	mov	sp, r7
 8005ef2:	bd80      	pop	{r7, pc}

08005ef4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8005ef4:	b580      	push	{r7, lr}
 8005ef6:	b082      	sub	sp, #8
 8005ef8:	af00      	add	r7, sp, #0
 8005efa:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8005efc:	4a23      	ldr	r2, [pc, #140]	; (8005f8c <USBD_LL_Init+0x98>)
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	f8c2 3268 	str.w	r3, [r2, #616]	; 0x268
  pdev->pData = &hpcd_USB_FS;
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	4a21      	ldr	r2, [pc, #132]	; (8005f8c <USBD_LL_Init+0x98>)
 8005f08:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 8005f0c:	4b1f      	ldr	r3, [pc, #124]	; (8005f8c <USBD_LL_Init+0x98>)
 8005f0e:	4a20      	ldr	r2, [pc, #128]	; (8005f90 <USBD_LL_Init+0x9c>)
 8005f10:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8005f12:	4b1e      	ldr	r3, [pc, #120]	; (8005f8c <USBD_LL_Init+0x98>)
 8005f14:	2208      	movs	r2, #8
 8005f16:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8005f18:	4b1c      	ldr	r3, [pc, #112]	; (8005f8c <USBD_LL_Init+0x98>)
 8005f1a:	2202      	movs	r2, #2
 8005f1c:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8005f1e:	4b1b      	ldr	r3, [pc, #108]	; (8005f8c <USBD_LL_Init+0x98>)
 8005f20:	2200      	movs	r2, #0
 8005f22:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8005f24:	4b19      	ldr	r3, [pc, #100]	; (8005f8c <USBD_LL_Init+0x98>)
 8005f26:	2200      	movs	r2, #0
 8005f28:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8005f2a:	4b18      	ldr	r3, [pc, #96]	; (8005f8c <USBD_LL_Init+0x98>)
 8005f2c:	2200      	movs	r2, #0
 8005f2e:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8005f30:	4816      	ldr	r0, [pc, #88]	; (8005f8c <USBD_LL_Init+0x98>)
 8005f32:	f7fa fda1 	bl	8000a78 <HAL_PCD_Init>
 8005f36:	4603      	mov	r3, r0
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d001      	beq.n	8005f40 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 8005f3c:	f7fa f9c2 	bl	80002c4 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8005f46:	2318      	movs	r3, #24
 8005f48:	2200      	movs	r2, #0
 8005f4a:	2100      	movs	r1, #0
 8005f4c:	f7fb fc66 	bl	800181c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8005f56:	2358      	movs	r3, #88	; 0x58
 8005f58:	2200      	movs	r2, #0
 8005f5a:	2180      	movs	r1, #128	; 0x80
 8005f5c:	f7fb fc5e 	bl	800181c <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_MSC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0x98);
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8005f66:	2398      	movs	r3, #152	; 0x98
 8005f68:	2200      	movs	r2, #0
 8005f6a:	2181      	movs	r1, #129	; 0x81
 8005f6c:	f7fb fc56 	bl	800181c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0xD8);
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8005f76:	23d8      	movs	r3, #216	; 0xd8
 8005f78:	2200      	movs	r2, #0
 8005f7a:	2101      	movs	r1, #1
 8005f7c:	f7fb fc4e 	bl	800181c <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_MSC */
  return USBD_OK;
 8005f80:	2300      	movs	r3, #0
}
 8005f82:	4618      	mov	r0, r3
 8005f84:	3708      	adds	r7, #8
 8005f86:	46bd      	mov	sp, r7
 8005f88:	bd80      	pop	{r7, pc}
 8005f8a:	bf00      	nop
 8005f8c:	20001278 	.word	0x20001278
 8005f90:	40005c00 	.word	0x40005c00

08005f94 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8005f94:	b580      	push	{r7, lr}
 8005f96:	b084      	sub	sp, #16
 8005f98:	af00      	add	r7, sp, #0
 8005f9a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8005f9c:	2300      	movs	r3, #0
 8005f9e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8005fa0:	2300      	movs	r3, #0
 8005fa2:	73bb      	strb	r3, [r7, #14]
 
  hal_status = HAL_PCD_Start(pdev->pData);
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005faa:	4618      	mov	r0, r3
 8005fac:	f7fa fe45 	bl	8000c3a <HAL_PCD_Start>
 8005fb0:	4603      	mov	r3, r0
 8005fb2:	73fb      	strb	r3, [r7, #15]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 8005fb4:	7bfb      	ldrb	r3, [r7, #15]
 8005fb6:	4618      	mov	r0, r3
 8005fb8:	f000 f966 	bl	8006288 <USBD_Get_USB_Status>
 8005fbc:	4603      	mov	r3, r0
 8005fbe:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8005fc0:	7bbb      	ldrb	r3, [r7, #14]
}
 8005fc2:	4618      	mov	r0, r3
 8005fc4:	3710      	adds	r7, #16
 8005fc6:	46bd      	mov	sp, r7
 8005fc8:	bd80      	pop	{r7, pc}

08005fca <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8005fca:	b580      	push	{r7, lr}
 8005fcc:	b084      	sub	sp, #16
 8005fce:	af00      	add	r7, sp, #0
 8005fd0:	6078      	str	r0, [r7, #4]
 8005fd2:	4608      	mov	r0, r1
 8005fd4:	4611      	mov	r1, r2
 8005fd6:	461a      	mov	r2, r3
 8005fd8:	4603      	mov	r3, r0
 8005fda:	70fb      	strb	r3, [r7, #3]
 8005fdc:	460b      	mov	r3, r1
 8005fde:	70bb      	strb	r3, [r7, #2]
 8005fe0:	4613      	mov	r3, r2
 8005fe2:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8005fe4:	2300      	movs	r3, #0
 8005fe6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8005fe8:	2300      	movs	r3, #0
 8005fea:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8005ff2:	78bb      	ldrb	r3, [r7, #2]
 8005ff4:	883a      	ldrh	r2, [r7, #0]
 8005ff6:	78f9      	ldrb	r1, [r7, #3]
 8005ff8:	f7fa ff78 	bl	8000eec <HAL_PCD_EP_Open>
 8005ffc:	4603      	mov	r3, r0
 8005ffe:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006000:	7bfb      	ldrb	r3, [r7, #15]
 8006002:	4618      	mov	r0, r3
 8006004:	f000 f940 	bl	8006288 <USBD_Get_USB_Status>
 8006008:	4603      	mov	r3, r0
 800600a:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;
 800600c:	7bbb      	ldrb	r3, [r7, #14]
}
 800600e:	4618      	mov	r0, r3
 8006010:	3710      	adds	r7, #16
 8006012:	46bd      	mov	sp, r7
 8006014:	bd80      	pop	{r7, pc}

08006016 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006016:	b580      	push	{r7, lr}
 8006018:	b084      	sub	sp, #16
 800601a:	af00      	add	r7, sp, #0
 800601c:	6078      	str	r0, [r7, #4]
 800601e:	460b      	mov	r3, r1
 8006020:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006022:	2300      	movs	r3, #0
 8006024:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006026:	2300      	movs	r3, #0
 8006028:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006030:	78fa      	ldrb	r2, [r7, #3]
 8006032:	4611      	mov	r1, r2
 8006034:	4618      	mov	r0, r3
 8006036:	f7fa ffb9 	bl	8000fac <HAL_PCD_EP_Close>
 800603a:	4603      	mov	r3, r0
 800603c:	73fb      	strb	r3, [r7, #15]
      
  usb_status =  USBD_Get_USB_Status(hal_status);
 800603e:	7bfb      	ldrb	r3, [r7, #15]
 8006040:	4618      	mov	r0, r3
 8006042:	f000 f921 	bl	8006288 <USBD_Get_USB_Status>
 8006046:	4603      	mov	r3, r0
 8006048:	73bb      	strb	r3, [r7, #14]

  return usb_status;  
 800604a:	7bbb      	ldrb	r3, [r7, #14]
}
 800604c:	4618      	mov	r0, r3
 800604e:	3710      	adds	r7, #16
 8006050:	46bd      	mov	sp, r7
 8006052:	bd80      	pop	{r7, pc}

08006054 <USBD_LL_FlushEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_FlushEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006054:	b580      	push	{r7, lr}
 8006056:	b084      	sub	sp, #16
 8006058:	af00      	add	r7, sp, #0
 800605a:	6078      	str	r0, [r7, #4]
 800605c:	460b      	mov	r3, r1
 800605e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006060:	2300      	movs	r3, #0
 8006062:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006064:	2300      	movs	r3, #0
 8006066:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_Flush(pdev->pData, ep_addr);
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800606e:	78fa      	ldrb	r2, [r7, #3]
 8006070:	4611      	mov	r1, r2
 8006072:	4618      	mov	r0, r3
 8006074:	f7fb f90b 	bl	800128e <HAL_PCD_EP_Flush>
 8006078:	4603      	mov	r3, r0
 800607a:	73fb      	strb	r3, [r7, #15]
      
  usb_status =  USBD_Get_USB_Status(hal_status);
 800607c:	7bfb      	ldrb	r3, [r7, #15]
 800607e:	4618      	mov	r0, r3
 8006080:	f000 f902 	bl	8006288 <USBD_Get_USB_Status>
 8006084:	4603      	mov	r3, r0
 8006086:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;  
 8006088:	7bbb      	ldrb	r3, [r7, #14]
}
 800608a:	4618      	mov	r0, r3
 800608c:	3710      	adds	r7, #16
 800608e:	46bd      	mov	sp, r7
 8006090:	bd80      	pop	{r7, pc}

08006092 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006092:	b580      	push	{r7, lr}
 8006094:	b084      	sub	sp, #16
 8006096:	af00      	add	r7, sp, #0
 8006098:	6078      	str	r0, [r7, #4]
 800609a:	460b      	mov	r3, r1
 800609c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800609e:	2300      	movs	r3, #0
 80060a0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80060a2:	2300      	movs	r3, #0
 80060a4:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80060ac:	78fa      	ldrb	r2, [r7, #3]
 80060ae:	4611      	mov	r1, r2
 80060b0:	4618      	mov	r0, r3
 80060b2:	f7fb f844 	bl	800113e <HAL_PCD_EP_SetStall>
 80060b6:	4603      	mov	r3, r0
 80060b8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80060ba:	7bfb      	ldrb	r3, [r7, #15]
 80060bc:	4618      	mov	r0, r3
 80060be:	f000 f8e3 	bl	8006288 <USBD_Get_USB_Status>
 80060c2:	4603      	mov	r3, r0
 80060c4:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 80060c6:	7bbb      	ldrb	r3, [r7, #14]
}
 80060c8:	4618      	mov	r0, r3
 80060ca:	3710      	adds	r7, #16
 80060cc:	46bd      	mov	sp, r7
 80060ce:	bd80      	pop	{r7, pc}

080060d0 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80060d0:	b580      	push	{r7, lr}
 80060d2:	b084      	sub	sp, #16
 80060d4:	af00      	add	r7, sp, #0
 80060d6:	6078      	str	r0, [r7, #4]
 80060d8:	460b      	mov	r3, r1
 80060da:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80060dc:	2300      	movs	r3, #0
 80060de:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80060e0:	2300      	movs	r3, #0
 80060e2:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);  
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80060ea:	78fa      	ldrb	r2, [r7, #3]
 80060ec:	4611      	mov	r1, r2
 80060ee:	4618      	mov	r0, r3
 80060f0:	f7fb f87f 	bl	80011f2 <HAL_PCD_EP_ClrStall>
 80060f4:	4603      	mov	r3, r0
 80060f6:	73fb      	strb	r3, [r7, #15]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 80060f8:	7bfb      	ldrb	r3, [r7, #15]
 80060fa:	4618      	mov	r0, r3
 80060fc:	f000 f8c4 	bl	8006288 <USBD_Get_USB_Status>
 8006100:	4603      	mov	r3, r0
 8006102:	73bb      	strb	r3, [r7, #14]

  return usb_status; 
 8006104:	7bbb      	ldrb	r3, [r7, #14]
}
 8006106:	4618      	mov	r0, r3
 8006108:	3710      	adds	r7, #16
 800610a:	46bd      	mov	sp, r7
 800610c:	bd80      	pop	{r7, pc}

0800610e <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800610e:	b480      	push	{r7}
 8006110:	b085      	sub	sp, #20
 8006112:	af00      	add	r7, sp, #0
 8006114:	6078      	str	r0, [r7, #4]
 8006116:	460b      	mov	r3, r1
 8006118:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006120:	60fb      	str	r3, [r7, #12]
  
  if((ep_addr & 0x80) == 0x80)
 8006122:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006126:	2b00      	cmp	r3, #0
 8006128:	da08      	bge.n	800613c <USBD_LL_IsStallEP+0x2e>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 800612a:	78fb      	ldrb	r3, [r7, #3]
 800612c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006130:	68fa      	ldr	r2, [r7, #12]
 8006132:	015b      	lsls	r3, r3, #5
 8006134:	4413      	add	r3, r2
 8006136:	332a      	adds	r3, #42	; 0x2a
 8006138:	781b      	ldrb	r3, [r3, #0]
 800613a:	e008      	b.n	800614e <USBD_LL_IsStallEP+0x40>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 800613c:	78fb      	ldrb	r3, [r7, #3]
 800613e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006142:	68fa      	ldr	r2, [r7, #12]
 8006144:	015b      	lsls	r3, r3, #5
 8006146:	4413      	add	r3, r2
 8006148:	f503 7395 	add.w	r3, r3, #298	; 0x12a
 800614c:	781b      	ldrb	r3, [r3, #0]
  }
}
 800614e:	4618      	mov	r0, r3
 8006150:	3714      	adds	r7, #20
 8006152:	46bd      	mov	sp, r7
 8006154:	bc80      	pop	{r7}
 8006156:	4770      	bx	lr

08006158 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8006158:	b580      	push	{r7, lr}
 800615a:	b084      	sub	sp, #16
 800615c:	af00      	add	r7, sp, #0
 800615e:	6078      	str	r0, [r7, #4]
 8006160:	460b      	mov	r3, r1
 8006162:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006164:	2300      	movs	r3, #0
 8006166:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006168:	2300      	movs	r3, #0
 800616a:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006172:	78fa      	ldrb	r2, [r7, #3]
 8006174:	4611      	mov	r1, r2
 8006176:	4618      	mov	r0, r3
 8006178:	f7fa fe93 	bl	8000ea2 <HAL_PCD_SetAddress>
 800617c:	4603      	mov	r3, r0
 800617e:	73fb      	strb	r3, [r7, #15]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 8006180:	7bfb      	ldrb	r3, [r7, #15]
 8006182:	4618      	mov	r0, r3
 8006184:	f000 f880 	bl	8006288 <USBD_Get_USB_Status>
 8006188:	4603      	mov	r3, r0
 800618a:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 800618c:	7bbb      	ldrb	r3, [r7, #14]
}
 800618e:	4618      	mov	r0, r3
 8006190:	3710      	adds	r7, #16
 8006192:	46bd      	mov	sp, r7
 8006194:	bd80      	pop	{r7, pc}

08006196 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8006196:	b580      	push	{r7, lr}
 8006198:	b086      	sub	sp, #24
 800619a:	af00      	add	r7, sp, #0
 800619c:	60f8      	str	r0, [r7, #12]
 800619e:	607a      	str	r2, [r7, #4]
 80061a0:	461a      	mov	r2, r3
 80061a2:	460b      	mov	r3, r1
 80061a4:	72fb      	strb	r3, [r7, #11]
 80061a6:	4613      	mov	r3, r2
 80061a8:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80061aa:	2300      	movs	r3, #0
 80061ac:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80061ae:	2300      	movs	r3, #0
 80061b0:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80061b8:	893b      	ldrh	r3, [r7, #8]
 80061ba:	7af9      	ldrb	r1, [r7, #11]
 80061bc:	687a      	ldr	r2, [r7, #4]
 80061be:	f7fa ff85 	bl	80010cc <HAL_PCD_EP_Transmit>
 80061c2:	4603      	mov	r3, r0
 80061c4:	75fb      	strb	r3, [r7, #23]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 80061c6:	7dfb      	ldrb	r3, [r7, #23]
 80061c8:	4618      	mov	r0, r3
 80061ca:	f000 f85d 	bl	8006288 <USBD_Get_USB_Status>
 80061ce:	4603      	mov	r3, r0
 80061d0:	75bb      	strb	r3, [r7, #22]
  
  return usb_status;    
 80061d2:	7dbb      	ldrb	r3, [r7, #22]
}
 80061d4:	4618      	mov	r0, r3
 80061d6:	3718      	adds	r7, #24
 80061d8:	46bd      	mov	sp, r7
 80061da:	bd80      	pop	{r7, pc}

080061dc <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 80061dc:	b580      	push	{r7, lr}
 80061de:	b086      	sub	sp, #24
 80061e0:	af00      	add	r7, sp, #0
 80061e2:	60f8      	str	r0, [r7, #12]
 80061e4:	607a      	str	r2, [r7, #4]
 80061e6:	461a      	mov	r2, r3
 80061e8:	460b      	mov	r3, r1
 80061ea:	72fb      	strb	r3, [r7, #11]
 80061ec:	4613      	mov	r3, r2
 80061ee:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80061f0:	2300      	movs	r3, #0
 80061f2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80061f4:	2300      	movs	r3, #0
 80061f6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80061fe:	893b      	ldrh	r3, [r7, #8]
 8006200:	7af9      	ldrb	r1, [r7, #11]
 8006202:	687a      	ldr	r2, [r7, #4]
 8006204:	f7fa ff14 	bl	8001030 <HAL_PCD_EP_Receive>
 8006208:	4603      	mov	r3, r0
 800620a:	75fb      	strb	r3, [r7, #23]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 800620c:	7dfb      	ldrb	r3, [r7, #23]
 800620e:	4618      	mov	r0, r3
 8006210:	f000 f83a 	bl	8006288 <USBD_Get_USB_Status>
 8006214:	4603      	mov	r3, r0
 8006216:	75bb      	strb	r3, [r7, #22]
  	
  return usb_status; 
 8006218:	7dbb      	ldrb	r3, [r7, #22]
}
 800621a:	4618      	mov	r0, r3
 800621c:	3718      	adds	r7, #24
 800621e:	46bd      	mov	sp, r7
 8006220:	bd80      	pop	{r7, pc}

08006222 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006222:	b580      	push	{r7, lr}
 8006224:	b082      	sub	sp, #8
 8006226:	af00      	add	r7, sp, #0
 8006228:	6078      	str	r0, [r7, #4]
 800622a:	460b      	mov	r3, r1
 800622c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006234:	78fa      	ldrb	r2, [r7, #3]
 8006236:	4611      	mov	r1, r2
 8006238:	4618      	mov	r0, r3
 800623a:	f7fa ff33 	bl	80010a4 <HAL_PCD_EP_GetRxCount>
 800623e:	4603      	mov	r3, r0
}
 8006240:	4618      	mov	r0, r3
 8006242:	3708      	adds	r7, #8
 8006244:	46bd      	mov	sp, r7
 8006246:	bd80      	pop	{r7, pc}

08006248 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8006248:	b480      	push	{r7}
 800624a:	b083      	sub	sp, #12
 800624c:	af00      	add	r7, sp, #0
 800624e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_MSC_BOT_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8006250:	4b02      	ldr	r3, [pc, #8]	; (800625c <USBD_static_malloc+0x14>)
}
 8006252:	4618      	mov	r0, r3
 8006254:	370c      	adds	r7, #12
 8006256:	46bd      	mov	sp, r7
 8006258:	bc80      	pop	{r7}
 800625a:	4770      	bx	lr
 800625c:	20000b40 	.word	0x20000b40

08006260 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8006260:	b480      	push	{r7}
 8006262:	b083      	sub	sp, #12
 8006264:	af00      	add	r7, sp, #0
 8006266:	6078      	str	r0, [r7, #4]

}
 8006268:	bf00      	nop
 800626a:	370c      	adds	r7, #12
 800626c:	46bd      	mov	sp, r7
 800626e:	bc80      	pop	{r7}
 8006270:	4770      	bx	lr

08006272 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006272:	b480      	push	{r7}
 8006274:	b083      	sub	sp, #12
 8006276:	af00      	add	r7, sp, #0
 8006278:	6078      	str	r0, [r7, #4]
 800627a:	460b      	mov	r3, r1
 800627c:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 800627e:	bf00      	nop
 8006280:	370c      	adds	r7, #12
 8006282:	46bd      	mov	sp, r7
 8006284:	bc80      	pop	{r7}
 8006286:	4770      	bx	lr

08006288 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8006288:	b480      	push	{r7}
 800628a:	b085      	sub	sp, #20
 800628c:	af00      	add	r7, sp, #0
 800628e:	4603      	mov	r3, r0
 8006290:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006292:	2300      	movs	r3, #0
 8006294:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8006296:	79fb      	ldrb	r3, [r7, #7]
 8006298:	2b03      	cmp	r3, #3
 800629a:	d817      	bhi.n	80062cc <USBD_Get_USB_Status+0x44>
 800629c:	a201      	add	r2, pc, #4	; (adr r2, 80062a4 <USBD_Get_USB_Status+0x1c>)
 800629e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062a2:	bf00      	nop
 80062a4:	080062b5 	.word	0x080062b5
 80062a8:	080062bb 	.word	0x080062bb
 80062ac:	080062c1 	.word	0x080062c1
 80062b0:	080062c7 	.word	0x080062c7
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80062b4:	2300      	movs	r3, #0
 80062b6:	73fb      	strb	r3, [r7, #15]
    break;
 80062b8:	e00b      	b.n	80062d2 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80062ba:	2302      	movs	r3, #2
 80062bc:	73fb      	strb	r3, [r7, #15]
    break;
 80062be:	e008      	b.n	80062d2 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80062c0:	2301      	movs	r3, #1
 80062c2:	73fb      	strb	r3, [r7, #15]
    break;
 80062c4:	e005      	b.n	80062d2 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80062c6:	2302      	movs	r3, #2
 80062c8:	73fb      	strb	r3, [r7, #15]
    break;
 80062ca:	e002      	b.n	80062d2 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80062cc:	2302      	movs	r3, #2
 80062ce:	73fb      	strb	r3, [r7, #15]
    break;
 80062d0:	bf00      	nop
  }
  return usb_status;
 80062d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80062d4:	4618      	mov	r0, r3
 80062d6:	3714      	adds	r7, #20
 80062d8:	46bd      	mov	sp, r7
 80062da:	bc80      	pop	{r7}
 80062dc:	4770      	bx	lr
 80062de:	bf00      	nop

080062e0 <__libc_init_array>:
 80062e0:	b570      	push	{r4, r5, r6, lr}
 80062e2:	2500      	movs	r5, #0
 80062e4:	4e0c      	ldr	r6, [pc, #48]	; (8006318 <__libc_init_array+0x38>)
 80062e6:	4c0d      	ldr	r4, [pc, #52]	; (800631c <__libc_init_array+0x3c>)
 80062e8:	1ba4      	subs	r4, r4, r6
 80062ea:	10a4      	asrs	r4, r4, #2
 80062ec:	42a5      	cmp	r5, r4
 80062ee:	d109      	bne.n	8006304 <__libc_init_array+0x24>
 80062f0:	f000 f82e 	bl	8006350 <_init>
 80062f4:	2500      	movs	r5, #0
 80062f6:	4e0a      	ldr	r6, [pc, #40]	; (8006320 <__libc_init_array+0x40>)
 80062f8:	4c0a      	ldr	r4, [pc, #40]	; (8006324 <__libc_init_array+0x44>)
 80062fa:	1ba4      	subs	r4, r4, r6
 80062fc:	10a4      	asrs	r4, r4, #2
 80062fe:	42a5      	cmp	r5, r4
 8006300:	d105      	bne.n	800630e <__libc_init_array+0x2e>
 8006302:	bd70      	pop	{r4, r5, r6, pc}
 8006304:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006308:	4798      	blx	r3
 800630a:	3501      	adds	r5, #1
 800630c:	e7ee      	b.n	80062ec <__libc_init_array+0xc>
 800630e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006312:	4798      	blx	r3
 8006314:	3501      	adds	r5, #1
 8006316:	e7f2      	b.n	80062fe <__libc_init_array+0x1e>
 8006318:	0800640c 	.word	0x0800640c
 800631c:	0800640c 	.word	0x0800640c
 8006320:	0800640c 	.word	0x0800640c
 8006324:	08006410 	.word	0x08006410

08006328 <memcpy>:
 8006328:	b510      	push	{r4, lr}
 800632a:	1e43      	subs	r3, r0, #1
 800632c:	440a      	add	r2, r1
 800632e:	4291      	cmp	r1, r2
 8006330:	d100      	bne.n	8006334 <memcpy+0xc>
 8006332:	bd10      	pop	{r4, pc}
 8006334:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006338:	f803 4f01 	strb.w	r4, [r3, #1]!
 800633c:	e7f7      	b.n	800632e <memcpy+0x6>

0800633e <memset>:
 800633e:	4603      	mov	r3, r0
 8006340:	4402      	add	r2, r0
 8006342:	4293      	cmp	r3, r2
 8006344:	d100      	bne.n	8006348 <memset+0xa>
 8006346:	4770      	bx	lr
 8006348:	f803 1b01 	strb.w	r1, [r3], #1
 800634c:	e7f9      	b.n	8006342 <memset+0x4>
	...

08006350 <_init>:
 8006350:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006352:	bf00      	nop
 8006354:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006356:	bc08      	pop	{r3}
 8006358:	469e      	mov	lr, r3
 800635a:	4770      	bx	lr

0800635c <_fini>:
 800635c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800635e:	bf00      	nop
 8006360:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006362:	bc08      	pop	{r3}
 8006364:	469e      	mov	lr, r3
 8006366:	4770      	bx	lr
